/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Subject } from 'rxjs';
import { toPairs } from 'lodash';
/* tslint:disable:max-classes-per-file */
/**
 * Event payload when a property changes.
 */
var InputPropertyChange = /** @class */ (function () {
    function InputPropertyChange(key, value) {
        this.key = key;
        this.value = value;
    }
    return InputPropertyChange;
}());
export { InputPropertyChange };
/**
 * Used for storing component input values for the dynamic component. The values
 * are set onto the dynamic component's properties that are decorated by the @DynamicInput()
 * decorator. Values can be retrieved or set programmatically by the form element's 'input'
 * property.
 */
var InputProperties = /** @class */ (function () {
    function InputProperties(object) {
        if (object === void 0) { object = {}; }
        this.changes = new Subject();
        this._map = new Map(toPairs(object));
    }
    /**
     * Get a property.
     *
     * @param {keyof T} key
     * @returns {T[keyof T] | undefined} value
     */
    InputProperties.prototype.get = function (key) {
        return this._map.get(key);
    };
    /**
     * Setting a property.
     *
     * @param {keyof T} key
     * @param {T[keyof T]} value
     * @param {boolean} emit If emit is set to false. It will not emit changes to the
     * the component for those observing for property changes.
     */
    InputProperties.prototype.set = function (key, value, emit) {
        if (emit === void 0) { emit = true; }
        this._map.set(key, value);
        if (emit) {
            this.changes.next(new InputPropertyChange(key, value));
        }
    };
    return InputProperties;
}());
export { InputProperties };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtcHJvcGVydGllcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvZm9ybS1idWlsZGVyL21vZGVscy9pbnB1dC1wcm9wZXJ0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUNILE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUVqQyx5Q0FBeUM7QUFFekM7O0dBRUc7QUFDSDtJQUNJLDZCQUFtQixHQUFXLEVBQVMsS0FBVTtRQUE5QixRQUFHLEdBQUgsR0FBRyxDQUFRO1FBQVMsVUFBSyxHQUFMLEtBQUssQ0FBSztJQUFHLENBQUM7SUFDekQsMEJBQUM7QUFBRCxDQUFDLEFBRkQsSUFFQzs7QUFFRDs7Ozs7R0FLRztBQUNIO0lBT0kseUJBQVksTUFBbUM7UUFBbkMsdUJBQUEsRUFBQSxXQUFtQztRQU50QyxZQUFPLEdBQW9DLElBQUksT0FBTyxFQUF1QixDQUFDO1FBT25GLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsNkJBQUcsR0FBSCxVQUFPLEdBQVk7UUFDZixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQWEsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsNkJBQUcsR0FBSCxVQUFPLEdBQVksRUFBRSxLQUFpQixFQUFFLElBQVc7UUFBWCxxQkFBQSxFQUFBLFdBQVc7UUFDL0MsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLElBQUksSUFBSSxFQUFFO1lBQ0wsSUFBSSxDQUFDLE9BQXdDLENBQUMsSUFBSSxDQUMvQyxJQUFJLG1CQUFtQixDQUFDLEdBQWEsRUFBRSxLQUFLLENBQUMsQ0FDaEQsQ0FBQztTQUNMO0lBQ0wsQ0FBQztJQUNMLHNCQUFDO0FBQUQsQ0FBQyxBQXJDRCxJQXFDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFNBUCBTRSBvciBhbiBTQVAgYWZmaWxpYXRlIGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbW9kdWxlIHNtYXJ0dXRpbHNcbiAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdG9QYWlycyB9IGZyb20gJ2xvZGFzaCc7XG5cbi8qIHRzbGludDpkaXNhYmxlOm1heC1jbGFzc2VzLXBlci1maWxlICovXG5cbi8qKlxuICogRXZlbnQgcGF5bG9hZCB3aGVuIGEgcHJvcGVydHkgY2hhbmdlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIElucHV0UHJvcGVydHlDaGFuZ2Uge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBrZXk6IHN0cmluZywgcHVibGljIHZhbHVlOiBhbnkpIHt9XG59XG5cbi8qKlxuICogVXNlZCBmb3Igc3RvcmluZyBjb21wb25lbnQgaW5wdXQgdmFsdWVzIGZvciB0aGUgZHluYW1pYyBjb21wb25lbnQuIFRoZSB2YWx1ZXNcbiAqIGFyZSBzZXQgb250byB0aGUgZHluYW1pYyBjb21wb25lbnQncyBwcm9wZXJ0aWVzIHRoYXQgYXJlIGRlY29yYXRlZCBieSB0aGUgQER5bmFtaWNJbnB1dCgpXG4gKiBkZWNvcmF0b3IuIFZhbHVlcyBjYW4gYmUgcmV0cmlldmVkIG9yIHNldCBwcm9ncmFtbWF0aWNhbGx5IGJ5IHRoZSBmb3JtIGVsZW1lbnQncyAnaW5wdXQnXG4gKiBwcm9wZXJ0eS5cbiAqL1xuZXhwb3J0IGNsYXNzIElucHV0UHJvcGVydGllcyB7XG4gICAgcmVhZG9ubHkgY2hhbmdlczogT2JzZXJ2YWJsZTxJbnB1dFByb3BlcnR5Q2hhbmdlPiA9IG5ldyBTdWJqZWN0PElucHV0UHJvcGVydHlDaGFuZ2U+KCk7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBfbWFwOiBNYXA8c3RyaW5nLCBhbnk+O1xuXG4gICAgY29uc3RydWN0b3Iob2JqZWN0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge30pIHtcbiAgICAgICAgdGhpcy5fbWFwID0gbmV3IE1hcCh0b1BhaXJzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtrZXlvZiBUfSBrZXlcbiAgICAgKiBAcmV0dXJucyB7VFtrZXlvZiBUXSB8IHVuZGVmaW5lZH0gdmFsdWVcbiAgICAgKi9cbiAgICBnZXQ8VD4oa2V5OiBrZXlvZiBUKTogVFtrZXlvZiBUXSB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAuZ2V0KGtleSBhcyBzdHJpbmcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHRpbmcgYSBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7a2V5b2YgVH0ga2V5XG4gICAgICogQHBhcmFtIHtUW2tleW9mIFRdfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW1pdCBJZiBlbWl0IGlzIHNldCB0byBmYWxzZS4gSXQgd2lsbCBub3QgZW1pdCBjaGFuZ2VzIHRvIHRoZVxuICAgICAqIHRoZSBjb21wb25lbnQgZm9yIHRob3NlIG9ic2VydmluZyBmb3IgcHJvcGVydHkgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBzZXQ8VD4oa2V5OiBrZXlvZiBULCB2YWx1ZTogVFtrZXlvZiBUXSwgZW1pdCA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5fbWFwLnNldChrZXkgYXMgc3RyaW5nLCB2YWx1ZSk7XG4gICAgICAgIGlmIChlbWl0KSB7XG4gICAgICAgICAgICAodGhpcy5jaGFuZ2VzIGFzIFN1YmplY3Q8SW5wdXRQcm9wZXJ0eUNoYW5nZT4pLm5leHQoXG4gICAgICAgICAgICAgICAgbmV3IElucHV0UHJvcGVydHlDaGFuZ2Uoa2V5IGFzIHN0cmluZywgdmFsdWUpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19