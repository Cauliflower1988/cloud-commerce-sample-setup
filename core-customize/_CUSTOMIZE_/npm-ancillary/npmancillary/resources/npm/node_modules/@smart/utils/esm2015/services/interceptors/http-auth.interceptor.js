/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Inject, Injectable, Injector } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { from, Observable } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { HttpUtils } from '../../utils';
import { IAuthenticationService, IAuthToken, IStorageService } from '../../interfaces';
import { GET_REQUESTS_ON_HOLD_MAP } from './errors/unauthorized-error.interceptor';
import { I18N_RESOURCE_URI_TOKEN } from '../../constants';
/**
 * @ngdoc service
 * @name @smartutils.httpAuthInterceptor
 *
 * @description
 * Makes it possible to perform global authentication by intercepting requests before they are forwarded to the server
 * and responses before they are forwarded to the application code.
 *
 */
let HttpAuthInterceptor = class HttpAuthInterceptor {
    constructor(authenticationService, injector, httpUtils, I18N_RESOURCE_URI) {
        this.authenticationService = authenticationService;
        this.injector = injector;
        this.httpUtils = httpUtils;
        this.I18N_RESOURCE_URI = I18N_RESOURCE_URI;
    }
    /**
     * @ngdoc method
     * @name @smartutils.httpAuthInterceptor#request
     * @methodOf @smartutils.httpAuthInterceptor
     *
     * @description
     * Interceptor method which gets called with a http config object, intercepts any request made using httpClient service.
     * A call to any REST resource will be intercepted by this method, which then adds an authentication token to the request
     * and then forwards it to the REST resource.
     *
     */
    intercept(request, next) {
        if (!request.url.includes(this.I18N_RESOURCE_URI) &&
            this.httpUtils.isCRUDRequest(request)) {
            if (this.httpUtils.isGET(request) && GET_REQUESTS_ON_HOLD_MAP[request.url]) {
                return new Observable((obj) => {
                    GET_REQUESTS_ON_HOLD_MAP[request.url].then((body) => {
                        obj.next(new HttpResponse({ status: 200, body }));
                    });
                });
            }
            return from(this.authenticationService.filterEntryPoints(request.url)).pipe(switchMap((entryPoints) => {
                if (entryPoints && entryPoints.length) {
                    return from(this.injector.get(IStorageService).getAuthToken(entryPoints[0])).pipe(switchMap((authToken) => {
                        if (authToken) {
                            const authReq = request.clone({
                                headers: request.headers.set('Authorization', authToken.token_type + ' ' + authToken.access_token)
                            });
                            return next.handle(authReq);
                        }
                        else {
                            return next.handle(request);
                        }
                    }));
                }
                else {
                    return next.handle(request);
                }
            }));
        }
        else {
            return next.handle(request);
        }
    }
};
HttpAuthInterceptor.ctorParameters = () => [
    { type: IAuthenticationService },
    { type: Injector },
    { type: HttpUtils },
    { type: String, decorators: [{ type: Inject, args: [I18N_RESOURCE_URI_TOKEN,] }] }
];
HttpAuthInterceptor = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(3, Inject(I18N_RESOURCE_URI_TOKEN)),
    tslib_1.__metadata("design:paramtypes", [IAuthenticationService,
        Injector,
        HttpUtils, String])
], HttpAuthInterceptor);
export { HttpAuthInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1hdXRoLmludGVyY2VwdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNtYXJ0L3V0aWxzLyIsInNvdXJjZXMiOlsic2VydmljZXMvaW50ZXJjZXB0b3JzL2h0dHAtYXV0aC5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHO0FBQ0gsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFLSCxZQUFZLEVBQ2YsTUFBTSxzQkFBc0IsQ0FBQztBQUM5QixPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN4QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN4QyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3ZGLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ25GLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTFEOzs7Ozs7OztHQVFHO0FBRUgsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBbUI7SUFDNUIsWUFDWSxxQkFBNkMsRUFDN0MsUUFBa0IsRUFDbEIsU0FBb0IsRUFDYSxpQkFBeUI7UUFIMUQsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF3QjtRQUM3QyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDYSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQVE7SUFDbkUsQ0FBQztJQUNKOzs7Ozs7Ozs7O09BVUc7SUFDSCxTQUFTLENBQUMsT0FBeUIsRUFBRSxJQUFpQjtRQUNsRCxJQUNJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1lBQzdDLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUN2QztZQUNFLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksd0JBQXdCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN4RSxPQUFPLElBQUksVUFBVSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7b0JBQzFCLHdCQUF3QixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTt3QkFDaEQsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLFlBQVksQ0FBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUMzRCxDQUFDLENBQUMsQ0FBQztnQkFDUCxDQUFDLENBQUMsQ0FBQzthQUNOO1lBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDdkUsU0FBUyxDQUF1QyxDQUFDLFdBQXFCLEVBQUUsRUFBRTtnQkFDdEUsSUFBSSxXQUFXLElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRTtvQkFDbkMsT0FBTyxJQUFJLENBQ1AsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNsRSxDQUFDLElBQUksQ0FDRixTQUFTLENBQ0wsQ0FBQyxTQUFxQixFQUFFLEVBQUU7d0JBQ3RCLElBQUksU0FBUyxFQUFFOzRCQUNYLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7Z0NBQzFCLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FDeEIsZUFBZSxFQUNmLFNBQVMsQ0FBQyxVQUFVLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxZQUFZLENBQ3REOzZCQUNKLENBQUMsQ0FBQzs0QkFDSCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7eUJBQy9COzZCQUFNOzRCQUNILE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQzt5QkFDL0I7b0JBQ0wsQ0FBQyxDQUNKLENBQ0osQ0FBQztpQkFDTDtxQkFBTTtvQkFDSCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQy9CO1lBQ0wsQ0FBQyxDQUFDLENBQ0wsQ0FBQztTQUNMO2FBQU07WUFDSCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDL0I7SUFDTCxDQUFDO0NBQ0osQ0FBQTs7WUEzRHNDLHNCQUFzQjtZQUNuQyxRQUFRO1lBQ1AsU0FBUzt5Q0FDM0IsTUFBTSxTQUFDLHVCQUF1Qjs7QUFMMUIsbUJBQW1CO0lBRC9CLFVBQVUsRUFBRTtJQU1KLG1CQUFBLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBOzZDQUhELHNCQUFzQjtRQUNuQyxRQUFRO1FBQ1AsU0FBUztHQUp2QixtQkFBbUIsQ0E2RC9CO1NBN0RZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFNBUCBTRSBvciBhbiBTQVAgYWZmaWxpYXRlIGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbW9kdWxlIHNtYXJ0dXRpbHNcbiAqL1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBIdHRwRXZlbnQsXG4gICAgSHR0cEhhbmRsZXIsXG4gICAgSHR0cEludGVyY2VwdG9yLFxuICAgIEh0dHBSZXF1ZXN0LFxuICAgIEh0dHBSZXNwb25zZVxufSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBmcm9tLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBIdHRwVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBJQXV0aGVudGljYXRpb25TZXJ2aWNlLCBJQXV0aFRva2VuLCBJU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IEdFVF9SRVFVRVNUU19PTl9IT0xEX01BUCB9IGZyb20gJy4vZXJyb3JzL3VuYXV0aG9yaXplZC1lcnJvci5pbnRlcmNlcHRvcic7XG5pbXBvcnQgeyBJMThOX1JFU09VUkNFX1VSSV9UT0tFTiB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lIEBzbWFydHV0aWxzLmh0dHBBdXRoSW50ZXJjZXB0b3JcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE1ha2VzIGl0IHBvc3NpYmxlIHRvIHBlcmZvcm0gZ2xvYmFsIGF1dGhlbnRpY2F0aW9uIGJ5IGludGVyY2VwdGluZyByZXF1ZXN0cyBiZWZvcmUgdGhleSBhcmUgZm9yd2FyZGVkIHRvIHRoZSBzZXJ2ZXJcbiAqIGFuZCByZXNwb25zZXMgYmVmb3JlIHRoZXkgYXJlIGZvcndhcmRlZCB0byB0aGUgYXBwbGljYXRpb24gY29kZS5cbiAqXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBIdHRwQXV0aEludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBhdXRoZW50aWNhdGlvblNlcnZpY2U6IElBdXRoZW50aWNhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgICAgICBwcml2YXRlIGh0dHBVdGlsczogSHR0cFV0aWxzLFxuICAgICAgICBASW5qZWN0KEkxOE5fUkVTT1VSQ0VfVVJJX1RPS0VOKSBwcml2YXRlIEkxOE5fUkVTT1VSQ0VfVVJJOiBzdHJpbmdcbiAgICApIHt9XG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIEBzbWFydHV0aWxzLmh0dHBBdXRoSW50ZXJjZXB0b3IjcmVxdWVzdFxuICAgICAqIEBtZXRob2RPZiBAc21hcnR1dGlscy5odHRwQXV0aEludGVyY2VwdG9yXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBJbnRlcmNlcHRvciBtZXRob2Qgd2hpY2ggZ2V0cyBjYWxsZWQgd2l0aCBhIGh0dHAgY29uZmlnIG9iamVjdCwgaW50ZXJjZXB0cyBhbnkgcmVxdWVzdCBtYWRlIHVzaW5nIGh0dHBDbGllbnQgc2VydmljZS5cbiAgICAgKiBBIGNhbGwgdG8gYW55IFJFU1QgcmVzb3VyY2Ugd2lsbCBiZSBpbnRlcmNlcHRlZCBieSB0aGlzIG1ldGhvZCwgd2hpY2ggdGhlbiBhZGRzIGFuIGF1dGhlbnRpY2F0aW9uIHRva2VuIHRvIHRoZSByZXF1ZXN0XG4gICAgICogYW5kIHRoZW4gZm9yd2FyZHMgaXQgdG8gdGhlIFJFU1QgcmVzb3VyY2UuXG4gICAgICpcbiAgICAgKi9cbiAgICBpbnRlcmNlcHQocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICFyZXF1ZXN0LnVybC5pbmNsdWRlcyh0aGlzLkkxOE5fUkVTT1VSQ0VfVVJJKSAmJlxuICAgICAgICAgICAgdGhpcy5odHRwVXRpbHMuaXNDUlVEUmVxdWVzdChyZXF1ZXN0KVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmh0dHBVdGlscy5pc0dFVChyZXF1ZXN0KSAmJiBHRVRfUkVRVUVTVFNfT05fSE9MRF9NQVBbcmVxdWVzdC51cmxdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKChvYmopID0+IHtcbiAgICAgICAgICAgICAgICAgICAgR0VUX1JFUVVFU1RTX09OX0hPTERfTUFQW3JlcXVlc3QudXJsXS50aGVuKChib2R5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoubmV4dChuZXcgSHR0cFJlc3BvbnNlPGFueT4oeyBzdGF0dXM6IDIwMCwgYm9keSB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZyb20odGhpcy5hdXRoZW50aWNhdGlvblNlcnZpY2UuZmlsdGVyRW50cnlQb2ludHMocmVxdWVzdC51cmwpKS5waXBlKFxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcDxzdHJpbmdbXSwgT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4+KChlbnRyeVBvaW50czogc3RyaW5nW10pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5UG9pbnRzICYmIGVudHJ5UG9pbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZyb208T2JzZXJ2YWJsZTxJQXV0aFRva2VuPj4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmplY3Rvci5nZXQoSVN0b3JhZ2VTZXJ2aWNlKS5nZXRBdXRoVG9rZW4oZW50cnlQb2ludHNbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgICApLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoTWFwPElBdXRoVG9rZW4sIE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+PihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGF1dGhUb2tlbjogSUF1dGhUb2tlbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF1dGhUb2tlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF1dGhSZXEgPSByZXF1ZXN0LmNsb25lKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogcmVxdWVzdC5oZWFkZXJzLnNldChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhUb2tlbi50b2tlbl90eXBlICsgJyAnICsgYXV0aFRva2VuLmFjY2Vzc190b2tlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKGF1dGhSZXEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=