/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * @ngdoc interface
 * @name @smartutils.interfaces:IStorageService
 * @description
 * Interface for StorageService
 */
var IStorageService = /** @class */ (function () {
    function IStorageService() {
    }
    /**
     * @ngdoc method
     * @name @smartutils.interfaces:IStorageService#isInitialized
     * @methodOf @smartutils.interfaces:IStorageService
     *
     * @description
     * This method is used to determine if the storage service has been initialized properly. It
     * makes sure that the smartedit-sessions cookie is available in the browser.
     *
     * @returns {Boolean} Indicates if the storage service was properly initialized.
     */
    IStorageService.prototype.isInitialized = function () {
        'proxyFunction';
        return Promise.resolve(false);
    };
    /**
     * @ngdoc method
     * @name @smartutils.interfaces:IStorageService#storeAuthToken
     * @methodOf @smartutils.interfaces:IStorageService
     *
     * @description
     * This method creates and stores a new key/value entry. It associates an authentication token with a
     * URI.
     *
     * @param {String} authURI The URI that identifies the resource(s) to be authenticated with the authToken. Will be used as a key.
     * @param {String} auth The token to be used to authenticate the user in the provided URI.
     */
    IStorageService.prototype.storeAuthToken = function (authURI, auth) {
        'proxyFunction';
        return Promise.resolve();
    };
    /**
     * @ngdoc method
     * @name @smartutils.interfaces:IStorageService#getAuthToken
     * @methodOf @smartutils.interfaces:IStorageService
     *
     * @description
     * This method is used to retrieve the authToken associated with the provided URI.
     *
     * @param {String} authURI The URI for which the associated authToken is to be retrieved.
     * @returns {String} The authToken used to authenticate the current user in the provided URI.
     */
    IStorageService.prototype.getAuthToken = function (authURI) {
        'proxyFunction';
        return Promise.resolve(undefined);
    };
    /**
     * @ngdoc method
     * @name @smartutils.interfaces:IStorageService#removeAuthToken
     * @methodOf @smartutils.interfaces:IStorageService
     *
     * @description
     * Removes the authToken associated with the provided URI.
     *
     * @param {String} authURI The URI for which its authToken is to be removed.
     */
    IStorageService.prototype.removeAuthToken = function (authURI) {
        'proxyFunction';
        return Promise.resolve();
    };
    /**
     * @ngdoc method
     * @name @smartutils.interfaces:IStorageService#removeAllAuthTokens
     * @methodOf @smartutils.interfaces:IStorageService
     *
     * @description
     * This method removes all authURI/authToken key/pairs from the storage service.
     */
    IStorageService.prototype.removeAllAuthTokens = function () {
        'proxyFunction';
        return Promise.resolve();
    };
    /**
     * @ngdoc method
     * @name @smartutils.interfaces:IStorageService#getValueFromLocalStorage
     * @methodOf @smartutils.interfaces:IStorageService
     *
     * @description
     * Retrieves the value stored in the cookie identified by the provided name.
     */
    IStorageService.prototype.getValueFromLocalStorage = function (cookieName, isEncoded) {
        'proxyFunction';
        return Promise.resolve();
    };
    IStorageService.prototype.setValueInLocalStorage = function (cookieName, value, encode) {
        'proxyFunction';
        return Promise.resolve();
    };
    /**
     * @ngdoc method
     * @name @smartutils.interfaces:IStorageService#setItem
     * @methodOf @smartutils.interfaces:IStorageService
     *
     * @description
     * This method is used to store the item.
     *
     * @param {String} key The key of the item.
     * @param {any} value The value of the item.
     */
    IStorageService.prototype.setItem = function (key, value) {
        'proxyFunction';
        return Promise.resolve();
    };
    /**
     * @ngdoc method
     * @name @smartutils.interfaces:IStorageService#getItem
     * @methodOf @smartutils.interfaces:IStorageService
     *
     * @description
     * Retrieves the value for a given key.
     *
     * @param {String} key The key of the item.
     *
     * @returns {Promise<any>} A promise that resolves to the item value.
     */
    IStorageService.prototype.getItem = function (key) {
        'proxyFunction';
        return Promise.resolve();
    };
    return IStorageService;
}());
export { IStorageService };
//# sourceMappingURL=data:application/json;base64,