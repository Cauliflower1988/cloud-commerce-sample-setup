/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Injectable } from '@angular/core';
import { IAlertService } from '../../../interfaces';
/**
 * @ngdoc service
 * @name permissionErrorInterceptorModule.service:permissionErrorInterceptor
 * @description
 * Used for HTTP error code 403. Displays the alert message for permission error.
 */
var PermissionErrorInterceptor = /** @class */ (function () {
    function PermissionErrorInterceptor(alertService) {
        this.alertService = alertService;
    }
    PermissionErrorInterceptor.prototype.predicate = function (request, response) {
        return response.status === 403;
    };
    PermissionErrorInterceptor.prototype.responseError = function (request, response) {
        var _this = this;
        if (response.error && response.error.errors) {
            response.error.errors
                .filter(function (error) {
                return error.type === 'TypePermissionError';
            })
                .forEach(function (error) {
                _this.alertService.showDanger({
                    message: error.message,
                    duration: 10000
                });
            });
        }
        return Promise.reject(response);
    };
    PermissionErrorInterceptor.ctorParameters = function () { return [
        { type: IAlertService }
    ]; };
    PermissionErrorInterceptor = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [IAlertService])
    ], PermissionErrorInterceptor);
    return PermissionErrorInterceptor;
}());
export { PermissionErrorInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbi1lcnJvci5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2ludGVyY2VwdG9ycy9lcnJvcnMvcGVybWlzc2lvbi1lcnJvci5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFcEQ7Ozs7O0dBS0c7QUFFSDtJQUNJLG9DQUFvQixZQUEyQjtRQUEzQixpQkFBWSxHQUFaLFlBQVksQ0FBZTtJQUFHLENBQUM7SUFDbkQsOENBQVMsR0FBVCxVQUFVLE9BQXVCLEVBQUUsUUFBMkI7UUFDMUQsT0FBTyxRQUFRLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQztJQUNuQyxDQUFDO0lBQ0Qsa0RBQWEsR0FBYixVQUFjLE9BQXVCLEVBQUUsUUFBMkI7UUFBbEUsaUJBY0M7UUFiRyxJQUFJLFFBQVEsQ0FBQyxLQUFLLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDekMsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNO2lCQUNoQixNQUFNLENBQUMsVUFBQyxLQUFtQjtnQkFDeEIsT0FBTyxLQUFLLENBQUMsSUFBSSxLQUFLLHFCQUFxQixDQUFDO1lBQ2hELENBQUMsQ0FBQztpQkFDRCxPQUFPLENBQUMsVUFBQyxLQUFtQjtnQkFDekIsS0FBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7b0JBQ3pCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztvQkFDdEIsUUFBUSxFQUFFLEtBQUs7aUJBQ2xCLENBQUMsQ0FBQztZQUNQLENBQUMsQ0FBQyxDQUFDO1NBQ1Y7UUFDRCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEMsQ0FBQzs7Z0JBbEJpQyxhQUFhOztJQUR0QywwQkFBMEI7UUFEdEMsVUFBVSxFQUFFO2lEQUV5QixhQUFhO09BRHRDLDBCQUEwQixDQW9CdEM7SUFBRCxpQ0FBQztDQUFBLEFBcEJELElBb0JDO1NBcEJZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFNBUCBTRSBvciBhbiBTQVAgYWZmaWxpYXRlIGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbW9kdWxlIHNtYXJ0dXRpbHNcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSUFsZXJ0U2VydmljZSB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgQmFja2VuZEVycm9yLCBJSHR0cEVycm9ySW50ZXJjZXB0b3IgfSBmcm9tICcuLi9pLWh0dHAtZXJyb3IuaW50ZXJjZXB0b3InO1xuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgcGVybWlzc2lvbkVycm9ySW50ZXJjZXB0b3JNb2R1bGUuc2VydmljZTpwZXJtaXNzaW9uRXJyb3JJbnRlcmNlcHRvclxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2VkIGZvciBIVFRQIGVycm9yIGNvZGUgNDAzLiBEaXNwbGF5cyB0aGUgYWxlcnQgbWVzc2FnZSBmb3IgcGVybWlzc2lvbiBlcnJvci5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBlcm1pc3Npb25FcnJvckludGVyY2VwdG9yPFQgPSBhbnk+IGltcGxlbWVudHMgSUh0dHBFcnJvckludGVyY2VwdG9yPFQ+IHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFsZXJ0U2VydmljZTogSUFsZXJ0U2VydmljZSkge31cbiAgICBwcmVkaWNhdGUocmVxdWVzdDogSHR0cFJlcXVlc3Q8VD4sIHJlc3BvbnNlOiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzID09PSA0MDM7XG4gICAgfVxuICAgIHJlc3BvbnNlRXJyb3IocmVxdWVzdDogSHR0cFJlcXVlc3Q8VD4sIHJlc3BvbnNlOiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IgJiYgcmVzcG9uc2UuZXJyb3IuZXJyb3JzKSB7XG4gICAgICAgICAgICByZXNwb25zZS5lcnJvci5lcnJvcnNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChlcnJvcjogQmFja2VuZEVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvci50eXBlID09PSAnVHlwZVBlcm1pc3Npb25FcnJvcic7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZm9yRWFjaCgoZXJyb3I6IEJhY2tlbmRFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5zaG93RGFuZ2VyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMTAwMDBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlc3BvbnNlKTtcbiAgICB9XG59XG4iXX0=