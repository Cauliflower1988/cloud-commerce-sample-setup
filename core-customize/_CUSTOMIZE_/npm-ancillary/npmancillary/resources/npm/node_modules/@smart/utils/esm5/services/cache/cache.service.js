/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as lodash from 'lodash';
import { Inject, Injectable } from '@angular/core';
import { FunctionsUtils, StringUtils } from '../../utils';
import { LogService } from '../log.service';
import { CacheEngine, DefaultCacheTiming, ICacheItem, ICacheTiming, IMetadata } from './engine';
import { EVENT_SERVICE } from '../../constants';
/**
 * @ngdoc service
 * @name @smartutils.services:CacheService
 * @description
 * Service to which the {@link @smartutils.object:@Cached @Cached} and {@link @smartutils.object:@InvalidateCache @InvalidateCache} annotations delegate to perform service method level caching.
 * It is not handled explicitly except for its evict method.
 */
var CacheService = /** @class */ (function () {
    function CacheService(logService, stringUtils, functionsUtils, eventService, cacheEngine) {
        this.logService = logService;
        this.stringUtils = stringUtils;
        this.functionsUtils = functionsUtils;
        this.eventService = eventService;
        this.cacheEngine = cacheEngine;
        this.predicatesRegistry = [];
        this.eventListeners = [];
        this.defaultCacheTiming = new DefaultCacheTiming(24 * 60 * 60 * 1000, 12 * 60 * 60 * 1000);
    }
    /**
     * @ngdoc method
     * @name @smartutils.services:CacheService#register
     * @methodOf @smartutils.services:CacheService
     *
     * @description
     * Register a new predicate with it's associated cacheTiming.
     * Each time the @Cache annotation is handled, the CacheService try to find a matching cacheTiming for the given cacheActions.
     *
     * @param {ICachePredicate} test This function takes the cacheActions {@link @smartutils.object:CacheAction CacheAction} argument, and must return a Boolean that is true if the given cacheActions match the predicate.
     * @param {ICacheTiming} cacheTiming This function is used to call setAge(item: ICacheItem<any>) on the cached item.
     *
     * @return {CacheService} CacheService The CacheService instance.
     *
     * @example
     * ```ts
     * export class CustomCacheTiming implements ICacheTiming {
     * 	private expirationAge: number;
     * 	private refreshAge: number;
     *  constructor(expirationAge: number, refreshAge: number) {
     * 		// The cached response is discarded if it is older than the expiration age.
     * 		this.expirationAge = expirationAge;
     * 		// maximum age for the cached response to be considered "fresh."
     * 		this.refreshAge = refreshAge;
     * 	}
     * 	setAge(item: ICacheItem<any>): void {
     * 		item.expirationAge = this.expirationAge;
     * 		item.refreshAge = this.refreshAge;
     * 	}
     * 	};
     * 	const customCacheTiming = new CustomCacheTiming(30 * 60000, 15 * 60000);
     * 	const customContentPredicate: ICachePredicate = (cacheActions: CacheAction[]) => {
     * 		return cacheActions.find((cacheAction) => cacheAction.name === 'CUSTOM_TAG') !== null;
     * 	};
     * this.register(customContentPredicate, customCacheTiming);
     * ```
     */
    CacheService.prototype.register = function (test, cacheTiming) {
        this.predicatesRegistry.unshift({
            test: test,
            cacheTiming: cacheTiming
        });
        return this;
    };
    /**
     * public method but only meant to be used by @Cache annotation
     */
    CacheService.prototype.handle = function (service, methodName, preboundMethod, invocationArguments, cacheActions, tags) {
        var constructorName = this.functionsUtils.getInstanceConstructorName(service);
        var cachedItemId = window.btoa(constructorName + methodName) +
            this.stringUtils.encode(invocationArguments);
        var _item = this.cacheEngine.getItemById(cachedItemId);
        var item;
        if (!_item) {
            var partialItem = _item || {
                id: cachedItemId,
                timestamp: new Date().getTime(),
                evictionTags: this.collectEventNamesFromTags(tags),
                cache: null
            };
            var cacheTiming = this.findCacheTimingByCacheActions(cacheActions);
            if (!cacheTiming) {
                throw new Error('CacheService::handle - No predicate match.');
            }
            item = cacheTiming.setAge(partialItem);
            this.cacheEngine.addItem(item, cacheTiming, preboundMethod.bind.apply(preboundMethod, tslib_1.__spread([undefined], Array.prototype.slice.call(invocationArguments))));
            this.listenForEvictionByTags(tags);
        }
        else {
            item = _item;
        }
        return this.cacheEngine.handle(item);
    };
    /**
     * @ngdoc method
     * @name @smartutils.services:CacheService#evict
     * @methodOf  @smartutils.services:CacheService
     * @description
     * Will evict the entire cache of all methods of all services referencing either directly or indirectly the given {@link @smartutils.object:EvictionTag EvictionTags}
     * @param {...EvictionTag[]} evictionTags the {@link @smartutils.object:EvictionTag EvictionTags}
     */
    CacheService.prototype.evict = function () {
        var _a;
        var _this = this;
        var evictionTags = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            evictionTags[_i] = arguments[_i];
        }
        var tags = this.collectEventNamesFromTags(evictionTags);
        (_a = this.cacheEngine).evict.apply(_a, tslib_1.__spread(tags));
        tags.forEach(function (tag) { return _this.eventService.publish(tag); });
    };
    CacheService.prototype.listenForEvictionByTags = function (tags) {
        var _this = this;
        this.collectEventNamesFromTags(tags)
            .filter(function (eventId) {
            return _this.eventListeners.indexOf(eventId) === -1;
        })
            .forEach(function (eventId) {
            _this.logService.debug("registering event listener " + eventId);
            _this.eventListeners.push(eventId);
            _this.eventService.subscribe(eventId, function (evt, data) {
                _this.logService.debug("cleaning cache on event " + eventId);
                _this.cacheEngine.evict(eventId);
                return Promise.resolve({});
            });
        });
    };
    CacheService.prototype.collectEventNamesFromTags = function (tags) {
        var _this = this;
        if (tags && tags.length) {
            return lodash.union.apply(lodash, tslib_1.__spread(tags.map(function (t) { return _this.collectEventNamesFromTag(t); })));
        }
        else {
            return [];
        }
    };
    CacheService.prototype.collectEventNamesFromTag = function (tag) {
        var _this = this;
        return lodash.union.apply(lodash, tslib_1.__spread([[tag.event]], (tag.relatedTags ? tag.relatedTags.map(function (t) { return _this.collectEventNamesFromTag(t); }) : [])));
    };
    CacheService.prototype.findCacheTimingByCacheActions = function (cacheActions) {
        var predicate = this.predicatesRegistry.find(function (cacheTimingPredicate) { return cacheTimingPredicate.test(cacheActions); });
        return predicate ? predicate.cacheTiming : this.defaultCacheTiming;
    };
    CacheService.ctorParameters = function () { return [
        { type: LogService },
        { type: StringUtils },
        { type: FunctionsUtils },
        { type: undefined, decorators: [{ type: Inject, args: [EVENT_SERVICE,] }] },
        { type: CacheEngine }
    ]; };
    CacheService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(3, Inject(EVENT_SERVICE)),
        tslib_1.__metadata("design:paramtypes", [LogService,
            StringUtils,
            FunctionsUtils, Object, CacheEngine])
    ], CacheService);
    return CacheService;
}());
export { CacheService };
//# sourceMappingURL=data:application/json;base64,