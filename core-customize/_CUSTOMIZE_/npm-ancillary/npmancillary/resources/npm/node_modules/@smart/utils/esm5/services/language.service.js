/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
import { TranslateService } from '@ngx-translate/core';
import { Inject, Injectable, Injector } from '@angular/core';
import { EVENT_SERVICE, LANGUAGE_SERVICE_CONSTANTS, SELECTED_LANGUAGE, SWITCH_LANGUAGE_EVENT } from '../constants';
import { IEventService, ILanguageServiceConstants, IStorageService } from '../interfaces';
import { BrowserService } from './browser';
import { rarelyChangingContent, Cached } from './cache';
import { LogService } from './log.service';
import { RestServiceFactory } from './rest';
import { PromiseUtils } from '../utils';
/**
 * @ngdoc object
 * @name resourceLocationsModule.object:LANGUAGE_RESOURCE_URI
 *
 * @description
 * Resource URI of the languages REST service.
 */
/**
 * @ngdoc service
 * @name @smartutils.services:LanguageService
 */
var LanguageService = /** @class */ (function () {
    function LanguageService(logService, translateService, promiseUtils, eventService, browserService, storageService, injector, languageServiceConstants) {
        this.logService = logService;
        this.translateService = translateService;
        this.promiseUtils = promiseUtils;
        this.eventService = eventService;
        this.browserService = browserService;
        this.storageService = storageService;
        this.injector = injector;
        this.languageServiceConstants = languageServiceConstants;
    }
    /**
     * @ngdoc method
     * @name @smartutils.services:LanguageService#getBrowserLanguageIsoCode
     * @methodOf @smartutils.services:LanguageService
     *
     * @deprecated since 1808
     *
     * @description
     * Uses the browser's current locale to determine the selected language ISO code.
     *
     * @returns {String} The language ISO code of the browser's currently selected locale.
     */
    LanguageService.prototype.getBrowserLanguageIsoCode = function () {
        return window.navigator.language.split('-')[0];
    };
    /**
     * @ngdoc method
     * @name @smartutils.services:LanguageService#getBrowserLocale
     * @methodOf @smartutils.services:LanguageService
     *
     * @deprecated since 1808 - use browserService instead.
     *
     * @description
     * determines the browser locale in the format en_US
     *
     * @returns {string} the browser locale
     */
    LanguageService.prototype.getBrowserLocale = function () {
        return this.browserService.getBrowserLocale();
    };
    /**
     * @ngdoc method
     * @name @smartutils.services:LanguageService#getResolveLocale
     * @methodOf @smartutils.services:LanguageService
     *
     * @description
     * Resolve the user preference tooling locale. It determines in the
     * following order:
     *
     * 1. Check if the user has previously selected the language
     * 2. Check if the user browser locale is supported in the system
     *
     * @returns {Promise<string>} the locale
     */
    LanguageService.prototype.getResolveLocale = function () {
        return this._getDefaultLanguage();
    };
    /**
     * @ngdoc method
     * @name @smartutils.services:LanguageService#getResolveLocaleIsoCode
     * @methodOf @smartutils.services:LanguageService
     *
     * @description
     * Resolve the user preference tooling locale ISO code. i.e.: If the selected tooling language is 'en_US',
     * the resolved value will be 'en'.
     *
     * @returns {Promise<string>} A promise that resolves to the isocode of the tooling language.
     */
    LanguageService.prototype.getResolveLocaleIsoCode = function () {
        var _this = this;
        return this.getResolveLocale().then(function (resolveLocale) {
            return _this.convertBCP47TagToJavaTag(resolveLocale).split('_')[0];
        });
    };
    /**
     * @ngdoc method
     * @name @smartutils.services:LanguageService#getToolingLanguages
     * @methodOf @smartutils.services:LanguageService
     *
     * @description
     * Retrieves a list of language descriptors using REST calls to the i18n API.
     *
     * @returns {Promise<IToolingLanguage[]>} A promise that resolves to an array of IToolingLanguage.
     */
    LanguageService.prototype.getToolingLanguages = function () {
        var _this = this;
        return this.i18nLanguageRestService
            .get({})
            .then(function (response) {
            return response.languages;
        })
            .catch(function (error) {
            _this.logService.error('LanguageService.getToolingLanguages() - Error loading tooling languages');
            return Promise.reject(error);
        });
    };
    /**
     * @ngdoc method
     * @name @smartutils.services:LanguageService#setSelectedToolingLanguage
     * @methodOf @smartutils.services:LanguageService
     *
     * @description
     * Set the user preference language in the storage service
     *
     * @param {IToolingLanguage} language the language object to be saved.
     */
    LanguageService.prototype.setSelectedToolingLanguage = function (language) {
        this.storageService.setValueInLocalStorage(SELECTED_LANGUAGE, language, false);
        this.translateService.use(language.isoCode);
        this.setApplicationTitle();
        this.eventService.publish(SWITCH_LANGUAGE_EVENT, {
            isoCode: language.isoCode
        });
    };
    /**
     * @ngdoc method
     * @name @smartutils.services:LanguageService#registerSwitchLanguage
     * @methodOf @smartutils.services:LanguageService
     *
     * @description
     * Register a callback function to the gateway in order to switch the tooling language
     */
    LanguageService.prototype.registerSwitchLanguage = function () {
        var _this = this;
        this.eventService.subscribe(SWITCH_LANGUAGE_EVENT, function (eventId, language) {
            if (_this.translateService.currentLang !== language.isoCode) {
                _this.translateService.use(language.isoCode);
            }
        });
    };
    /**
     * @ngdoc method
     * @name @smartutils.services:LanguageService#convertBCP47TagToJavaTag
     * @methodOf @smartutils.services:LanguageService
     *
     * @description
     * Method converts the BCP47 language tag representing the locale to the default java representation.
     * For example, method converts "en-US" to "en_US".
     *
     * @param {string} languageTag the language tag to be converted.
     *
     * @returns {string} the languageTag in java representation
     */
    LanguageService.prototype.convertBCP47TagToJavaTag = function (languageTag) {
        return !!languageTag ? languageTag.replace(/-/g, '_') : languageTag;
    };
    /**
     * @ngdoc method
     * @name @smartutils.services:LanguageService#convertJavaTagToBCP47Tag
     * @methodOf @smartutils.services:LanguageService
     *
     * @description
     * Method converts the default java language tag representing the locale to the BCP47 representation.
     * For example, method converts "en_US" to "en-US".
     *
     * @param {string} languageTag the language tag to be converted.
     *
     * @returns {string} the languageTag in BCP47 representation
     */
    LanguageService.prototype.convertJavaTagToBCP47Tag = function (languageTag) {
        return !!languageTag ? languageTag.replace(/_/g, '-') : languageTag;
    };
    LanguageService.prototype._getDefaultLanguage = function () {
        var _this = this;
        return this.storageService.getValueFromLocalStorage(SELECTED_LANGUAGE, false).then(function (lang) {
            return lang ? lang.isoCode : _this.browserService.getBrowserLocale();
        }, function () {
            return _this.browserService.getBrowserLocale();
        });
    };
    LanguageService.prototype.setApplicationTitle = function () {
        this.translateService.get('se.application.name').subscribe(function (pageTitle) {
            document.title = pageTitle;
        });
    };
    Object.defineProperty(LanguageService.prototype, "i18nLanguageRestService", {
        get: function () {
            return this.injector
                .get(RestServiceFactory)
                .get(this.languageServiceConstants.I18N_LANGUAGES_RESOURCE_URI);
        },
        enumerable: true,
        configurable: true
    });
    LanguageService.ctorParameters = function () { return [
        { type: LogService },
        { type: TranslateService },
        { type: PromiseUtils },
        { type: undefined, decorators: [{ type: Inject, args: [EVENT_SERVICE,] }] },
        { type: BrowserService },
        { type: IStorageService },
        { type: Injector },
        { type: undefined, decorators: [{ type: Inject, args: [LANGUAGE_SERVICE_CONSTANTS,] }] }
    ]; };
    tslib_1.__decorate([
        Cached({ actions: [rarelyChangingContent] }),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", Promise)
    ], LanguageService.prototype, "getToolingLanguages", null);
    LanguageService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(3, Inject(EVENT_SERVICE)),
        tslib_1.__param(7, Inject(LANGUAGE_SERVICE_CONSTANTS)),
        tslib_1.__metadata("design:paramtypes", [LogService,
            TranslateService,
            PromiseUtils, Object, BrowserService,
            IStorageService,
            Injector, Object])
    ], LanguageService);
    return LanguageService;
}());
export { LanguageService };
//# sourceMappingURL=data:application/json;base64,