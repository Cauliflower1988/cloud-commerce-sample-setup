/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import { DEFAULT_LANGUAGE_ISO, SWITCH_LANGUAGE_EVENT } from '../../constants';
import { LanguageDropdownHelper, LanguageSortStrategy } from './language-dropdown-helper';
import { LanguageDropdownAdapter } from './language-dropdown-adapter';
var LanguageDropdown = /** @class */ (function () {
    function LanguageDropdown(languageService, eventService) {
        this.languageService = languageService;
        this.eventService = eventService;
        this.languageSortStrategy = LanguageSortStrategy.Default;
        this.selectedLanguage = null;
        this.items = [];
        this.initialLanguage = null;
        this.languages = [];
        this.unRegisterEventService = null;
    }
    LanguageDropdown.prototype.ngOnInit = function () {
        var _this = this;
        Promise.all([
            this.languageService.getResolveLocale(),
            this.languageService.getToolingLanguages()
        ]).then(function (_a) {
            var _b = tslib_1.__read(_a, 2), isoCode = _b[0], languages = _b[1];
            _this.items = languages.map(LanguageDropdownAdapter.transform);
            _this.languages = languages;
            _this.setSelectedLanguage(isoCode);
            _this.setInitialLanguage(isoCode);
        });
        this.unRegisterEventService = this.eventService.subscribe(SWITCH_LANGUAGE_EVENT, function () {
            return _this.handleLanguageChange();
        });
    };
    LanguageDropdown.prototype.ngOnDestroy = function () {
        this.unRegisterEventService();
    };
    /**
     * Triggered when an user selects a language.
     * @param {IToolingLanguage} language
     */
    LanguageDropdown.prototype.onSelectedLanguage = function (item) {
        this.languageService.setSelectedToolingLanguage(item.value);
    };
    /**
     * Set initial language to be displayed in dropdown
     *
     * @param {string} isoCode
     */
    LanguageDropdown.prototype.setInitialLanguage = function (isoCode) {
        this.initialLanguage =
            this.items.find(LanguageDropdownHelper.findSelectLanguageWithIsoCodePredicate(isoCode)) ||
                this.items.find(LanguageDropdownHelper.findSelectLanguageWithIsoCodePredicate(DEFAULT_LANGUAGE_ISO));
    };
    /**
     * Triggered onInit and when language service sets a new language.
     *
     * @param {IToolingLanguage[]} languages
     * @param {string} isoCode
     */
    LanguageDropdown.prototype.setSelectedLanguage = function (isoCode) {
        var _this = this;
        this.selectedLanguage = LanguageDropdownHelper.findLanguageWithIsoCode(isoCode, this.languages);
        if (this.selectedLanguage) {
            var sortedLanguages = LanguageDropdownHelper.order(this.selectedLanguage, this.languages, { strategy: this.languageSortStrategy });
            this.items = sortedLanguages.map(LanguageDropdownAdapter.transform);
            return;
        }
        // In case the iso code is too specific, it will use the more generic iso code to set the language.
        this.languageService.getResolveLocaleIsoCode().then(function (code) {
            _this.selectedLanguage = LanguageDropdownHelper.findLanguageWithIsoCode(code, _this.languages);
            var sortedLanguages = LanguageDropdownHelper.order(_this.selectedLanguage, _this.languages, { strategy: _this.languageSortStrategy });
            _this.items = sortedLanguages.map(LanguageDropdownAdapter.transform);
        });
    };
    /**
     * Callback for setting the selected language.
     */
    LanguageDropdown.prototype.handleLanguageChange = function () {
        var _this = this;
        this.languageService.getResolveLocale().then(function (isoCode) {
            _this.setSelectedLanguage(isoCode);
        });
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LanguageDropdown.prototype, "languageSortStrategy", void 0);
    return LanguageDropdown;
}());
export { LanguageDropdown };
//# sourceMappingURL=data:application/json;base64,