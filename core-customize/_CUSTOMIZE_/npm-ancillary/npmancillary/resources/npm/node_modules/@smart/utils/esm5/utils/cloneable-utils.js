/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as lodash from 'lodash';
/**
 * @ngdoc service
 * @name @smartutils.services:CloneableUtils
 *
 * @description
 * utility service around Cloneable objects
 */
var CloneableUtils = /** @class */ (function () {
    function CloneableUtils() {
    }
    /**
     * @ngdoc method
     * @name @smartutils.services:CloneableUtils#makeCloneable
     * @methodOf @smartutils.services:CloneableUtils
     * @description
     * returns a "cloneable" version of an object.
     * Something is cloneable when it can be sent through W3C postMessage.
     * To this purpose, functions must be removed from the cloneable candidate.
     * @param {Object} json the object to be made cloneable
     * @returns {Cloneable} the cloneable copy of the object
     */
    CloneableUtils.prototype.makeCloneable = function (_json) {
        var _this = this;
        var json = lodash.cloneDeepWith(_json, function (value) {
            if (value !== undefined && value !== null && !_this.isPrimitive(json)) {
                // is a promise
                if (value.then) {
                    return null;
                }
                else if (typeof value === 'function') {
                    return null;
                }
                else if (lodash.isElement(value)) {
                    return null;
                    // is yjQuery
                }
                else if (typeof value !== 'string' &&
                    value.hasOwnProperty('length') &&
                    !value.forEach) {
                    return null;
                }
                else {
                    return value;
                }
            }
            else {
                return value;
            }
        });
        if (json === undefined || json === null || this.isPrimitive(json)) {
            return json;
        }
        else if (json.hasOwnProperty('length') || json.forEach) {
            // Array, already taken care of by yjQuery
            return json.map(function (arrayElement) { return _this.makeCloneable(arrayElement); });
        }
        else {
            // JSON
            return Object.keys(json).reduce(function (clone, directKey) {
                if (directKey.indexOf('$') !== 0) {
                    clone[directKey] = _this.makeCloneable(json[directKey]);
                }
                return clone;
            }, {});
        }
    };
    CloneableUtils.prototype.isPrimitive = function (value) {
        return typeof value === 'number' || typeof value === 'string' || typeof value === 'boolean';
    };
    return CloneableUtils;
}());
export { CloneableUtils };
export var cloneableUtils = new CloneableUtils();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvbmVhYmxlLXV0aWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNtYXJ0L3V0aWxzLyIsInNvdXJjZXMiOlsidXRpbHMvY2xvbmVhYmxlLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUNILE9BQU8sS0FBSyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBR2pDOzs7Ozs7R0FNRztBQUNIO0lBQUE7SUEwREEsQ0FBQztJQXpERzs7Ozs7Ozs7OztPQVVHO0lBQ0gsc0NBQWEsR0FBYixVQUFjLEtBQVU7UUFBeEIsaUJBeUNDO1FBeENHLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLFVBQUMsS0FBVTtZQUNoRCxJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ2xFLGVBQWU7Z0JBQ2YsSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFO29CQUNaLE9BQU8sSUFBSSxDQUFDO2lCQUNmO3FCQUFNLElBQUksT0FBTyxLQUFLLEtBQUssVUFBVSxFQUFFO29CQUNwQyxPQUFPLElBQUksQ0FBQztpQkFDZjtxQkFBTSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ2hDLE9BQU8sSUFBSSxDQUFDO29CQUNaLGFBQWE7aUJBQ2hCO3FCQUFNLElBQ0gsT0FBTyxLQUFLLEtBQUssUUFBUTtvQkFDekIsS0FBSyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUM7b0JBQzlCLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFDaEI7b0JBQ0UsT0FBTyxJQUFJLENBQUM7aUJBQ2Y7cUJBQU07b0JBQ0gsT0FBTyxLQUFLLENBQUM7aUJBQ2hCO2FBQ0o7aUJBQU07Z0JBQ0gsT0FBTyxLQUFLLENBQUM7YUFDaEI7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksSUFBSSxLQUFLLFNBQVMsSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0QsT0FBTyxJQUFJLENBQUM7U0FDZjthQUFNLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ3RELDBDQUEwQztZQUMxQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxZQUFpQixJQUFLLE9BQUEsS0FBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsRUFBaEMsQ0FBZ0MsQ0FBYyxDQUFDO1NBQ3pGO2FBQU07WUFDSCxPQUFPO1lBQ1AsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FDM0IsVUFBQyxLQUFLLEVBQUUsU0FBUztnQkFDYixJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUM5QixLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsS0FBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztpQkFDMUQ7Z0JBQ0QsT0FBTyxLQUFLLENBQUM7WUFDakIsQ0FBQyxFQUNELEVBQWEsQ0FDaEIsQ0FBQztTQUNMO0lBQ0wsQ0FBQztJQUVPLG9DQUFXLEdBQW5CLFVBQW9CLEtBQVU7UUFDMUIsT0FBTyxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxLQUFLLFNBQVMsQ0FBQztJQUNoRyxDQUFDO0lBQ0wscUJBQUM7QUFBRCxDQUFDLEFBMURELElBMERDOztBQUNELE1BQU0sQ0FBQyxJQUFNLGNBQWMsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG5pbXBvcnQgKiBhcyBsb2Rhc2ggZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IENsb25lYWJsZSwgUGF5bG9hZCB9IGZyb20gJy4uL2R0b3MnO1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSBAc21hcnR1dGlscy5zZXJ2aWNlczpDbG9uZWFibGVVdGlsc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogdXRpbGl0eSBzZXJ2aWNlIGFyb3VuZCBDbG9uZWFibGUgb2JqZWN0c1xuICovXG5leHBvcnQgY2xhc3MgQ2xvbmVhYmxlVXRpbHMge1xuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBAc21hcnR1dGlscy5zZXJ2aWNlczpDbG9uZWFibGVVdGlscyNtYWtlQ2xvbmVhYmxlXG4gICAgICogQG1ldGhvZE9mIEBzbWFydHV0aWxzLnNlcnZpY2VzOkNsb25lYWJsZVV0aWxzXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogcmV0dXJucyBhIFwiY2xvbmVhYmxlXCIgdmVyc2lvbiBvZiBhbiBvYmplY3QuXG4gICAgICogU29tZXRoaW5nIGlzIGNsb25lYWJsZSB3aGVuIGl0IGNhbiBiZSBzZW50IHRocm91Z2ggVzNDIHBvc3RNZXNzYWdlLlxuICAgICAqIFRvIHRoaXMgcHVycG9zZSwgZnVuY3Rpb25zIG11c3QgYmUgcmVtb3ZlZCBmcm9tIHRoZSBjbG9uZWFibGUgY2FuZGlkYXRlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBqc29uIHRoZSBvYmplY3QgdG8gYmUgbWFkZSBjbG9uZWFibGVcbiAgICAgKiBAcmV0dXJucyB7Q2xvbmVhYmxlfSB0aGUgY2xvbmVhYmxlIGNvcHkgb2YgdGhlIG9iamVjdFxuICAgICAqL1xuICAgIG1ha2VDbG9uZWFibGUoX2pzb246IGFueSk6IENsb25lYWJsZSB7XG4gICAgICAgIGNvbnN0IGpzb24gPSBsb2Rhc2guY2xvbmVEZWVwV2l0aChfanNvbiwgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsICYmICF0aGlzLmlzUHJpbWl0aXZlKGpzb24pKSB7XG4gICAgICAgICAgICAgICAgLy8gaXMgYSBwcm9taXNlXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLnRoZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsb2Rhc2guaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgLy8gaXMgeWpRdWVyeVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuaGFzT3duUHJvcGVydHkoJ2xlbmd0aCcpICYmXG4gICAgICAgICAgICAgICAgICAgICF2YWx1ZS5mb3JFYWNoXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChqc29uID09PSB1bmRlZmluZWQgfHwganNvbiA9PT0gbnVsbCB8fCB0aGlzLmlzUHJpbWl0aXZlKGpzb24pKSB7XG4gICAgICAgICAgICByZXR1cm4ganNvbjtcbiAgICAgICAgfSBlbHNlIGlmIChqc29uLmhhc093blByb3BlcnR5KCdsZW5ndGgnKSB8fCBqc29uLmZvckVhY2gpIHtcbiAgICAgICAgICAgIC8vIEFycmF5LCBhbHJlYWR5IHRha2VuIGNhcmUgb2YgYnkgeWpRdWVyeVxuICAgICAgICAgICAgcmV0dXJuIGpzb24ubWFwKChhcnJheUVsZW1lbnQ6IGFueSkgPT4gdGhpcy5tYWtlQ2xvbmVhYmxlKGFycmF5RWxlbWVudCkpIGFzIENsb25lYWJsZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEpTT05cbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhqc29uKS5yZWR1Y2UoXG4gICAgICAgICAgICAgICAgKGNsb25lLCBkaXJlY3RLZXkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpcmVjdEtleS5pbmRleE9mKCckJykgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lW2RpcmVjdEtleV0gPSB0aGlzLm1ha2VDbG9uZWFibGUoanNvbltkaXJlY3RLZXldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7fSBhcyBQYXlsb2FkXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc1ByaW1pdGl2ZSh2YWx1ZTogYW55KSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbic7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IGNsb25lYWJsZVV0aWxzID0gbmV3IENsb25lYWJsZVV0aWxzKCk7XG4iXX0=