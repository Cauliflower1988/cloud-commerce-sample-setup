/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Subject } from 'rxjs';
import { toPairs } from 'lodash';
/* tslint:disable:max-classes-per-file */
/**
 * Event payload when a property changes.
 */
export class InputPropertyChange {
    constructor(key, value) {
        this.key = key;
        this.value = value;
    }
}
/**
 * Used for storing component input values for the dynamic component. The values
 * are set onto the dynamic component's properties that are decorated by the @DynamicInput()
 * decorator. Values can be retrieved or set programmatically by the form element's 'input'
 * property.
 */
export class InputProperties {
    constructor(object = {}) {
        this.changes = new Subject();
        this._map = new Map(toPairs(object));
    }
    /**
     * Get a property.
     *
     * @param {keyof T} key
     * @returns {T[keyof T] | undefined} value
     */
    get(key) {
        return this._map.get(key);
    }
    /**
     * Setting a property.
     *
     * @param {keyof T} key
     * @param {T[keyof T]} value
     * @param {boolean} emit If emit is set to false. It will not emit changes to the
     * the component for those observing for property changes.
     */
    set(key, value, emit = true) {
        this._map.set(key, value);
        if (emit) {
            this.changes.next(new InputPropertyChange(key, value));
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtcHJvcGVydGllcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvZm9ybS1idWlsZGVyL21vZGVscy9pbnB1dC1wcm9wZXJ0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUNILE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUVqQyx5Q0FBeUM7QUFFekM7O0dBRUc7QUFDSCxNQUFNLE9BQU8sbUJBQW1CO0lBQzVCLFlBQW1CLEdBQVcsRUFBUyxLQUFVO1FBQTlCLFFBQUcsR0FBSCxHQUFHLENBQVE7UUFBUyxVQUFLLEdBQUwsS0FBSyxDQUFLO0lBQUcsQ0FBQztDQUN4RDtBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxPQUFPLGVBQWU7SUFPeEIsWUFBWSxTQUFpQyxFQUFFO1FBTnRDLFlBQU8sR0FBb0MsSUFBSSxPQUFPLEVBQXVCLENBQUM7UUFPbkYsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxHQUFHLENBQUksR0FBWTtRQUNmLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBYSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxHQUFHLENBQUksR0FBWSxFQUFFLEtBQWlCLEVBQUUsSUFBSSxHQUFHLElBQUk7UUFDL0MsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLElBQUksSUFBSSxFQUFFO1lBQ0wsSUFBSSxDQUFDLE9BQXdDLENBQUMsSUFBSSxDQUMvQyxJQUFJLG1CQUFtQixDQUFDLEdBQWEsRUFBRSxLQUFLLENBQUMsQ0FDaEQsQ0FBQztTQUNMO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0b1BhaXJzIH0gZnJvbSAnbG9kYXNoJztcblxuLyogdHNsaW50OmRpc2FibGU6bWF4LWNsYXNzZXMtcGVyLWZpbGUgKi9cblxuLyoqXG4gKiBFdmVudCBwYXlsb2FkIHdoZW4gYSBwcm9wZXJ0eSBjaGFuZ2VzLlxuICovXG5leHBvcnQgY2xhc3MgSW5wdXRQcm9wZXJ0eUNoYW5nZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIGtleTogc3RyaW5nLCBwdWJsaWMgdmFsdWU6IGFueSkge31cbn1cblxuLyoqXG4gKiBVc2VkIGZvciBzdG9yaW5nIGNvbXBvbmVudCBpbnB1dCB2YWx1ZXMgZm9yIHRoZSBkeW5hbWljIGNvbXBvbmVudC4gVGhlIHZhbHVlc1xuICogYXJlIHNldCBvbnRvIHRoZSBkeW5hbWljIGNvbXBvbmVudCdzIHByb3BlcnRpZXMgdGhhdCBhcmUgZGVjb3JhdGVkIGJ5IHRoZSBARHluYW1pY0lucHV0KClcbiAqIGRlY29yYXRvci4gVmFsdWVzIGNhbiBiZSByZXRyaWV2ZWQgb3Igc2V0IHByb2dyYW1tYXRpY2FsbHkgYnkgdGhlIGZvcm0gZWxlbWVudCdzICdpbnB1dCdcbiAqIHByb3BlcnR5LlxuICovXG5leHBvcnQgY2xhc3MgSW5wdXRQcm9wZXJ0aWVzIHtcbiAgICByZWFkb25seSBjaGFuZ2VzOiBPYnNlcnZhYmxlPElucHV0UHJvcGVydHlDaGFuZ2U+ID0gbmV3IFN1YmplY3Q8SW5wdXRQcm9wZXJ0eUNoYW5nZT4oKTtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IF9tYXA6IE1hcDxzdHJpbmcsIGFueT47XG5cbiAgICBjb25zdHJ1Y3RvcihvYmplY3Q6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPSB7fSkge1xuICAgICAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKHRvUGFpcnMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2tleW9mIFR9IGtleVxuICAgICAqIEByZXR1cm5zIHtUW2tleW9mIFRdIHwgdW5kZWZpbmVkfSB2YWx1ZVxuICAgICAqL1xuICAgIGdldDxUPihrZXk6IGtleW9mIFQpOiBUW2tleW9mIFRdIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcC5nZXQoa2V5IGFzIHN0cmluZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0dGluZyBhIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtrZXlvZiBUfSBrZXlcbiAgICAgKiBAcGFyYW0ge1Rba2V5b2YgVF19IHZhbHVlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBlbWl0IElmIGVtaXQgaXMgc2V0IHRvIGZhbHNlLiBJdCB3aWxsIG5vdCBlbWl0IGNoYW5nZXMgdG8gdGhlXG4gICAgICogdGhlIGNvbXBvbmVudCBmb3IgdGhvc2Ugb2JzZXJ2aW5nIGZvciBwcm9wZXJ0eSBjaGFuZ2VzLlxuICAgICAqL1xuICAgIHNldDxUPihrZXk6IGtleW9mIFQsIHZhbHVlOiBUW2tleW9mIFRdLCBlbWl0ID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLl9tYXAuc2V0KGtleSBhcyBzdHJpbmcsIHZhbHVlKTtcbiAgICAgICAgaWYgKGVtaXQpIHtcbiAgICAgICAgICAgICh0aGlzLmNoYW5nZXMgYXMgU3ViamVjdDxJbnB1dFByb3BlcnR5Q2hhbmdlPikubmV4dChcbiAgICAgICAgICAgICAgICBuZXcgSW5wdXRQcm9wZXJ0eUNoYW5nZShrZXkgYXMgc3RyaW5nLCB2YWx1ZSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=