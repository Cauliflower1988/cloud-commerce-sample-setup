/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as lodash from 'lodash';
import { Inject, Injectable } from '@angular/core';
import { FunctionsUtils, StringUtils } from '../../utils';
import { LogService } from '../log.service';
import { CacheEngine, DefaultCacheTiming, ICacheItem, ICacheTiming, IMetadata } from './engine';
import { EVENT_SERVICE } from '../../constants';
/**
 * @ngdoc service
 * @name @smartutils.services:CacheService
 * @description
 * Service to which the {@link @smartutils.object:@Cached @Cached} and {@link @smartutils.object:@InvalidateCache @InvalidateCache} annotations delegate to perform service method level caching.
 * It is not handled explicitly except for its evict method.
 */
let CacheService = class CacheService {
    constructor(logService, stringUtils, functionsUtils, eventService, cacheEngine) {
        this.logService = logService;
        this.stringUtils = stringUtils;
        this.functionsUtils = functionsUtils;
        this.eventService = eventService;
        this.cacheEngine = cacheEngine;
        this.predicatesRegistry = [];
        this.eventListeners = [];
        this.defaultCacheTiming = new DefaultCacheTiming(24 * 60 * 60 * 1000, 12 * 60 * 60 * 1000);
    }
    /**
     * @ngdoc method
     * @name @smartutils.services:CacheService#register
     * @methodOf @smartutils.services:CacheService
     *
     * @description
     * Register a new predicate with it's associated cacheTiming.
     * Each time the @Cache annotation is handled, the CacheService try to find a matching cacheTiming for the given cacheActions.
     *
     * @param {ICachePredicate} test This function takes the cacheActions {@link @smartutils.object:CacheAction CacheAction} argument, and must return a Boolean that is true if the given cacheActions match the predicate.
     * @param {ICacheTiming} cacheTiming This function is used to call setAge(item: ICacheItem<any>) on the cached item.
     *
     * @return {CacheService} CacheService The CacheService instance.
     *
     * @example
     * ```ts
     * export class CustomCacheTiming implements ICacheTiming {
     * 	private expirationAge: number;
     * 	private refreshAge: number;
     *  constructor(expirationAge: number, refreshAge: number) {
     * 		// The cached response is discarded if it is older than the expiration age.
     * 		this.expirationAge = expirationAge;
     * 		// maximum age for the cached response to be considered "fresh."
     * 		this.refreshAge = refreshAge;
     * 	}
     * 	setAge(item: ICacheItem<any>): void {
     * 		item.expirationAge = this.expirationAge;
     * 		item.refreshAge = this.refreshAge;
     * 	}
     * 	};
     * 	const customCacheTiming = new CustomCacheTiming(30 * 60000, 15 * 60000);
     * 	const customContentPredicate: ICachePredicate = (cacheActions: CacheAction[]) => {
     * 		return cacheActions.find((cacheAction) => cacheAction.name === 'CUSTOM_TAG') !== null;
     * 	};
     * this.register(customContentPredicate, customCacheTiming);
     * ```
     */
    register(test, cacheTiming) {
        this.predicatesRegistry.unshift({
            test,
            cacheTiming
        });
        return this;
    }
    /**
     * public method but only meant to be used by @Cache annotation
     */
    handle(service, methodName, preboundMethod, invocationArguments, cacheActions, tags) {
        const constructorName = this.functionsUtils.getInstanceConstructorName(service);
        const cachedItemId = window.btoa(constructorName + methodName) +
            this.stringUtils.encode(invocationArguments);
        const _item = this.cacheEngine.getItemById(cachedItemId);
        let item;
        if (!_item) {
            const partialItem = _item || {
                id: cachedItemId,
                timestamp: new Date().getTime(),
                evictionTags: this.collectEventNamesFromTags(tags),
                cache: null
            };
            const cacheTiming = this.findCacheTimingByCacheActions(cacheActions);
            if (!cacheTiming) {
                throw new Error('CacheService::handle - No predicate match.');
            }
            item = cacheTiming.setAge(partialItem);
            this.cacheEngine.addItem(item, cacheTiming, preboundMethod.bind(undefined, ...Array.prototype.slice.call(invocationArguments)));
            this.listenForEvictionByTags(tags);
        }
        else {
            item = _item;
        }
        return this.cacheEngine.handle(item);
    }
    /**
     * @ngdoc method
     * @name @smartutils.services:CacheService#evict
     * @methodOf  @smartutils.services:CacheService
     * @description
     * Will evict the entire cache of all methods of all services referencing either directly or indirectly the given {@link @smartutils.object:EvictionTag EvictionTags}
     * @param {...EvictionTag[]} evictionTags the {@link @smartutils.object:EvictionTag EvictionTags}
     */
    evict(...evictionTags) {
        const tags = this.collectEventNamesFromTags(evictionTags);
        this.cacheEngine.evict(...tags);
        tags.forEach((tag) => this.eventService.publish(tag));
    }
    listenForEvictionByTags(tags) {
        this.collectEventNamesFromTags(tags)
            .filter((eventId) => {
            return this.eventListeners.indexOf(eventId) === -1;
        })
            .forEach((eventId) => {
            this.logService.debug(`registering event listener ${eventId}`);
            this.eventListeners.push(eventId);
            this.eventService.subscribe(eventId, (evt, data) => {
                this.logService.debug(`cleaning cache on event ${eventId}`);
                this.cacheEngine.evict(eventId);
                return Promise.resolve({});
            });
        });
    }
    collectEventNamesFromTags(tags) {
        if (tags && tags.length) {
            return lodash.union(...tags.map((t) => this.collectEventNamesFromTag(t)));
        }
        else {
            return [];
        }
    }
    collectEventNamesFromTag(tag) {
        return lodash.union([tag.event], ...(tag.relatedTags ? tag.relatedTags.map((t) => this.collectEventNamesFromTag(t)) : []));
    }
    findCacheTimingByCacheActions(cacheActions) {
        const predicate = this.predicatesRegistry.find((cacheTimingPredicate) => cacheTimingPredicate.test(cacheActions));
        return predicate ? predicate.cacheTiming : this.defaultCacheTiming;
    }
};
CacheService.ctorParameters = () => [
    { type: LogService },
    { type: StringUtils },
    { type: FunctionsUtils },
    { type: undefined, decorators: [{ type: Inject, args: [EVENT_SERVICE,] }] },
    { type: CacheEngine }
];
CacheService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(3, Inject(EVENT_SERVICE)),
    tslib_1.__metadata("design:paramtypes", [LogService,
        StringUtils,
        FunctionsUtils, Object, CacheEngine])
], CacheService);
export { CacheService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2NhY2hlL2NhY2hlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRztBQUNILE9BQU8sS0FBSyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5ELE9BQU8sRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzFELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUc1QyxPQUFPLEVBQUUsV0FBVyxFQUFFLGtCQUFrQixFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRWhHLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQVVoRDs7Ozs7O0dBTUc7QUFFSCxJQUFhLFlBQVksR0FBekIsTUFBYSxZQUFZO0lBTXJCLFlBQ1ksVUFBc0IsRUFDdEIsV0FBd0IsRUFDeEIsY0FBOEIsRUFDUCxZQUEyQixFQUNsRCxXQUF3QjtRQUp4QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUNQLGlCQUFZLEdBQVosWUFBWSxDQUFlO1FBQ2xELGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBVjVCLHVCQUFrQixHQUF5QixFQUFFLENBQUM7UUFDOUMsbUJBQWMsR0FBYSxFQUFFLENBQUM7UUFFOUIsdUJBQWtCLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFRM0YsQ0FBQztJQUVKOzs7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LENBQzFFLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FDcEUsQ0FBQztRQUNGLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUM7SUFDdkUsQ0FBQztDQUNKLENBQUE7O1lBMUoyQixVQUFVO1lBQ1QsV0FBVztZQUNSLGNBQWM7NENBQ3JDLE1BQU0sU0FBQyxhQUFhO1lBQ0EsV0FBVzs7QUFYM0IsWUFBWTtJQUR4QixVQUFVLEVBQUU7SUFXSixtQkFBQSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUE7NkNBSEYsVUFBVTtRQUNULFdBQVc7UUFDUixjQUFjLFVBRWpCLFdBQVc7R0FYM0IsWUFBWSxDQWlLeEI7U0FqS1ksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFNBUCBTRSBvciBhbiBTQVAgYWZmaWxpYXRlIGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbW9kdWxlIHNtYXJ0dXRpbHNcbiAqL1xuaW1wb3J0ICogYXMgbG9kYXNoIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENsb25lYWJsZSB9IGZyb20gJy4uLy4uL2R0b3MnO1xuaW1wb3J0IHsgRnVuY3Rpb25zVXRpbHMsIFN0cmluZ1V0aWxzIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4uL2xvZy5zZXJ2aWNlJztcbmltcG9ydCB7IENhY2hlQWN0aW9uIH0gZnJvbSAnLi9jYWNoZS1hY3Rpb24nO1xuaW1wb3J0IHsgRXZpY3Rpb25UYWcgfSBmcm9tICcuL2V2aWN0aW9uLXRhZyc7XG5pbXBvcnQgeyBDYWNoZUVuZ2luZSwgRGVmYXVsdENhY2hlVGltaW5nLCBJQ2FjaGVJdGVtLCBJQ2FjaGVUaW1pbmcsIElNZXRhZGF0YSB9IGZyb20gJy4vZW5naW5lJztcbmltcG9ydCB7IElFdmVudFNlcnZpY2UgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IEVWRU5UX1NFUlZJQ0UgfSBmcm9tICcuLi8uLi9jb25zdGFudHMnO1xuXG5leHBvcnQgdHlwZSBJQ2FjaGVQcmVkaWNhdGUgPSAoY2FjaGVBY3Rpb25zOiBDYWNoZUFjdGlvbltdKSA9PiBib29sZWFuO1xuXG4vKiogQGludGVybmFsICovXG5pbnRlcmZhY2UgSVByZWRpY2F0ZVJlZ2lzdHJ5IHtcbiAgICB0ZXN0OiBJQ2FjaGVQcmVkaWNhdGU7XG4gICAgY2FjaGVUaW1pbmc6IElDYWNoZVRpbWluZztcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgQHNtYXJ0dXRpbHMuc2VydmljZXM6Q2FjaGVTZXJ2aWNlXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNlcnZpY2UgdG8gd2hpY2ggdGhlIHtAbGluayBAc21hcnR1dGlscy5vYmplY3Q6QENhY2hlZCBAQ2FjaGVkfSBhbmQge0BsaW5rIEBzbWFydHV0aWxzLm9iamVjdDpASW52YWxpZGF0ZUNhY2hlIEBJbnZhbGlkYXRlQ2FjaGV9IGFubm90YXRpb25zIGRlbGVnYXRlIHRvIHBlcmZvcm0gc2VydmljZSBtZXRob2QgbGV2ZWwgY2FjaGluZy5cbiAqIEl0IGlzIG5vdCBoYW5kbGVkIGV4cGxpY2l0bHkgZXhjZXB0IGZvciBpdHMgZXZpY3QgbWV0aG9kLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ2FjaGVTZXJ2aWNlIHtcbiAgICBwcml2YXRlIHByZWRpY2F0ZXNSZWdpc3RyeTogSVByZWRpY2F0ZVJlZ2lzdHJ5W10gPSBbXTtcbiAgICBwcml2YXRlIGV2ZW50TGlzdGVuZXJzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgcHJpdmF0ZSBkZWZhdWx0Q2FjaGVUaW1pbmcgPSBuZXcgRGVmYXVsdENhY2hlVGltaW5nKDI0ICogNjAgKiA2MCAqIDEwMDAsIDEyICogNjAgKiA2MCAqIDEwMDApO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBzdHJpbmdVdGlsczogU3RyaW5nVXRpbHMsXG4gICAgICAgIHByaXZhdGUgZnVuY3Rpb25zVXRpbHM6IEZ1bmN0aW9uc1V0aWxzLFxuICAgICAgICBASW5qZWN0KEVWRU5UX1NFUlZJQ0UpIHByaXZhdGUgZXZlbnRTZXJ2aWNlOiBJRXZlbnRTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGNhY2hlRW5naW5lOiBDYWNoZUVuZ2luZVxuICAgICkge31cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBAc21hcnR1dGlscy5zZXJ2aWNlczpDYWNoZVNlcnZpY2UjcmVnaXN0ZXJcbiAgICAgKiBAbWV0aG9kT2YgQHNtYXJ0dXRpbHMuc2VydmljZXM6Q2FjaGVTZXJ2aWNlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZWdpc3RlciBhIG5ldyBwcmVkaWNhdGUgd2l0aCBpdCdzIGFzc29jaWF0ZWQgY2FjaGVUaW1pbmcuXG4gICAgICogRWFjaCB0aW1lIHRoZSBAQ2FjaGUgYW5ub3RhdGlvbiBpcyBoYW5kbGVkLCB0aGUgQ2FjaGVTZXJ2aWNlIHRyeSB0byBmaW5kIGEgbWF0Y2hpbmcgY2FjaGVUaW1pbmcgZm9yIHRoZSBnaXZlbiBjYWNoZUFjdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0lDYWNoZVByZWRpY2F0ZX0gdGVzdCBUaGlzIGZ1bmN0aW9uIHRha2VzIHRoZSBjYWNoZUFjdGlvbnMge0BsaW5rIEBzbWFydHV0aWxzLm9iamVjdDpDYWNoZUFjdGlvbiBDYWNoZUFjdGlvbn0gYXJndW1lbnQsIGFuZCBtdXN0IHJldHVybiBhIEJvb2xlYW4gdGhhdCBpcyB0cnVlIGlmIHRoZSBnaXZlbiBjYWNoZUFjdGlvbnMgbWF0Y2ggdGhlIHByZWRpY2F0ZS5cbiAgICAgKiBAcGFyYW0ge0lDYWNoZVRpbWluZ30gY2FjaGVUaW1pbmcgVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGNhbGwgc2V0QWdlKGl0ZW06IElDYWNoZUl0ZW08YW55Pikgb24gdGhlIGNhY2hlZCBpdGVtLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Q2FjaGVTZXJ2aWNlfSBDYWNoZVNlcnZpY2UgVGhlIENhY2hlU2VydmljZSBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiBleHBvcnQgY2xhc3MgQ3VzdG9tQ2FjaGVUaW1pbmcgaW1wbGVtZW50cyBJQ2FjaGVUaW1pbmcge1xuICAgICAqIFx0cHJpdmF0ZSBleHBpcmF0aW9uQWdlOiBudW1iZXI7XG4gICAgICogXHRwcml2YXRlIHJlZnJlc2hBZ2U6IG51bWJlcjtcbiAgICAgKiAgY29uc3RydWN0b3IoZXhwaXJhdGlvbkFnZTogbnVtYmVyLCByZWZyZXNoQWdlOiBudW1iZXIpIHtcbiAgICAgKiBcdFx0Ly8gVGhlIGNhY2hlZCByZXNwb25zZSBpcyBkaXNjYXJkZWQgaWYgaXQgaXMgb2xkZXIgdGhhbiB0aGUgZXhwaXJhdGlvbiBhZ2UuXG4gICAgICogXHRcdHRoaXMuZXhwaXJhdGlvbkFnZSA9IGV4cGlyYXRpb25BZ2U7XG4gICAgICogXHRcdC8vIG1heGltdW0gYWdlIGZvciB0aGUgY2FjaGVkIHJlc3BvbnNlIHRvIGJlIGNvbnNpZGVyZWQgXCJmcmVzaC5cIlxuICAgICAqIFx0XHR0aGlzLnJlZnJlc2hBZ2UgPSByZWZyZXNoQWdlO1xuICAgICAqIFx0fVxuICAgICAqIFx0c2V0QWdlKGl0ZW06IElDYWNoZUl0ZW08YW55Pik6IHZvaWQge1xuICAgICAqIFx0XHRpdGVtLmV4cGlyYXRpb25BZ2UgPSB0aGlzLmV4cGlyYXRpb25BZ2U7XG4gICAgICogXHRcdGl0ZW0ucmVmcmVzaEFnZSA9IHRoaXMucmVmcmVzaEFnZTtcbiAgICAgKiBcdH1cbiAgICAgKiBcdH07XG4gICAgICogXHRjb25zdCBjdXN0b21DYWNoZVRpbWluZyA9IG5ldyBDdXN0b21DYWNoZVRpbWluZygzMCAqIDYwMDAwLCAxNSAqIDYwMDAwKTtcbiAgICAgKiBcdGNvbnN0IGN1c3RvbUNvbnRlbnRQcmVkaWNhdGU6IElDYWNoZVByZWRpY2F0ZSA9IChjYWNoZUFjdGlvbnM6IENhY2hlQWN0aW9uW10pID0+IHtcbiAgICAgKiBcdFx0cmV0dXJuIGNhY2hlQWN0aW9ucy5maW5kKChjYWNoZUFjdGlvbikgPT4gY2FjaGVBY3Rpb24ubmFtZSA9PT0gJ0NVU1RPTV9UQUcnKSAhPT0gbnVsbDtcbiAgICAgKiBcdH07XG4gICAgICogdGhpcy5yZWdpc3RlcihjdXN0b21Db250ZW50UHJlZGljYXRlLCBjdXN0b21DYWNoZVRpbWluZyk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIHJlZ2lzdGVyKHRlc3Q6IElDYWNoZVByZWRpY2F0ZSwgY2FjaGVUaW1pbmc6IElDYWNoZVRpbWluZyk6IENhY2hlU2VydmljZSB7XG4gICAgICAgIHRoaXMucHJlZGljYXRlc1JlZ2lzdHJ5LnVuc2hpZnQoe1xuICAgICAgICAgICAgdGVzdCxcbiAgICAgICAgICAgIGNhY2hlVGltaW5nXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBwdWJsaWMgbWV0aG9kIGJ1dCBvbmx5IG1lYW50IHRvIGJlIHVzZWQgYnkgQENhY2hlIGFubm90YXRpb25cbiAgICAgKi9cbiAgICBwdWJsaWMgaGFuZGxlPFQgZXh0ZW5kcyBJTWV0YWRhdGE+KFxuICAgICAgICBzZXJ2aWNlOiBhbnksXG4gICAgICAgIG1ldGhvZE5hbWU6IHN0cmluZyxcbiAgICAgICAgcHJlYm91bmRNZXRob2Q6ICguLi5hcmdzOiBhbnlbXSkgPT4gUHJvbWlzZTxUPixcbiAgICAgICAgaW52b2NhdGlvbkFyZ3VtZW50czogYW55W10sXG4gICAgICAgIGNhY2hlQWN0aW9uczogQ2FjaGVBY3Rpb25bXSxcbiAgICAgICAgdGFnczogRXZpY3Rpb25UYWdbXVxuICAgICk6IFByb21pc2U8VD4ge1xuICAgICAgICBjb25zdCBjb25zdHJ1Y3Rvck5hbWUgPSB0aGlzLmZ1bmN0aW9uc1V0aWxzLmdldEluc3RhbmNlQ29uc3RydWN0b3JOYW1lKHNlcnZpY2UpO1xuICAgICAgICBjb25zdCBjYWNoZWRJdGVtSWQ6IHN0cmluZyA9XG4gICAgICAgICAgICB3aW5kb3cuYnRvYShjb25zdHJ1Y3Rvck5hbWUgKyBtZXRob2ROYW1lKSArXG4gICAgICAgICAgICB0aGlzLnN0cmluZ1V0aWxzLmVuY29kZShpbnZvY2F0aW9uQXJndW1lbnRzKTtcblxuICAgICAgICBjb25zdCBfaXRlbTogSUNhY2hlSXRlbTxhbnk+IHwgbnVsbCA9IHRoaXMuY2FjaGVFbmdpbmUuZ2V0SXRlbUJ5SWQoY2FjaGVkSXRlbUlkKTtcbiAgICAgICAgbGV0IGl0ZW06IElDYWNoZUl0ZW08YW55PjtcblxuICAgICAgICBpZiAoIV9pdGVtKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJ0aWFsSXRlbTogUGljazxcbiAgICAgICAgICAgICAgICBJQ2FjaGVJdGVtPGFueT4sXG4gICAgICAgICAgICAgICAgJ2lkJyB8ICd0aW1lc3RhbXAnIHwgJ2V2aWN0aW9uVGFncycgfCAnY2FjaGUnXG4gICAgICAgICAgICA+ID0gX2l0ZW0gfHwge1xuICAgICAgICAgICAgICAgIGlkOiBjYWNoZWRJdGVtSWQsXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgICBldmljdGlvblRhZ3M6IHRoaXMuY29sbGVjdEV2ZW50TmFtZXNGcm9tVGFncyh0YWdzKSxcbiAgICAgICAgICAgICAgICBjYWNoZTogbnVsbFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgY2FjaGVUaW1pbmc6IElDYWNoZVRpbWluZyB8IG51bGwgPSB0aGlzLmZpbmRDYWNoZVRpbWluZ0J5Q2FjaGVBY3Rpb25zKFxuICAgICAgICAgICAgICAgIGNhY2hlQWN0aW9uc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICghY2FjaGVUaW1pbmcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhY2hlU2VydmljZTo6aGFuZGxlIC0gTm8gcHJlZGljYXRlIG1hdGNoLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXRlbSA9IGNhY2hlVGltaW5nLnNldEFnZShwYXJ0aWFsSXRlbSk7XG5cbiAgICAgICAgICAgIHRoaXMuY2FjaGVFbmdpbmUuYWRkSXRlbShpdGVtLCBjYWNoZVRpbWluZywgcHJlYm91bmRNZXRob2QuYmluZChcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgLi4uQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoaW52b2NhdGlvbkFyZ3VtZW50cylcbiAgICAgICAgICAgICkgYXMgKDxHPigpID0+IFByb21pc2U8Rz4pKTtcblxuICAgICAgICAgICAgdGhpcy5saXN0ZW5Gb3JFdmljdGlvbkJ5VGFncyh0YWdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGl0ZW0gPSBfaXRlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlRW5naW5lLmhhbmRsZShpdGVtKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgQHNtYXJ0dXRpbHMuc2VydmljZXM6Q2FjaGVTZXJ2aWNlI2V2aWN0XG4gICAgICogQG1ldGhvZE9mICBAc21hcnR1dGlscy5zZXJ2aWNlczpDYWNoZVNlcnZpY2VcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBXaWxsIGV2aWN0IHRoZSBlbnRpcmUgY2FjaGUgb2YgYWxsIG1ldGhvZHMgb2YgYWxsIHNlcnZpY2VzIHJlZmVyZW5jaW5nIGVpdGhlciBkaXJlY3RseSBvciBpbmRpcmVjdGx5IHRoZSBnaXZlbiB7QGxpbmsgQHNtYXJ0dXRpbHMub2JqZWN0OkV2aWN0aW9uVGFnIEV2aWN0aW9uVGFnc31cbiAgICAgKiBAcGFyYW0gey4uLkV2aWN0aW9uVGFnW119IGV2aWN0aW9uVGFncyB0aGUge0BsaW5rIEBzbWFydHV0aWxzLm9iamVjdDpFdmljdGlvblRhZyBFdmljdGlvblRhZ3N9XG4gICAgICovXG4gICAgcHVibGljIGV2aWN0KC4uLmV2aWN0aW9uVGFnczogRXZpY3Rpb25UYWdbXSk6IHZvaWQge1xuICAgICAgICBjb25zdCB0YWdzOiBzdHJpbmdbXSA9IHRoaXMuY29sbGVjdEV2ZW50TmFtZXNGcm9tVGFncyhldmljdGlvblRhZ3MpO1xuICAgICAgICB0aGlzLmNhY2hlRW5naW5lLmV2aWN0KC4uLnRhZ3MpO1xuICAgICAgICB0YWdzLmZvckVhY2goKHRhZykgPT4gdGhpcy5ldmVudFNlcnZpY2UucHVibGlzaCh0YWcpKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgbGlzdGVuRm9yRXZpY3Rpb25CeVRhZ3ModGFnczogRXZpY3Rpb25UYWdbXSk6IHZvaWQge1xuICAgICAgICB0aGlzLmNvbGxlY3RFdmVudE5hbWVzRnJvbVRhZ3ModGFncylcbiAgICAgICAgICAgIC5maWx0ZXIoKGV2ZW50SWQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ldmVudExpc3RlbmVycy5pbmRleE9mKGV2ZW50SWQpID09PSAtMTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZm9yRWFjaCgoZXZlbnRJZCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5kZWJ1ZyhgcmVnaXN0ZXJpbmcgZXZlbnQgbGlzdGVuZXIgJHtldmVudElkfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMucHVzaChldmVudElkKTtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50U2VydmljZS5zdWJzY3JpYmUoZXZlbnRJZCwgKGV2dDogc3RyaW5nLCBkYXRhPzogQ2xvbmVhYmxlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5kZWJ1ZyhgY2xlYW5pbmcgY2FjaGUgb24gZXZlbnQgJHtldmVudElkfWApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlRW5naW5lLmV2aWN0KGV2ZW50SWQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlPENsb25lYWJsZT4oe30pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGNvbGxlY3RFdmVudE5hbWVzRnJvbVRhZ3ModGFnczogRXZpY3Rpb25UYWdbXSk6IHN0cmluZ1tdIHtcbiAgICAgICAgaWYgKHRhZ3MgJiYgdGFncy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2Rhc2gudW5pb24oLi4udGFncy5tYXAoKHQpID0+IHRoaXMuY29sbGVjdEV2ZW50TmFtZXNGcm9tVGFnKHQpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY29sbGVjdEV2ZW50TmFtZXNGcm9tVGFnKHRhZzogRXZpY3Rpb25UYWcpOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiBsb2Rhc2gudW5pb24oXG4gICAgICAgICAgICBbdGFnLmV2ZW50XSxcbiAgICAgICAgICAgIC4uLih0YWcucmVsYXRlZFRhZ3MgPyB0YWcucmVsYXRlZFRhZ3MubWFwKCh0KSA9PiB0aGlzLmNvbGxlY3RFdmVudE5hbWVzRnJvbVRhZyh0KSkgOiBbXSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZmluZENhY2hlVGltaW5nQnlDYWNoZUFjdGlvbnMoY2FjaGVBY3Rpb25zOiBDYWNoZUFjdGlvbltdKTogSUNhY2hlVGltaW5nIHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IHByZWRpY2F0ZTogSVByZWRpY2F0ZVJlZ2lzdHJ5IHwgdW5kZWZpbmVkID0gdGhpcy5wcmVkaWNhdGVzUmVnaXN0cnkuZmluZChcbiAgICAgICAgICAgIChjYWNoZVRpbWluZ1ByZWRpY2F0ZSkgPT4gY2FjaGVUaW1pbmdQcmVkaWNhdGUudGVzdChjYWNoZUFjdGlvbnMpXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBwcmVkaWNhdGUgPyBwcmVkaWNhdGUuY2FjaGVUaW1pbmcgOiB0aGlzLmRlZmF1bHRDYWNoZVRpbWluZztcbiAgICB9XG59XG4iXX0=