/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as lodash from 'lodash';
import { HttpErrorResponse, HttpParams, HttpResponse } from '@angular/common/http';
import { from, throwError, Observable } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { stringUtils } from './string-utils';
var HttpUtils = /** @class */ (function () {
    function HttpUtils() {
    }
    HttpUtils.prototype.isGET = function (request) {
        return request.method === 'GET';
    };
    HttpUtils.prototype.isRequestOfAccept = function (request, accept) {
        return (!!request.headers &&
            !!request.headers.get('Accept') &&
            (request.headers.get('Accept') || '').includes(accept));
    };
    HttpUtils.prototype.isResponseOfContentType = function (response, contentType) {
        return (!!response.headers &&
            !!response.headers.get('Content-type') &&
            (response.headers.get('Content-type') || '').indexOf(contentType) === 0);
    };
    HttpUtils.prototype.isHTMLRequest = function (request, response) {
        return (this.isGET(request) &&
            (this.isRequestOfAccept(request, 'text/html') ||
                /.+\.html$/.test(request.url) ||
                /.+\.html\?/.test(request.url)));
    };
    HttpUtils.prototype.isJSONRequest = function (request, response) {
        return (this.isGET(request) &&
            ((response && this.isResponseOfContentType(response, 'json')) ||
                /.+\.json$/.test(request.url)));
    };
    HttpUtils.prototype.isJSRequest = function (request) {
        return this.isGET(request) && /.+\.js$/.test(request.url);
    };
    HttpUtils.prototype.isCRUDRequest = function (request, response) {
        return (!this.isHTMLRequest(request, response) &&
            !this.isJSONRequest(request, response) &&
            !this.isJSRequest(request));
    };
    HttpUtils.prototype.transformHttpParams = function (params, substitutionMap) {
        return new HttpParams({
            fromObject: JSON.parse(stringUtils.replaceAll(JSON.stringify(this.copyHttpParamsOrHeaders(params)), substitutionMap))
        });
    };
    HttpUtils.prototype.copyHttpParamsOrHeaders = function (params) {
        var copy = {};
        params.keys().forEach(function (key) {
            var values = params.getAll(key);
            if (values !== null) {
                copy[key] = values.length > 1 ? values : values[0];
            }
        });
        return copy;
    };
    HttpUtils.prototype.buildHttpResponse = function (originalRequest, _statusAndPayload) {
        var statusAndPayloadPromise = Promise.resolve(_statusAndPayload);
        return from(statusAndPayloadPromise).pipe(switchMap(function (statusAndPayload) {
            var status = statusAndPayload[0];
            var body = statusAndPayload[1];
            var requestClone = originalRequest.clone({
                body: body
            });
            lodash.merge(requestClone, { status: status });
            if (200 <= status && status < 300) {
                return new Observable(function (ob) {
                    ob.next(new HttpResponse(requestClone));
                });
            }
            else {
                return throwError(new HttpErrorResponse(lodash.merge(requestClone, { error: body })));
            }
        }));
    };
    return HttpUtils;
}());
export { HttpUtils };
export var httpUtils = new HttpUtils();
//# sourceMappingURL=data:application/json;base64,