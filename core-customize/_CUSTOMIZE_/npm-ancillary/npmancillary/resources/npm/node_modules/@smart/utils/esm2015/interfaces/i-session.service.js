/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/*
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
/**
 * @ngdoc interface
 * @name smarteditServicesModule.interface:ISessionService
 * @description
 * The ISessionService provides information related to the current session
 * and the authenticated user (including a user readable and writeable languages).
 */
export class ISessionService {
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISessionService#getCurrentUsername
     * @methodOf smarteditServicesModule.interface:ISessionService
     *
     * @description
     * Returns the username, previously mentioned as "principalUID",
     * associated to the authenticated user.
     *
     * @returns {Promise<string>} A promise resolving to the username,
     * previously mentioned as "principalUID", associated to the
     * authenticated user.
     */
    getCurrentUsername() {
        'proxyFunction';
        return Promise.resolve('');
    }
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISessionService#getCurrentUserDisplayName
     * @methodOf smarteditServicesModule.interface:ISessionService
     *
     * @description
     * Returns the displayed name associated to the authenticated user.
     *
     * @returns {Promise<string>} A promise resolving to the displayed name
     * associated to the authenticated user.
     */
    getCurrentUserDisplayName() {
        'proxyFunction';
        return Promise.resolve('');
    }
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISessionService#getCurrentUser
     * @methodOf smarteditServicesModule.interface:ISessionService
     *
     * @description
     * Returns the data of the current authenticated user.
     * Also note that as part of the User object returned by this method contains
     * the list of readable and writeable languages available to the user.
     *
     * @returns {Promise<User>} A promise resolving to the data of the current
     * authenticated user.
     */
    getCurrentUser() {
        'proxyFunction';
        return Promise.resolve({});
    }
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISessionService#hasUserChanged
     * @methodOf smarteditServicesModule.interface:ISessionService
     *
     * @description
     * Returns boolean indicating whether the current user is different from
     * the last authenticated one.
     *
     * @returns {Promise<boolean>} Boolean indicating whether the current user is
     * different from the last authenticated one.
     */
    hasUserChanged() {
        'proxyFunction';
        return Promise.resolve(true);
    }
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISessionService#resetCurrentUserData
     * @methodOf smarteditServicesModule.interface:ISessionService
     *
     * @description
     * Reset all data associated to the authenticated user.
     * to the authenticated user.
     *
     * @return {Promise<void>} returns an empty promise.
     */
    resetCurrentUserData() {
        'proxyFunction';
        return Promise.resolve();
    }
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISessionService#setCurrentUsername
     * @methodOf smarteditServicesModule.interface:ISessionService
     *
     * @description
     * Set the username, previously mentioned as "principalUID", associated
     * to the authenticated user.
     *
     * @return {Promise<void>} returns an empty promise.
     */
    setCurrentUsername() {
        'proxyFunction';
        return Promise.resolve();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaS1zZXNzaW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac21hcnQvdXRpbHMvIiwic291cmNlcyI6WyJpbnRlcmZhY2VzL2ktc2Vzc2lvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUNIOztHQUVHO0FBSUg7Ozs7OztHQU1HO0FBQ0gsTUFBTSxPQUFnQixlQUFlO0lBQ2pDOzs7Ozs7Ozs7Ozs7T0FZRztJQUNILGtCQUFrQjtRQUNkLGVBQWUsQ0FBQztRQUNoQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVEOzs7Ozs7Ozs7O09BVUc7SUFDSCx5QkFBeUI7UUFDckIsZUFBZSxDQUFDO1FBQ2hCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7OztPQVlHO0lBQ0gsY0FBYztRQUNWLGVBQWUsQ0FBQztRQUNoQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBVSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVEOzs7Ozs7Ozs7OztPQVdHO0lBQ0gsY0FBYztRQUNWLGVBQWUsQ0FBQztRQUNoQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVEOzs7Ozs7Ozs7O09BVUc7SUFDSCxvQkFBb0I7UUFDaEIsZUFBZSxDQUFDO1FBQ2hCLE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRDs7Ozs7Ozs7OztPQVVHO0lBQ0gsa0JBQWtCO1FBQ2QsZUFBZSxDQUFDO1FBQ2hCLE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzdCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFNBUCBTRSBvciBhbiBTQVAgYWZmaWxpYXRlIGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbW9kdWxlIHNtYXJ0dXRpbHNcbiAqL1xuLypcbiAqIENvcHlyaWdodCAoYykgMjAxOSBTQVAgU0Ugb3IgYW4gU0FQIGFmZmlsaWF0ZSBjb21wYW55LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5cbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi9kdG9zJztcblxuLyoqXG4gKiBAbmdkb2MgaW50ZXJmYWNlXG4gKiBAbmFtZSBzbWFydGVkaXRTZXJ2aWNlc01vZHVsZS5pbnRlcmZhY2U6SVNlc3Npb25TZXJ2aWNlXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBJU2Vzc2lvblNlcnZpY2UgcHJvdmlkZXMgaW5mb3JtYXRpb24gcmVsYXRlZCB0byB0aGUgY3VycmVudCBzZXNzaW9uXG4gKiBhbmQgdGhlIGF1dGhlbnRpY2F0ZWQgdXNlciAoaW5jbHVkaW5nIGEgdXNlciByZWFkYWJsZSBhbmQgd3JpdGVhYmxlIGxhbmd1YWdlcykuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJU2Vzc2lvblNlcnZpY2Uge1xuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBzbWFydGVkaXRTZXJ2aWNlc01vZHVsZS5pbnRlcmZhY2U6SVNlc3Npb25TZXJ2aWNlI2dldEN1cnJlbnRVc2VybmFtZVxuICAgICAqIEBtZXRob2RPZiBzbWFydGVkaXRTZXJ2aWNlc01vZHVsZS5pbnRlcmZhY2U6SVNlc3Npb25TZXJ2aWNlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXR1cm5zIHRoZSB1c2VybmFtZSwgcHJldmlvdXNseSBtZW50aW9uZWQgYXMgXCJwcmluY2lwYWxVSURcIixcbiAgICAgKiBhc3NvY2lhdGVkIHRvIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBBIHByb21pc2UgcmVzb2x2aW5nIHRvIHRoZSB1c2VybmFtZSxcbiAgICAgKiBwcmV2aW91c2x5IG1lbnRpb25lZCBhcyBcInByaW5jaXBhbFVJRFwiLCBhc3NvY2lhdGVkIHRvIHRoZVxuICAgICAqIGF1dGhlbnRpY2F0ZWQgdXNlci5cbiAgICAgKi9cbiAgICBnZXRDdXJyZW50VXNlcm5hbWUoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgJ3Byb3h5RnVuY3Rpb24nO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgc21hcnRlZGl0U2VydmljZXNNb2R1bGUuaW50ZXJmYWNlOklTZXNzaW9uU2VydmljZSNnZXRDdXJyZW50VXNlckRpc3BsYXlOYW1lXG4gICAgICogQG1ldGhvZE9mIHNtYXJ0ZWRpdFNlcnZpY2VzTW9kdWxlLmludGVyZmFjZTpJU2Vzc2lvblNlcnZpY2VcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJldHVybnMgdGhlIGRpc3BsYXllZCBuYW1lIGFzc29jaWF0ZWQgdG8gdGhlIGF1dGhlbnRpY2F0ZWQgdXNlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IEEgcHJvbWlzZSByZXNvbHZpbmcgdG8gdGhlIGRpc3BsYXllZCBuYW1lXG4gICAgICogYXNzb2NpYXRlZCB0byB0aGUgYXV0aGVudGljYXRlZCB1c2VyLlxuICAgICAqL1xuICAgIGdldEN1cnJlbnRVc2VyRGlzcGxheU5hbWUoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgJ3Byb3h5RnVuY3Rpb24nO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgc21hcnRlZGl0U2VydmljZXNNb2R1bGUuaW50ZXJmYWNlOklTZXNzaW9uU2VydmljZSNnZXRDdXJyZW50VXNlclxuICAgICAqIEBtZXRob2RPZiBzbWFydGVkaXRTZXJ2aWNlc01vZHVsZS5pbnRlcmZhY2U6SVNlc3Npb25TZXJ2aWNlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXR1cm5zIHRoZSBkYXRhIG9mIHRoZSBjdXJyZW50IGF1dGhlbnRpY2F0ZWQgdXNlci5cbiAgICAgKiBBbHNvIG5vdGUgdGhhdCBhcyBwYXJ0IG9mIHRoZSBVc2VyIG9iamVjdCByZXR1cm5lZCBieSB0aGlzIG1ldGhvZCBjb250YWluc1xuICAgICAqIHRoZSBsaXN0IG9mIHJlYWRhYmxlIGFuZCB3cml0ZWFibGUgbGFuZ3VhZ2VzIGF2YWlsYWJsZSB0byB0aGUgdXNlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFVzZXI+fSBBIHByb21pc2UgcmVzb2x2aW5nIHRvIHRoZSBkYXRhIG9mIHRoZSBjdXJyZW50XG4gICAgICogYXV0aGVudGljYXRlZCB1c2VyLlxuICAgICAqL1xuICAgIGdldEN1cnJlbnRVc2VyKCk6IFByb21pc2U8VXNlcj4ge1xuICAgICAgICAncHJveHlGdW5jdGlvbic7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe30gYXMgVXNlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIHNtYXJ0ZWRpdFNlcnZpY2VzTW9kdWxlLmludGVyZmFjZTpJU2Vzc2lvblNlcnZpY2UjaGFzVXNlckNoYW5nZWRcbiAgICAgKiBAbWV0aG9kT2Ygc21hcnRlZGl0U2VydmljZXNNb2R1bGUuaW50ZXJmYWNlOklTZXNzaW9uU2VydmljZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgY3VycmVudCB1c2VyIGlzIGRpZmZlcmVudCBmcm9tXG4gICAgICogdGhlIGxhc3QgYXV0aGVudGljYXRlZCBvbmUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGN1cnJlbnQgdXNlciBpc1xuICAgICAqIGRpZmZlcmVudCBmcm9tIHRoZSBsYXN0IGF1dGhlbnRpY2F0ZWQgb25lLlxuICAgICAqL1xuICAgIGhhc1VzZXJDaGFuZ2VkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICAncHJveHlGdW5jdGlvbic7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIHNtYXJ0ZWRpdFNlcnZpY2VzTW9kdWxlLmludGVyZmFjZTpJU2Vzc2lvblNlcnZpY2UjcmVzZXRDdXJyZW50VXNlckRhdGFcbiAgICAgKiBAbWV0aG9kT2Ygc21hcnRlZGl0U2VydmljZXNNb2R1bGUuaW50ZXJmYWNlOklTZXNzaW9uU2VydmljZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmVzZXQgYWxsIGRhdGEgYXNzb2NpYXRlZCB0byB0aGUgYXV0aGVudGljYXRlZCB1c2VyLlxuICAgICAqIHRvIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fSByZXR1cm5zIGFuIGVtcHR5IHByb21pc2UuXG4gICAgICovXG4gICAgcmVzZXRDdXJyZW50VXNlckRhdGEoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgICdwcm94eUZ1bmN0aW9uJztcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBzbWFydGVkaXRTZXJ2aWNlc01vZHVsZS5pbnRlcmZhY2U6SVNlc3Npb25TZXJ2aWNlI3NldEN1cnJlbnRVc2VybmFtZVxuICAgICAqIEBtZXRob2RPZiBzbWFydGVkaXRTZXJ2aWNlc01vZHVsZS5pbnRlcmZhY2U6SVNlc3Npb25TZXJ2aWNlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTZXQgdGhlIHVzZXJuYW1lLCBwcmV2aW91c2x5IG1lbnRpb25lZCBhcyBcInByaW5jaXBhbFVJRFwiLCBhc3NvY2lhdGVkXG4gICAgICogdG8gdGhlIGF1dGhlbnRpY2F0ZWQgdXNlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IHJldHVybnMgYW4gZW1wdHkgcHJvbWlzZS5cbiAgICAgKi9cbiAgICBzZXRDdXJyZW50VXNlcm5hbWUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgICdwcm94eUZ1bmN0aW9uJztcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbn1cbiJdfQ==