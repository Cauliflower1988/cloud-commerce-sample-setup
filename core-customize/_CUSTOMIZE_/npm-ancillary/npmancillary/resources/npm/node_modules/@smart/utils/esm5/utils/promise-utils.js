/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as lodash from 'lodash';
import { Injectable } from '@angular/core';
import { LogService } from '../services/log.service';
/**
 * @ngdoc service
 * @name @smartutils.services:PromiseUtils
 *
 * @description
 * utility service around ES6 Promises.
 */
var PromiseUtils = /** @class */ (function () {
    function PromiseUtils() {
        var _this = this;
        this.WAIT_TIMEOUT = 4;
        this.FAILURE_TIMEOUT = 2000;
        this.handlePromiseRejections = function (promise) {
            var oldThen = promise.then;
            var defaultFailureCallback = _this.defaultFailureCallback;
            promise.then = function (successCallback, _failureCallback) {
                var failureCallback = _failureCallback ? _failureCallback : defaultFailureCallback;
                return oldThen.call(this, successCallback, failureCallback);
            };
            return promise;
        };
        this.defaultFailureCallback = function (error) {
            if (undefined !== error && null !== error && 'canceled' !== error) {
                if (lodash.isPlainObject(error)) {
                    if (!_this.isAjaxError(error)) {
                        PromiseUtils_1.logService.error("exception caught in promise: " + JSON.stringify(error));
                    }
                }
                else if (!lodash.isBoolean(error)) {
                    PromiseUtils_1.logService.error(error);
                }
            }
            PromiseUtils_1.logService.error("defaultFailureCallback:", error);
            return Promise.reject(error);
        };
    }
    PromiseUtils_1 = PromiseUtils;
    PromiseUtils.prototype.toPromise = function (method, context) {
        return function () {
            try {
                return Promise.resolve(method.apply(context, Array.prototype.slice.call(arguments)));
            }
            catch (e) {
                PromiseUtils_1.logService.error('execution of a method that was turned into a promise failed');
                PromiseUtils_1.logService.error(e);
                return Promise.reject(e);
            }
        };
    };
    PromiseUtils.prototype.promise = function (executor) {
        return this.handlePromiseRejections(new Promise(executor));
    };
    PromiseUtils.prototype.defer = function () {
        var pResolve;
        var pReject;
        var deferred = {
            promise: this.promise(function (_resolve, _reject) {
                pResolve = _resolve;
                pReject = _reject;
            }),
            resolve: function (value) {
                pResolve(value);
            },
            reject: function (reason) {
                pReject(reason);
            }
        };
        return deferred;
    };
    PromiseUtils.prototype.sleep = function (ms) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) { return setTimeout(resolve, ms); })];
            });
        });
    };
    PromiseUtils.prototype.isAjaxError = function (error) {
        return error.hasOwnProperty('headers');
    };
    PromiseUtils.prototype.waitOnCondition = function (condition, callback, errorMessage, elapsedTime) {
        var _this = this;
        if (elapsedTime === void 0) { elapsedTime = 0; }
        setTimeout(function () {
            if (condition()) {
                callback();
            }
            else if (elapsedTime < _this.FAILURE_TIMEOUT) {
                _this.waitOnCondition(condition, callback, errorMessage, elapsedTime + _this.WAIT_TIMEOUT);
            }
            else {
                throw new Error("PromiseUtils: " + errorMessage);
            }
        }, this.WAIT_TIMEOUT);
    };
    PromiseUtils.prototype.resolveToCallbackWhenCondition = function (condition, callback, errorMessage) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        _this.waitOnCondition(condition, function () { return resolve(callback()); }, errorMessage ? errorMessage : 'condition for promise resolution was never met');
                    })];
            });
        });
    };
    var PromiseUtils_1;
    PromiseUtils.logService = new LogService();
    PromiseUtils = PromiseUtils_1 = tslib_1.__decorate([
        Injectable()
    ], PromiseUtils);
    return PromiseUtils;
}());
export { PromiseUtils };
export var promiseUtils = new PromiseUtils();
//# sourceMappingURL=data:application/json;base64,