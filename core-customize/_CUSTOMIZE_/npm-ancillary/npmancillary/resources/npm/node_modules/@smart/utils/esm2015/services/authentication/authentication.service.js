/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/*
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
import * as tslib_1 from "tslib";
import { Inject, Optional } from '@angular/core';
import * as lodash from 'lodash';
import { functionsUtils } from '../../utils';
import { IAuthenticationManagerService, IAuthenticationService, IModalService, ISettingsService, ISharedDataService, IStorageService } from '../../interfaces';
import { ITranslationsFetchService } from '../translations';
import { DEFAULT_AUTH_MAP, DEFAULT_AUTHENTICATION_ENTRY_POINT, DEFAULT_CREDENTIALS_MAP, EVENT_SERVICE, EVENTS } from '../../constants';
import { SSOAuthenticationHelper } from './sso-authentication.helper';
import { LoginDialogComponent } from '../../components/login-dialog';
let AuthenticationService = class AuthenticationService extends IAuthenticationService {
    constructor(translationsFetchService, modalService, sharedDataService, storageService, eventService, ssoAuthenticationHelper, settingsService, authenticationManager) {
        super();
        this.translationsFetchService = translationsFetchService;
        this.modalService = modalService;
        this.sharedDataService = sharedDataService;
        this.storageService = storageService;
        this.eventService = eventService;
        this.ssoAuthenticationHelper = ssoAuthenticationHelper;
        this.settingsService = settingsService;
        this.authenticationManager = authenticationManager;
    }
    filterEntryPoints(resource) {
        return this.sharedDataService.get('authenticationMap').then((authenticationMap) => {
            return functionsUtils
                .convertToArray(Object.assign({}, (authenticationMap || {}), DEFAULT_AUTH_MAP))
                .filter((entry) => new RegExp(entry.key, 'g').test(resource))
                .map((element) => element.value);
        });
    }
    isAuthEntryPoint(resource) {
        return this.sharedDataService.get('authenticationMap').then((authenticationMap) => {
            const authEntryPoints = functionsUtils
                .convertToArray(authenticationMap || {})
                .map((element) => element.value);
            return (authEntryPoints.indexOf(resource) > -1 ||
                resource === DEFAULT_AUTHENTICATION_ENTRY_POINT);
        });
    }
    authenticate(resource) {
        return this._findLoginData(resource).then((loginData) => {
            return this._launchAuth(loginData).then((modalFeedback) => {
                Promise.resolve(this.eventService.publish(EVENTS.AUTHORIZATION_SUCCESS, {
                    userHasChanged: modalFeedback.userHasChanged
                })).then(() => {
                    if (modalFeedback.userHasChanged) {
                        this.eventService.publish(EVENTS.USER_HAS_CHANGED);
                    }
                    /**
                     * We only need to reload when the user has changed and all authentication forms were closed.
                     * There can be many authentication forms if some modules use different (from default one) end points.
                     */
                    const reauthInProcess = lodash
                        .values(this.reauthInProgress)
                        .some((inProcess) => inProcess);
                    if (modalFeedback.userHasChanged &&
                        !reauthInProcess &&
                        this.authenticationManager &&
                        this.authenticationManager.onUserHasChanged) {
                        this.authenticationManager.onUserHasChanged();
                    }
                });
                this.reauthInProgress[loginData.authURI] = false;
            });
        });
    }
    logout() {
        // First, indicate the services that SmartEdit is logging out. This should give them the opportunity to clean up.
        // NOTE: This is not synchronous since some clean-up might be lengthy, and logging out should be fast.
        return this.eventService.publish(EVENTS.LOGOUT).then(() => {
            this.storageService.removeAllAuthTokens();
            if (this.ssoAuthenticationHelper.isAutoSSOMain()) {
                this.ssoAuthenticationHelper.logout();
            }
            else if (this.authenticationManager && this.authenticationManager.onLogout) {
                this.authenticationManager.onLogout();
            }
        });
    }
    isReAuthInProgress(entryPoint) {
        return Promise.resolve(this.reauthInProgress[entryPoint] === true);
    }
    setReAuthInProgress(entryPoint) {
        this.reauthInProgress[entryPoint] = true;
        return Promise.resolve();
    }
    isAuthenticated(url) {
        return this.filterEntryPoints(url).then((entryPoints) => {
            const authURI = entryPoints && entryPoints[0];
            return Promise.resolve(this.storageService.getAuthToken(authURI)).then((authToken) => {
                return !!authToken;
            });
        });
    }
    /*
     * will try determine first relevant authentication entry point from authenticationMap and retrieve potential client credentials to be added on top of user credentials
     */
    _findLoginData(resource) {
        return this.filterEntryPoints(resource).then((entryPoints) => {
            return Promise.resolve(this.sharedDataService.get('credentialsMap').then((credentialsMap) => {
                const map = Object.assign({}, (credentialsMap || {}), DEFAULT_CREDENTIALS_MAP);
                const authURI = entryPoints[0];
                return {
                    authURI,
                    clientCredentials: map[authURI]
                };
            }));
        });
    }
    _launchAuth(loginData) {
        return this.translationsFetchService
            .waitToBeReady()
            .then(() => Promise.all([
            this.storageService.isInitialized(),
            this.settingsService.getBoolean('smartedit.sso.enabled')
        ]))
            .then(([isFullScreen, ssoEnabled]) => {
            const modalRef = this.modalService.open({
                component: LoginDialogComponent,
                data: Object.assign({}, loginData, { isFullScreen,
                    ssoEnabled }),
                config: {
                    modalPanelClass: 'su-login-dialog-container',
                    hasBackdrop: false
                }
            });
            return new Promise((resolve, reject) => {
                modalRef.afterClosed.subscribe(resolve, reject);
            });
        });
    }
};
AuthenticationService = tslib_1.__decorate([
    tslib_1.__param(4, Inject(EVENT_SERVICE)),
    tslib_1.__param(7, Optional()),
    tslib_1.__metadata("design:paramtypes", [ITranslationsFetchService,
        IModalService,
        ISharedDataService,
        IStorageService, Object, SSOAuthenticationHelper,
        ISettingsService,
        IAuthenticationManagerService])
], AuthenticationService);
export { AuthenticationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2F1dGhlbnRpY2F0aW9uL2F1dGhlbnRpY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBQ0g7O0dBRUc7O0FBRUgsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxLQUFLLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFFakMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM3QyxPQUFPLEVBQ0gsNkJBQTZCLEVBQzdCLHNCQUFzQixFQU10QixhQUFhLEVBQ2IsZ0JBQWdCLEVBQ2hCLGtCQUFrQixFQUNsQixlQUFlLEVBQ2xCLE1BQU0sa0JBQWtCLENBQUM7QUFDMUIsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDNUQsT0FBTyxFQUNILGdCQUFnQixFQUNoQixrQ0FBa0MsRUFDbEMsdUJBQXVCLEVBQ3ZCLGFBQWEsRUFDYixNQUFNLEVBQ1QsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUV0RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQWVyRSxJQUFhLHFCQUFxQixHQUFsQyxNQUFhLHFCQUFzQixTQUFRLHNCQUFzQjtJQUM3RCxZQUNjLHdCQUFtRCxFQUNuRCxZQUEyQixFQUMzQixpQkFBcUMsRUFDckMsY0FBK0IsRUFDUixZQUEyQixFQUNsRCx1QkFBZ0QsRUFDaEQsZUFBaUMsRUFDckIscUJBQW9EO1FBRTFFLEtBQUssRUFBRSxDQUFDO1FBVEUsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEyQjtRQUNuRCxpQkFBWSxHQUFaLFlBQVksQ0FBZTtRQUMzQixzQkFBaUIsR0FB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QUMsSUFBSSxDQUFhO2dCQUNoRCxTQUFTLEVBQUUsb0JBQW9CO2dCQUMvQixJQUFJLG9CQUNHLFNBQVMsSUFDWixZQUFZO29CQUNaLFVBQVUsR0FDYjtnQkFDRCxNQUFNLEVBQUU7b0JBQ0osZUFBZSxFQUFFLDJCQUEyQjtvQkFDNUMsV0FBVyxFQUFFLEtBQUs7aUJBQ3JCO2FBQ0osQ0FBQyxDQUFDO1lBRUgsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDbkMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3BELENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0NBQ0osQ0FBQTtBQTNKWSxxQkFBcUI7SUFNekIsbUJBQUEsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBR3JCLG1CQUFBLFFBQVEsRUFBRSxDQUFBOzZDQVB5Qix5QkFBeUI7UUFDckMsYUFBYTtRQUNSLGtCQUFrQjtRQUNyQixlQUFlLFVBRU4sdUJBQXVCO1FBQy9CLGdCQUFnQjtRQUNFLDZCQUE2QjtHQVRyRSxxQkFBcUIsQ0EySmpDO1NBM0pZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFNBUCBTRSBvciBhbiBTQVAgYWZmaWxpYXRlIGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbW9kdWxlIHNtYXJ0dXRpbHNcbiAqL1xuLypcbiAqIENvcHlyaWdodCAoYykgMjAxOSBTQVAgU0Ugb3IgYW4gU0FQIGFmZmlsaWF0ZSBjb21wYW55LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5cbmltcG9ydCB7IEluamVjdCwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIGxvZGFzaCBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBmdW5jdGlvbnNVdGlscyB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7XG4gICAgSUF1dGhlbnRpY2F0aW9uTWFuYWdlclNlcnZpY2UsXG4gICAgSUF1dGhlbnRpY2F0aW9uU2VydmljZSxcbiAgICBJQXV0aFRva2VuLFxuICAgIElDcmVkZW50aWFsc01hcFJlY29yZCxcbiAgICBJRXZlbnRTZXJ2aWNlLFxuICAgIElMb2dpbkRhdGEsXG4gICAgSUxvZ2luTW9kYWxGZWVkYmFjayxcbiAgICBJTW9kYWxTZXJ2aWNlLFxuICAgIElTZXR0aW5nc1NlcnZpY2UsXG4gICAgSVNoYXJlZERhdGFTZXJ2aWNlLFxuICAgIElTdG9yYWdlU2VydmljZVxufSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IElUcmFuc2xhdGlvbnNGZXRjaFNlcnZpY2UgfSBmcm9tICcuLi90cmFuc2xhdGlvbnMnO1xuaW1wb3J0IHtcbiAgICBERUZBVUxUX0FVVEhfTUFQLFxuICAgIERFRkFVTFRfQVVUSEVOVElDQVRJT05fRU5UUllfUE9JTlQsXG4gICAgREVGQVVMVF9DUkVERU5USUFMU19NQVAsXG4gICAgRVZFTlRfU0VSVklDRSxcbiAgICBFVkVOVFNcbn0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IFNTT0F1dGhlbnRpY2F0aW9uSGVscGVyIH0gZnJvbSAnLi9zc28tYXV0aGVudGljYXRpb24uaGVscGVyJztcbmltcG9ydCB7IENsb25lYWJsZSB9IGZyb20gJy4uLy4uL2R0b3MnO1xuaW1wb3J0IHsgTG9naW5EaWFsb2dDb21wb25lbnQgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2xvZ2luLWRpYWxvZyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNyZWRlbnRpYWxzTWFwIHtcbiAgICBbZW50cnlQb2ludDogc3RyaW5nXTogSUNyZWRlbnRpYWxzTWFwUmVjb3JkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElBdXRoTWFwIHtcbiAgICBbZW50cnlQb2ludDogc3RyaW5nXTogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgSUF1dGhlbnRpY2F0aW9uTWFwRW50cnkge1xuICAgIGtleTogc3RyaW5nO1xuICAgIHZhbHVlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBBdXRoZW50aWNhdGlvblNlcnZpY2UgZXh0ZW5kcyBJQXV0aGVudGljYXRpb25TZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJvdGVjdGVkIHRyYW5zbGF0aW9uc0ZldGNoU2VydmljZTogSVRyYW5zbGF0aW9uc0ZldGNoU2VydmljZSxcbiAgICAgICAgcHJvdGVjdGVkIG1vZGFsU2VydmljZTogSU1vZGFsU2VydmljZSxcbiAgICAgICAgcHJvdGVjdGVkIHNoYXJlZERhdGFTZXJ2aWNlOiBJU2hhcmVkRGF0YVNlcnZpY2UsXG4gICAgICAgIHByb3RlY3RlZCBzdG9yYWdlU2VydmljZTogSVN0b3JhZ2VTZXJ2aWNlLFxuICAgICAgICBASW5qZWN0KEVWRU5UX1NFUlZJQ0UpIHByb3RlY3RlZCBldmVudFNlcnZpY2U6IElFdmVudFNlcnZpY2UsXG4gICAgICAgIHByb3RlY3RlZCBzc29BdXRoZW50aWNhdGlvbkhlbHBlcjogU1NPQXV0aGVudGljYXRpb25IZWxwZXIsXG4gICAgICAgIHByb3RlY3RlZCBzZXR0aW5nc1NlcnZpY2U6IElTZXR0aW5nc1NlcnZpY2UsXG4gICAgICAgIEBPcHRpb25hbCgpIHByb3RlY3RlZCBhdXRoZW50aWNhdGlvbk1hbmFnZXI6IElBdXRoZW50aWNhdGlvbk1hbmFnZXJTZXJ2aWNlXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgZmlsdGVyRW50cnlQb2ludHMocmVzb3VyY2U6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2hhcmVkRGF0YVNlcnZpY2UuZ2V0KCdhdXRoZW50aWNhdGlvbk1hcCcpLnRoZW4oKGF1dGhlbnRpY2F0aW9uTWFwKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb25zVXRpbHNcbiAgICAgICAgICAgICAgICAuY29udmVydFRvQXJyYXk8c3RyaW5nPih7XG4gICAgICAgICAgICAgICAgICAgIC4uLigoKGF1dGhlbnRpY2F0aW9uTWFwIGFzIHVua25vd24pIGFzIElBdXRoZW50aWNhdGlvbk1hcEVudHJ5KSB8fCB7fSksXG4gICAgICAgICAgICAgICAgICAgIC4uLkRFRkFVTFRfQVVUSF9NQVBcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKGVudHJ5OiBJQXV0aGVudGljYXRpb25NYXBFbnRyeSkgPT5cbiAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChlbnRyeS5rZXksICdnJykudGVzdChyZXNvdXJjZSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgLm1hcCgoZWxlbWVudDogSUF1dGhlbnRpY2F0aW9uTWFwRW50cnkpID0+IGVsZW1lbnQudmFsdWUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpc0F1dGhFbnRyeVBvaW50KHJlc291cmNlOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2hhcmVkRGF0YVNlcnZpY2UuZ2V0KCdhdXRoZW50aWNhdGlvbk1hcCcpLnRoZW4oKGF1dGhlbnRpY2F0aW9uTWFwKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhdXRoRW50cnlQb2ludHMgPSBmdW5jdGlvbnNVdGlsc1xuICAgICAgICAgICAgICAgIC5jb252ZXJ0VG9BcnJheTxzdHJpbmc+KCgoYXV0aGVudGljYXRpb25NYXAgYXMgdW5rbm93bikgYXMgSUF1dGhNYXApIHx8IHt9KVxuICAgICAgICAgICAgICAgIC5tYXAoKGVsZW1lbnQ6IElBdXRoZW50aWNhdGlvbk1hcEVudHJ5KSA9PiBlbGVtZW50LnZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgYXV0aEVudHJ5UG9pbnRzLmluZGV4T2YocmVzb3VyY2UpID4gLTEgfHxcbiAgICAgICAgICAgICAgICByZXNvdXJjZSA9PT0gREVGQVVMVF9BVVRIRU5USUNBVElPTl9FTlRSWV9QT0lOVFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXV0aGVudGljYXRlKHJlc291cmNlOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbmRMb2dpbkRhdGEocmVzb3VyY2UpLnRoZW4oKGxvZ2luRGF0YTogSUxvZ2luRGF0YSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xhdW5jaEF1dGgobG9naW5EYXRhKS50aGVuKChtb2RhbEZlZWRiYWNrOiBJTG9naW5Nb2RhbEZlZWRiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50U2VydmljZS5wdWJsaXNoKEVWRU5UUy5BVVRIT1JJWkFUSU9OX1NVQ0NFU1MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJIYXNDaGFuZ2VkOiBtb2RhbEZlZWRiYWNrLnVzZXJIYXNDaGFuZ2VkXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGFsRmVlZGJhY2sudXNlckhhc0NoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRTZXJ2aWNlLnB1Ymxpc2goRVZFTlRTLlVTRVJfSEFTX0NIQU5HRUQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBXZSBvbmx5IG5lZWQgdG8gcmVsb2FkIHdoZW4gdGhlIHVzZXIgaGFzIGNoYW5nZWQgYW5kIGFsbCBhdXRoZW50aWNhdGlvbiBmb3JtcyB3ZXJlIGNsb3NlZC5cbiAgICAgICAgICAgICAgICAgICAgICogVGhlcmUgY2FuIGJlIG1hbnkgYXV0aGVudGljYXRpb24gZm9ybXMgaWYgc29tZSBtb2R1bGVzIHVzZSBkaWZmZXJlbnQgKGZyb20gZGVmYXVsdCBvbmUpIGVuZCBwb2ludHMuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWF1dGhJblByb2Nlc3MgPSBsb2Rhc2hcbiAgICAgICAgICAgICAgICAgICAgICAgIC52YWx1ZXModGhpcy5yZWF1dGhJblByb2dyZXNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNvbWUoKGluUHJvY2VzczogYm9vbGVhbikgPT4gaW5Qcm9jZXNzKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbEZlZWRiYWNrLnVzZXJIYXNDaGFuZ2VkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhcmVhdXRoSW5Qcm9jZXNzICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dGhlbnRpY2F0aW9uTWFuYWdlciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRoZW50aWNhdGlvbk1hbmFnZXIub25Vc2VySGFzQ2hhbmdlZFxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0aGVudGljYXRpb25NYW5hZ2VyLm9uVXNlckhhc0NoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucmVhdXRoSW5Qcm9ncmVzc1tsb2dpbkRhdGEuYXV0aFVSSV0gPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsb2dvdXQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIC8vIEZpcnN0LCBpbmRpY2F0ZSB0aGUgc2VydmljZXMgdGhhdCBTbWFydEVkaXQgaXMgbG9nZ2luZyBvdXQuIFRoaXMgc2hvdWxkIGdpdmUgdGhlbSB0aGUgb3Bwb3J0dW5pdHkgdG8gY2xlYW4gdXAuXG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgbm90IHN5bmNocm9ub3VzIHNpbmNlIHNvbWUgY2xlYW4tdXAgbWlnaHQgYmUgbGVuZ3RoeSwgYW5kIGxvZ2dpbmcgb3V0IHNob3VsZCBiZSBmYXN0LlxuICAgICAgICByZXR1cm4gdGhpcy5ldmVudFNlcnZpY2UucHVibGlzaChFVkVOVFMuTE9HT1VUKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZVNlcnZpY2UucmVtb3ZlQWxsQXV0aFRva2VucygpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3NvQXV0aGVudGljYXRpb25IZWxwZXIuaXNBdXRvU1NPTWFpbigpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zc29BdXRoZW50aWNhdGlvbkhlbHBlci5sb2dvdXQoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5hdXRoZW50aWNhdGlvbk1hbmFnZXIgJiYgdGhpcy5hdXRoZW50aWNhdGlvbk1hbmFnZXIub25Mb2dvdXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmF1dGhlbnRpY2F0aW9uTWFuYWdlci5vbkxvZ291dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpc1JlQXV0aEluUHJvZ3Jlc3MoZW50cnlQb2ludDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5yZWF1dGhJblByb2dyZXNzW2VudHJ5UG9pbnRdID09PSB0cnVlKTtcbiAgICB9XG5cbiAgICBzZXRSZUF1dGhJblByb2dyZXNzKGVudHJ5UG9pbnQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aGlzLnJlYXV0aEluUHJvZ3Jlc3NbZW50cnlQb2ludF0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgaXNBdXRoZW50aWNhdGVkKHVybDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlckVudHJ5UG9pbnRzKHVybCkudGhlbigoZW50cnlQb2ludHM6IHN0cmluZ1tdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhdXRoVVJJID0gZW50cnlQb2ludHMgJiYgZW50cnlQb2ludHNbMF07XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCh0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldEF1dGhUb2tlbihcbiAgICAgICAgICAgICAgICBhdXRoVVJJXG4gICAgICAgICAgICApIGFzIHVua25vd24pIGFzIElBdXRoVG9rZW4pLnRoZW4oKGF1dGhUb2tlbjogSUF1dGhUb2tlbikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIWF1dGhUb2tlbjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIHdpbGwgdHJ5IGRldGVybWluZSBmaXJzdCByZWxldmFudCBhdXRoZW50aWNhdGlvbiBlbnRyeSBwb2ludCBmcm9tIGF1dGhlbnRpY2F0aW9uTWFwIGFuZCByZXRyaWV2ZSBwb3RlbnRpYWwgY2xpZW50IGNyZWRlbnRpYWxzIHRvIGJlIGFkZGVkIG9uIHRvcCBvZiB1c2VyIGNyZWRlbnRpYWxzXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9maW5kTG9naW5EYXRhKHJlc291cmNlOiBzdHJpbmcpOiBQcm9taXNlPElMb2dpbkRhdGE+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyRW50cnlQb2ludHMocmVzb3VyY2UpLnRoZW4oKGVudHJ5UG9pbnRzOiBzdHJpbmdbXSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShcbiAgICAgICAgICAgICAgICB0aGlzLnNoYXJlZERhdGFTZXJ2aWNlLmdldCgnY3JlZGVudGlhbHNNYXAnKS50aGVuKChjcmVkZW50aWFsc01hcDogQ2xvbmVhYmxlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcDogSUNyZWRlbnRpYWxzTWFwID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uKCgoY3JlZGVudGlhbHNNYXAgYXMgdW5rbm93bikgYXMgSUNyZWRlbnRpYWxzTWFwKSB8fCB7fSksXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5ERUZBVUxUX0NSRURFTlRJQUxTX01BUFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdXRoVVJJID0gZW50cnlQb2ludHNbMF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRoVVJJLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50Q3JlZGVudGlhbHM6IG1hcFthdXRoVVJJXVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2xhdW5jaEF1dGgobG9naW5EYXRhOiBJTG9naW5EYXRhKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRpb25zRmV0Y2hTZXJ2aWNlXG4gICAgICAgICAgICAud2FpdFRvQmVSZWFkeSgpXG4gICAgICAgICAgICAudGhlbigoKSA9PlxuICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yYWdlU2VydmljZS5pc0luaXRpYWxpemVkKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3NTZXJ2aWNlLmdldEJvb2xlYW4oJ3NtYXJ0ZWRpdC5zc28uZW5hYmxlZCcpXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC50aGVuKChbaXNGdWxsU2NyZWVuLCBzc29FbmFibGVkXTogW2Jvb2xlYW4sIGJvb2xlYW5dKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kYWxSZWYgPSB0aGlzLm1vZGFsU2VydmljZS5vcGVuPElMb2dpbkRhdGE+KHtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50OiBMb2dpbkRpYWxvZ0NvbXBvbmVudCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ubG9naW5EYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNGdWxsU2NyZWVuLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3NvRW5hYmxlZFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsUGFuZWxDbGFzczogJ3N1LWxvZ2luLWRpYWxvZy1jb250YWluZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzQmFja2Ryb3A6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGFsUmVmLmFmdGVyQ2xvc2VkLnN1YnNjcmliZShyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuIl19