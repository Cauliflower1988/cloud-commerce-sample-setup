/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
export class AbstractForm {
    constructor(component, control, inputs, persist, parent = null) {
        this.component = component;
        this.control = control;
        this.inputs = inputs;
        this.persist = persist;
        this.parent = parent;
        /**
         * Listen onto any property changes triggered by 'setInput' method.
         *
         * @type {Observable<InputPropertyChange>}
         */
        this.inputChanges = this.inputs.changes;
    }
    /**
     * Sets property and marks components for changes if property is decorated
     * with FormProperty.
     *
     * @param {keyof T} key
     * @param {T[keyof T]} value
     */
    setInput(key, value) {
        this.inputs.set(key, value);
    }
    /**
     * Retrieves a property.
     *
     * @param {keyof T} key
     * @returns {T[keyof T] | undefined}
     */
    getInput(key) {
        return this.inputs.get(key);
    }
    /**
     * Returns root form.
     */
    get root() {
        if (this.parent === null) {
            return this;
        }
        let root = this.parent;
        while (root.parent) {
            root = root.parent;
        }
        return root;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtZm9ybS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvZm9ybS1idWlsZGVyL21vZGVscy9hYnN0cmFjdC1mb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVVBLE1BQU0sT0FBZ0IsWUFBWTtJQVE5QixZQUNvQixTQUF3QixFQUN4QixPQUF3QixFQUN4QixNQUF1QixFQUN2QixPQUFnQixFQUN6QixTQUE4QixJQUFJO1FBSnpCLGNBQVMsR0FBVCxTQUFTLENBQWU7UUFDeEIsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFDeEIsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7UUFDdkIsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUN6QixXQUFNLEdBQU4sTUFBTSxDQUE0QjtRQVo3Qzs7OztXQUlHO1FBQ00saUJBQVksR0FBb0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFRMUUsQ0FBQztJQU9KOzs7Ozs7T0FNRztJQUNILFFBQVEsQ0FBSSxHQUFZLEVBQUUsS0FBaUI7UUFDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILFFBQVEsQ0FBSSxHQUFZO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUksR0FBRyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxJQUFJO1FBQ0osSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLElBQUksRUFBRTtZQUN0QixPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUV2QixPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDdEI7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBTQVAgU0Ugb3IgYW4gU0FQIGFmZmlsaWF0ZSBjb21wYW55LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQG1vZHVsZSBzbWFydHV0aWxzXG4gKi9cbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgQ29tcG9uZW50VHlwZSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBJbnB1dFByb3BlcnRpZXMsIElucHV0UHJvcGVydHlDaGFuZ2UgfSBmcm9tICcuL2lucHV0LXByb3BlcnRpZXMnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RGb3JtIHtcbiAgICAvKipcbiAgICAgKiBMaXN0ZW4gb250byBhbnkgcHJvcGVydHkgY2hhbmdlcyB0cmlnZ2VyZWQgYnkgJ3NldElucHV0JyBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7T2JzZXJ2YWJsZTxJbnB1dFByb3BlcnR5Q2hhbmdlPn1cbiAgICAgKi9cbiAgICByZWFkb25seSBpbnB1dENoYW5nZXM6IE9ic2VydmFibGU8SW5wdXRQcm9wZXJ0eUNoYW5nZT4gPSB0aGlzLmlucHV0cy5jaGFuZ2VzO1xuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgY29tcG9uZW50OiBDb21wb25lbnRUeXBlLFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgY29udHJvbDogQWJzdHJhY3RDb250cm9sLFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgaW5wdXRzOiBJbnB1dFByb3BlcnRpZXMsXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBwZXJzaXN0OiBib29sZWFuLFxuICAgICAgICBwdWJsaWMgcGFyZW50OiBBYnN0cmFjdEZvcm0gfCBudWxsID0gbnVsbFxuICAgICkge31cblxuICAgIC8qKlxuICAgICAqIEdldCBtYXBwZWQgdmFsdWVzIG9mIGZpZWxkcyB0byBiZSBwZXJzaXN0ZWQuXG4gICAgICovXG4gICAgYWJzdHJhY3QgZ2V0UGVyc2lzdGVkVmFsdWUoKTogYW55O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyBwcm9wZXJ0eSBhbmQgbWFya3MgY29tcG9uZW50cyBmb3IgY2hhbmdlcyBpZiBwcm9wZXJ0eSBpcyBkZWNvcmF0ZWRcbiAgICAgKiB3aXRoIEZvcm1Qcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7a2V5b2YgVH0ga2V5XG4gICAgICogQHBhcmFtIHtUW2tleW9mIFRdfSB2YWx1ZVxuICAgICAqL1xuICAgIHNldElucHV0PFQ+KGtleToga2V5b2YgVCwgdmFsdWU6IFRba2V5b2YgVF0pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pbnB1dHMuc2V0KGtleSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtrZXlvZiBUfSBrZXlcbiAgICAgKiBAcmV0dXJucyB7VFtrZXlvZiBUXSB8IHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBnZXRJbnB1dDxUPihrZXk6IGtleW9mIFQpOiBUW2tleW9mIFRdIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRzLmdldDxUPihrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgcm9vdCBmb3JtLlxuICAgICAqL1xuICAgIGdldCByb290KCk6IEFic3RyYWN0Rm9ybSB7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcm9vdCA9IHRoaXMucGFyZW50O1xuXG4gICAgICAgIHdoaWxlIChyb290LnBhcmVudCkge1xuICAgICAgICAgICAgcm9vdCA9IHJvb3QucGFyZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgfVxufVxuIl19