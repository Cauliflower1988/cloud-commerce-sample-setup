/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { APP_BOOTSTRAP_LISTENER, NgModule } from '@angular/core';
import { defaultRetryStrategyFactory, exponentialRetryStrategyFactory, linearRetryStrategyFactory, DefaultRetryStrategy, ExponentialRetry, ExponentialRetryStrategy, LinearRetry, LinearRetryStrategy, SimpleRetry } from './errors';
import { BackendInterceptor, HttpBackendService } from './backend';
import { FlawInjectionInterceptorModule } from './flaws';
import { HttpAuthInterceptor } from './http-auth.interceptor';
import { HttpErrorInterceptorService } from './http-error-interceptor.service';
import { HttpErrorInterceptor } from './http-error.interceptor';
var ɵ0 = defaultRetryStrategyFactory, ɵ1 = exponentialRetryStrategyFactory, ɵ2 = linearRetryStrategyFactory;
/**
 * @ngdoc overview
 * @name httpInterceptorModule
 *
 * @description
 * This module provides the functionality to add custom HTTP error interceptors.
 * Interceptors are used to execute code each time an HTTP request fails.
 *
 */
var HttpInterceptorModule = /** @class */ (function () {
    function HttpInterceptorModule() {
    }
    HttpInterceptorModule_1 = HttpInterceptorModule;
    HttpInterceptorModule.forRoot = function () {
        var HttpErrorInterceptorClasses = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            HttpErrorInterceptorClasses[_i] = arguments[_i];
        }
        return {
            ngModule: HttpInterceptorModule_1,
            providers: tslib_1.__spread(HttpErrorInterceptorClasses, [
                {
                    provide: HTTP_INTERCEPTORS,
                    useClass: HttpAuthInterceptor,
                    multi: true
                },
                {
                    provide: HTTP_INTERCEPTORS,
                    useClass: HttpErrorInterceptor,
                    multi: true
                },
                {
                    provide: HTTP_INTERCEPTORS,
                    useClass: BackendInterceptor,
                    multi: true
                },
                {
                    provide: APP_BOOTSTRAP_LISTENER,
                    useFactory: function (httpErrorInterceptorService) {
                        httpErrorInterceptorService.addInterceptors(HttpErrorInterceptorClasses);
                        return function (component) {
                            // an initializer useFactory must return a function
                        };
                    },
                    deps: [HttpErrorInterceptorService],
                    multi: true
                }
            ])
        };
    };
    var HttpInterceptorModule_1;
    HttpInterceptorModule = HttpInterceptorModule_1 = tslib_1.__decorate([
        NgModule({
            imports: [FlawInjectionInterceptorModule],
            providers: [
                SimpleRetry,
                LinearRetry,
                ExponentialRetry,
                {
                    provide: DefaultRetryStrategy,
                    useFactory: ɵ0,
                    deps: [SimpleRetry]
                },
                {
                    provide: ExponentialRetryStrategy,
                    useFactory: ɵ1,
                    deps: [ExponentialRetry]
                },
                {
                    provide: LinearRetryStrategy,
                    useFactory: ɵ2,
                    deps: [SimpleRetry]
                },
                HttpErrorInterceptorService,
                HttpBackendService
            ]
        })
    ], HttpInterceptorModule);
    return HttpInterceptorModule;
}());
export { HttpInterceptorModule };
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1pbnRlcmNlcHRvci5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac21hcnQvdXRpbHMvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9pbnRlcmNlcHRvcnMvaHR0cC1pbnRlcmNlcHRvci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRztBQUNILE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxzQkFBc0IsRUFBcUMsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXBHLE9BQU8sRUFDSCwyQkFBMkIsRUFDM0IsK0JBQStCLEVBQy9CLDBCQUEwQixFQUMxQixvQkFBb0IsRUFDcEIsZ0JBQWdCLEVBQ2hCLHdCQUF3QixFQUN4QixXQUFXLEVBQ1gsbUJBQW1CLEVBQ25CLFdBQVcsRUFDZCxNQUFNLFVBQVUsQ0FBQztBQUNsQixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkUsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3pELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO1NBb0J4QywyQkFBMkIsT0FLM0IsK0JBQStCLE9BSy9CLDBCQUEwQjtBQTNCbEQ7Ozs7Ozs7O0dBUUc7QUEwQkg7SUFBQTtJQXNDQSxDQUFDOzhCQXRDWSxxQkFBcUI7SUFDdkIsNkJBQU8sR0FBZDtRQUNJLHFDQUE4RDthQUE5RCxVQUE4RCxFQUE5RCxxQkFBOEQsRUFBOUQsSUFBOEQ7WUFBOUQsZ0RBQThEOztRQUU5RCxPQUFPO1lBQ0gsUUFBUSxFQUFFLHVCQUFxQjtZQUMvQixTQUFTLG1CQUNGLDJCQUEyQjtnQkFDOUI7b0JBQ0ksT0FBTyxFQUFFLGlCQUFpQjtvQkFDMUIsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0IsS0FBSyxFQUFFLElBQUk7aUJBQ2Q7Z0JBQ0Q7b0JBQ0ksT0FBTyxFQUFFLGlCQUFpQjtvQkFDMUIsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsS0FBSyxFQUFFLElBQUk7aUJBQ2Q7Z0JBQ0Q7b0JBQ0ksT0FBTyxFQUFFLGlCQUFpQjtvQkFDMUIsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsS0FBSyxFQUFFLElBQUk7aUJBQ2Q7Z0JBQ0Q7b0JBQ0ksT0FBTyxFQUFFLHNCQUFzQjtvQkFDL0IsVUFBVSxFQUFWLFVBQVcsMkJBQXdEO3dCQUMvRCwyQkFBMkIsQ0FBQyxlQUFlLENBQUMsMkJBQTJCLENBQUMsQ0FBQzt3QkFFekUsT0FBTyxVQUFDLFNBQTRCOzRCQUNoQyxtREFBbUQ7d0JBQ3ZELENBQUMsQ0FBQztvQkFDTixDQUFDO29CQUNELElBQUksRUFBRSxDQUFDLDJCQUEyQixDQUFDO29CQUNuQyxLQUFLLEVBQUUsSUFBSTtpQkFDZDtjQUNKO1NBQ0osQ0FBQztJQUNOLENBQUM7O0lBckNRLHFCQUFxQjtRQXpCakMsUUFBUSxDQUFDO1lBQ04sT0FBTyxFQUFFLENBQUMsOEJBQThCLENBQUM7WUFDekMsU0FBUyxFQUFFO2dCQUNQLFdBQVc7Z0JBQ1gsV0FBVztnQkFDWCxnQkFBZ0I7Z0JBQ2hCO29CQUNJLE9BQU8sRUFBRSxvQkFBb0I7b0JBQzdCLFVBQVUsSUFBNkI7b0JBQ3ZDLElBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQztpQkFDdEI7Z0JBQ0Q7b0JBQ0ksT0FBTyxFQUFFLHdCQUF3QjtvQkFDakMsVUFBVSxJQUFpQztvQkFDM0MsSUFBSSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7aUJBQzNCO2dCQUNEO29CQUNJLE9BQU8sRUFBRSxtQkFBbUI7b0JBQzVCLFVBQVUsSUFBNEI7b0JBQ3RDLElBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQztpQkFDdEI7Z0JBQ0QsMkJBQTJCO2dCQUMzQixrQkFBa0I7YUFDckI7U0FDSixDQUFDO09BQ1cscUJBQXFCLENBc0NqQztJQUFELDRCQUFDO0NBQUEsQUF0Q0QsSUFzQ0M7U0F0Q1kscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG5pbXBvcnQgeyBIVFRQX0lOVEVSQ0VQVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEFQUF9CT09UU1RSQVBfTElTVEVORVIsIENvbXBvbmVudFJlZiwgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENsYXNzIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgICBkZWZhdWx0UmV0cnlTdHJhdGVneUZhY3RvcnksXG4gICAgZXhwb25lbnRpYWxSZXRyeVN0cmF0ZWd5RmFjdG9yeSxcbiAgICBsaW5lYXJSZXRyeVN0cmF0ZWd5RmFjdG9yeSxcbiAgICBEZWZhdWx0UmV0cnlTdHJhdGVneSxcbiAgICBFeHBvbmVudGlhbFJldHJ5LFxuICAgIEV4cG9uZW50aWFsUmV0cnlTdHJhdGVneSxcbiAgICBMaW5lYXJSZXRyeSxcbiAgICBMaW5lYXJSZXRyeVN0cmF0ZWd5LFxuICAgIFNpbXBsZVJldHJ5XG59IGZyb20gJy4vZXJyb3JzJztcbmltcG9ydCB7IEJhY2tlbmRJbnRlcmNlcHRvciwgSHR0cEJhY2tlbmRTZXJ2aWNlIH0gZnJvbSAnLi9iYWNrZW5kJztcbmltcG9ydCB7IEZsYXdJbmplY3Rpb25JbnRlcmNlcHRvck1vZHVsZSB9IGZyb20gJy4vZmxhd3MnO1xuaW1wb3J0IHsgSHR0cEF1dGhJbnRlcmNlcHRvciB9IGZyb20gJy4vaHR0cC1hdXRoLmludGVyY2VwdG9yJztcbmltcG9ydCB7IEh0dHBFcnJvckludGVyY2VwdG9yU2VydmljZSB9IGZyb20gJy4vaHR0cC1lcnJvci1pbnRlcmNlcHRvci5zZXJ2aWNlJztcbmltcG9ydCB7IEh0dHBFcnJvckludGVyY2VwdG9yIH0gZnJvbSAnLi9odHRwLWVycm9yLmludGVyY2VwdG9yJztcbmltcG9ydCB7IElIdHRwRXJyb3JJbnRlcmNlcHRvciB9IGZyb20gJy4vaS1odHRwLWVycm9yLmludGVyY2VwdG9yJztcblxuLyoqXG4gKiBAbmdkb2Mgb3ZlcnZpZXdcbiAqIEBuYW1lIGh0dHBJbnRlcmNlcHRvck1vZHVsZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBtb2R1bGUgcHJvdmlkZXMgdGhlIGZ1bmN0aW9uYWxpdHkgdG8gYWRkIGN1c3RvbSBIVFRQIGVycm9yIGludGVyY2VwdG9ycy5cbiAqIEludGVyY2VwdG9ycyBhcmUgdXNlZCB0byBleGVjdXRlIGNvZGUgZWFjaCB0aW1lIGFuIEhUVFAgcmVxdWVzdCBmYWlscy5cbiAqXG4gKi9cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW0ZsYXdJbmplY3Rpb25JbnRlcmNlcHRvck1vZHVsZV0sXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIFNpbXBsZVJldHJ5LFxuICAgICAgICBMaW5lYXJSZXRyeSxcbiAgICAgICAgRXhwb25lbnRpYWxSZXRyeSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogRGVmYXVsdFJldHJ5U3RyYXRlZ3ksXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiBkZWZhdWx0UmV0cnlTdHJhdGVneUZhY3RvcnksXG4gICAgICAgICAgICBkZXBzOiBbU2ltcGxlUmV0cnldXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IEV4cG9uZW50aWFsUmV0cnlTdHJhdGVneSxcbiAgICAgICAgICAgIHVzZUZhY3Rvcnk6IGV4cG9uZW50aWFsUmV0cnlTdHJhdGVneUZhY3RvcnksXG4gICAgICAgICAgICBkZXBzOiBbRXhwb25lbnRpYWxSZXRyeV1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogTGluZWFyUmV0cnlTdHJhdGVneSxcbiAgICAgICAgICAgIHVzZUZhY3Rvcnk6IGxpbmVhclJldHJ5U3RyYXRlZ3lGYWN0b3J5LFxuICAgICAgICAgICAgZGVwczogW1NpbXBsZVJldHJ5XVxuICAgICAgICB9LFxuICAgICAgICBIdHRwRXJyb3JJbnRlcmNlcHRvclNlcnZpY2UsXG4gICAgICAgIEh0dHBCYWNrZW5kU2VydmljZVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgSHR0cEludGVyY2VwdG9yTW9kdWxlIHtcbiAgICBzdGF0aWMgZm9yUm9vdChcbiAgICAgICAgLi4uSHR0cEVycm9ySW50ZXJjZXB0b3JDbGFzc2VzOiBDbGFzczxJSHR0cEVycm9ySW50ZXJjZXB0b3I+W11cbiAgICApOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBIdHRwSW50ZXJjZXB0b3JNb2R1bGUsXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgICAgICAuLi5IdHRwRXJyb3JJbnRlcmNlcHRvckNsYXNzZXMsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBIVFRQX0lOVEVSQ0VQVE9SUyxcbiAgICAgICAgICAgICAgICAgICAgdXNlQ2xhc3M6IEh0dHBBdXRoSW50ZXJjZXB0b3IsXG4gICAgICAgICAgICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLFxuICAgICAgICAgICAgICAgICAgICB1c2VDbGFzczogSHR0cEVycm9ySW50ZXJjZXB0b3IsXG4gICAgICAgICAgICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLFxuICAgICAgICAgICAgICAgICAgICB1c2VDbGFzczogQmFja2VuZEludGVyY2VwdG9yLFxuICAgICAgICAgICAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBBUFBfQk9PVFNUUkFQX0xJU1RFTkVSLFxuICAgICAgICAgICAgICAgICAgICB1c2VGYWN0b3J5KGh0dHBFcnJvckludGVyY2VwdG9yU2VydmljZTogSHR0cEVycm9ySW50ZXJjZXB0b3JTZXJ2aWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBodHRwRXJyb3JJbnRlcmNlcHRvclNlcnZpY2UuYWRkSW50ZXJjZXB0b3JzKEh0dHBFcnJvckludGVyY2VwdG9yQ2xhc3Nlcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoY29tcG9uZW50OiBDb21wb25lbnRSZWY8YW55PikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuIGluaXRpYWxpemVyIHVzZUZhY3RvcnkgbXVzdCByZXR1cm4gYSBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZGVwczogW0h0dHBFcnJvckludGVyY2VwdG9yU2VydmljZV0sXG4gICAgICAgICAgICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cbn1cbiJdfQ==