/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as lodash from 'lodash';
import { HttpHeaders } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { URIBuilder } from '../../utils';
/** @internal */
export class RestClient {
    constructor(httpClient, url, identifierName) {
        this.httpClient = httpClient;
        this.url = url;
        this.identifierName = identifierName;
        this.DEFAULT_HEADERS = { 'x-requested-with': 'Angular' };
        this.DEFAULT_OPTIONS = { headers: {} };
        // will activate response headers appending
        this.metadataActivated = false;
        ///////////////////////////////////////////
        /// INTERNAL METHODS NEEDED FOR GATEWAY ///
        ///////////////////////////////////////////
        this.getMethodForSingleInstance = (name) => {
            switch (name) {
                case 'getById':
                    return (id, options = this.DEFAULT_OPTIONS) => this.getById(id, options);
                case 'get':
                    return (searchParams, options = this.DEFAULT_OPTIONS) => this.get(searchParams, options);
                case 'update':
                    return (payload, options = this.DEFAULT_OPTIONS) => this.update(payload, options);
                case 'save':
                    return (payload, options = this.DEFAULT_OPTIONS) => this.save(payload, options);
                case 'patch':
                    return (payload, options = this.DEFAULT_OPTIONS) => this.patch(payload, options);
                case 'remove':
                    return (payload, options = this.DEFAULT_OPTIONS) => this.remove(payload, options);
            }
        };
        this.getMethodForArray = (name) => {
            switch (name) {
                case 'query':
                    return (params, options = this.DEFAULT_OPTIONS) => this.query(params, options);
            }
        };
    }
    getById(identifier, options = this.DEFAULT_OPTIONS) {
        return this.addHeadersToBody(this.httpClient.get(`${this.url}/${identifier}`, {
            headers: this.buildRequestHeaders(options.headers || {}),
            observe: 'response'
        })).toPromise();
    }
    get(searchParams, options = this.DEFAULT_OPTIONS) {
        const params = this.convertToTypeMapOfString(searchParams);
        return this.addHeadersToBody(this.httpClient.get(this.interpolateParamsInURL(this.url, params), {
            params: this.formatQueryString(this.determineTrueQueryStringParams(this.url, searchParams)),
            headers: this.buildRequestHeaders(options.headers || {}),
            observe: 'response'
        })).toPromise();
    }
    query(searchParams, options = this.DEFAULT_OPTIONS) {
        const params = searchParams ? this.convertToTypeMapOfString(searchParams) : searchParams;
        return this.addHeadersToBody(this.httpClient.get(this.interpolateParamsInURL(this.url, params), {
            params: this.formatQueryString(this.determineTrueQueryStringParams(this.url, searchParams)),
            headers: this.buildRequestHeaders(options.headers || {}),
            observe: 'response'
        }))
            .pipe(map((arr) => arr || []))
            .toPromise();
    }
    page(pageable, options = this.DEFAULT_OPTIONS) {
        return (this.addHeadersToBody(this.httpClient.get(this.interpolateParamsInURL(this.url, pageable), {
            params: this.formatQueryString(this.determineTrueQueryStringParams(this.url, pageable)),
            headers: this.buildRequestHeaders(options.headers || {}),
            observe: 'response'
        }))
            // force typing to accept the fact that a page is never null
            .pipe(map((arr) => arr))
            .toPromise());
    }
    update(payload, options = this.DEFAULT_OPTIONS) {
        return this.performIdentifierCheck(payload)
            .then(() => this.buildUrlWithIdentifier(payload))
            .then((url) => this.httpClient
            .put(url, payload, {
            headers: this.buildRequestHeaders(options.headers || {})
        })
            .toPromise());
    }
    save(payload, options = this.DEFAULT_OPTIONS) {
        return this.httpClient
            .post(this.interpolateParamsInURL(this.url, payload), payload, {
            headers: this.buildRequestHeaders(options.headers || {})
        })
            .toPromise();
    }
    patch(payload, options = this.DEFAULT_OPTIONS) {
        return this.performIdentifierCheck(payload)
            .then(() => this.buildUrlWithIdentifier(payload))
            .then((url) => this.httpClient
            .patch(url, payload, {
            headers: this.buildRequestHeaders(options.headers || {})
        })
            .toPromise());
    }
    remove(payload, options = this.DEFAULT_OPTIONS) {
        return this.performIdentifierCheck(payload)
            .then(() => this.buildUrlWithIdentifier(payload))
            .then((url) => this.httpClient
            .delete(url, { headers: this.buildRequestHeaders(options.headers || {}) })
            .toPromise());
    }
    activateMetadata() {
        this.metadataActivated = true;
    }
    convertToTypeMapOfString(searchParams) {
        return lodash.mapValues(searchParams, (val) => String(val));
    }
    formatQueryString(_params) {
        return this.sortByKeys(_params);
    }
    addHeadersToBody(observable) {
        return observable.pipe(map((response) => {
            const data = response.body;
            if (this.metadataActivated && data) {
                // used by @Cached annotation
                data.headers = response.headers;
            }
            return data;
        }));
    }
    /*
     * interpolation URL placeholders interpolation with potential matches in queryString
     */
    interpolateParamsInURL(_url, payload) {
        // only keep params to be found in the URI or query params
        if (payload && typeof payload !== 'string') {
            return new URIBuilder(_url)
                .replaceParams(payload)
                .sanitize()
                .build();
        }
        else {
            return _url;
        }
    }
    /*
     * remove from queryString any param needed for URL placeholders interpolation
     */
    determineTrueQueryStringParams(url, payload) {
        return typeof payload === 'object'
            ? Object.keys(payload).reduce((prev, next) => {
                if (!new RegExp(':' + next + '/').test(url) &&
                    !new RegExp(':' + next + '$').test(url) &&
                    !new RegExp(':' + next + '&').test(url) &&
                    !lodash.isNil(payload[next])) {
                    prev[next] = payload[next];
                }
                return prev;
            }, {})
            : {};
    }
    sortByKeys(obj) {
        const keys = lodash.sortBy(lodash.keys(obj), (key) => {
            return key;
        });
        return lodash.zipObject(keys, lodash.map(keys, (key) => {
            return obj[key];
        }));
    }
    performIdentifierCheck(payload) {
        const identifier = typeof payload === 'string' ? payload : payload[this.identifierName];
        if (!identifier) {
            return Promise.reject('no data was found under the ' +
                identifier +
                ' field of object ' +
                JSON.stringify(payload) +
                ', it is necessary for update and remove operations');
        }
        return Promise.resolve();
    }
    buildUrlWithIdentifier(payload) {
        const identifier = typeof payload === 'string' ? payload : payload[this.identifierName];
        let url = this.interpolateParamsInURL(`${this.url}`, payload);
        url =
            url.includes('?') || this.url.includes(':' + this.identifierName)
                ? url
                : `${url}/${identifier}`;
        return Promise.resolve(url);
    }
    buildRequestHeaders(headers) {
        return new HttpHeaders(Object.assign({}, this.DEFAULT_HEADERS, headers));
    }
}
//# sourceMappingURL=data:application/json;base64,