/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { stringUtils } from '../../utils';
/** @internal */
var FingerPrintingService = /** @class */ (function () {
    function FingerPrintingService() {
        this._fingerprint = stringUtils.encode(this.getUserAgent() +
            this.getPlugins() +
            this.hasJava() +
            this.hasFlash() +
            this.hasLocalStorage() +
            this.hasSessionStorage() +
            this.hasCookie() +
            this.getTimeZone() +
            this.getLanguage() +
            this.getSystemLanguage() +
            this.hasCanvas());
    }
    /**
     * Get unique browser fingerprint information encoded in Base64.
     */
    FingerPrintingService.prototype.getFingerprint = function () {
        return this._fingerprint;
    };
    FingerPrintingService.prototype.getUserAgent = function () {
        return navigator.userAgent;
    };
    FingerPrintingService.prototype.getPlugins = function () {
        var plugins = [];
        for (var i = 0, l = navigator.plugins.length; i < l; i++) {
            if (navigator.plugins[i]) {
                plugins.push(navigator.plugins[i].name);
            }
        }
        return plugins.join(',');
    };
    FingerPrintingService.prototype.hasJava = function () {
        return navigator.javaEnabled();
    };
    FingerPrintingService.prototype.hasFlash = function () {
        return !!navigator.plugins.namedItem('Shockwave Flash');
    };
    FingerPrintingService.prototype.hasLocalStorage = function () {
        try {
            var hasLs = 'test-has-ls';
            localStorage.setItem(hasLs, hasLs);
            localStorage.removeItem(hasLs);
            return true;
        }
        catch (exception) {
            return false;
        }
    };
    FingerPrintingService.prototype.hasSessionStorage = function () {
        try {
            var hasSs = 'test-has-ss';
            sessionStorage.setItem(hasSs, hasSs);
            sessionStorage.removeItem(hasSs);
            return true;
        }
        catch (exception) {
            return false;
        }
    };
    FingerPrintingService.prototype.hasCookie = function () {
        return navigator.cookieEnabled;
    };
    FingerPrintingService.prototype.getTimeZone = function () {
        return String(String(new Date()).split('(')[1]).split(')')[0];
    };
    FingerPrintingService.prototype.getLanguage = function () {
        return navigator.language;
    };
    FingerPrintingService.prototype.getSystemLanguage = function () {
        return window.navigator.language;
    };
    FingerPrintingService.prototype.hasCanvas = function () {
        try {
            var elem = document.createElement('canvas');
            return !!(elem.getContext && elem.getContext('2d'));
        }
        catch (e) {
            return false;
        }
    };
    return FingerPrintingService;
}());
export { FingerPrintingService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmluZ2VyUHJpbnRpbmdTZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNtYXJ0L3V0aWxzLyIsInNvdXJjZXMiOlsic2VydmljZXMvYnJvd3Nlci9GaW5nZXJQcmludGluZ1NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBQ0gsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMxQyxnQkFBZ0I7QUFDaEI7SUFBQTtRQUNxQixpQkFBWSxHQUFXLFdBQVcsQ0FBQyxNQUFNLENBQ3RELElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDZixJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2YsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN0QixJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNoQixJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDbEIsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3hCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FDdkIsQ0FBQztJQTZFTixDQUFDO0lBM0VHOztPQUVHO0lBQ0gsOENBQWMsR0FBZDtRQUNJLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDO0lBRU8sNENBQVksR0FBcEI7UUFDSSxPQUFPLFNBQVMsQ0FBQyxTQUFTLENBQUM7SUFDL0IsQ0FBQztJQUVPLDBDQUFVLEdBQWxCO1FBQ0ksSUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ25CLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3RELElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDdEIsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzNDO1NBQ0o7UUFDRCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVPLHVDQUFPLEdBQWY7UUFDSSxPQUFPLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRU8sd0NBQVEsR0FBaEI7UUFDSSxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFTywrQ0FBZSxHQUF2QjtRQUNJLElBQUk7WUFDQSxJQUFNLEtBQUssR0FBRyxhQUFhLENBQUM7WUFDNUIsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDbkMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvQixPQUFPLElBQUksQ0FBQztTQUNmO1FBQUMsT0FBTyxTQUFTLEVBQUU7WUFDaEIsT0FBTyxLQUFLLENBQUM7U0FDaEI7SUFDTCxDQUFDO0lBRU8saURBQWlCLEdBQXpCO1FBQ0ksSUFBSTtZQUNBLElBQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQztZQUM1QixjQUFjLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNyQyxjQUFjLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pDLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFBQyxPQUFPLFNBQVMsRUFBRTtZQUNoQixPQUFPLEtBQUssQ0FBQztTQUNoQjtJQUNMLENBQUM7SUFFTyx5Q0FBUyxHQUFqQjtRQUNJLE9BQU8sU0FBUyxDQUFDLGFBQWEsQ0FBQztJQUNuQyxDQUFDO0lBRU8sMkNBQVcsR0FBbkI7UUFDSSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRU8sMkNBQVcsR0FBbkI7UUFDSSxPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUM7SUFDOUIsQ0FBQztJQUVPLGlEQUFpQixHQUF6QjtRQUNJLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7SUFDckMsQ0FBQztJQUVPLHlDQUFTLEdBQWpCO1FBQ0ksSUFBSTtZQUNBLElBQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDOUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUN2RDtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1IsT0FBTyxLQUFLLENBQUM7U0FDaEI7SUFDTCxDQUFDO0lBQ0wsNEJBQUM7QUFBRCxDQUFDLEFBMUZELElBMEZDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG5pbXBvcnQgeyBzdHJpbmdVdGlscyB9IGZyb20gJy4uLy4uL3V0aWxzJztcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjbGFzcyBGaW5nZXJQcmludGluZ1NlcnZpY2Uge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2ZpbmdlcnByaW50OiBzdHJpbmcgPSBzdHJpbmdVdGlscy5lbmNvZGUoXG4gICAgICAgIHRoaXMuZ2V0VXNlckFnZW50KCkgK1xuICAgICAgICAgICAgdGhpcy5nZXRQbHVnaW5zKCkgK1xuICAgICAgICAgICAgdGhpcy5oYXNKYXZhKCkgK1xuICAgICAgICAgICAgdGhpcy5oYXNGbGFzaCgpICtcbiAgICAgICAgICAgIHRoaXMuaGFzTG9jYWxTdG9yYWdlKCkgK1xuICAgICAgICAgICAgdGhpcy5oYXNTZXNzaW9uU3RvcmFnZSgpICtcbiAgICAgICAgICAgIHRoaXMuaGFzQ29va2llKCkgK1xuICAgICAgICAgICAgdGhpcy5nZXRUaW1lWm9uZSgpICtcbiAgICAgICAgICAgIHRoaXMuZ2V0TGFuZ3VhZ2UoKSArXG4gICAgICAgICAgICB0aGlzLmdldFN5c3RlbUxhbmd1YWdlKCkgK1xuICAgICAgICAgICAgdGhpcy5oYXNDYW52YXMoKVxuICAgICk7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdW5pcXVlIGJyb3dzZXIgZmluZ2VycHJpbnQgaW5mb3JtYXRpb24gZW5jb2RlZCBpbiBCYXNlNjQuXG4gICAgICovXG4gICAgZ2V0RmluZ2VycHJpbnQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbmdlcnByaW50O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0VXNlckFnZW50KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3IudXNlckFnZW50O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UGx1Z2lucygpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBwbHVnaW5zID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gbmF2aWdhdG9yLnBsdWdpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAobmF2aWdhdG9yLnBsdWdpbnNbaV0pIHtcbiAgICAgICAgICAgICAgICBwbHVnaW5zLnB1c2gobmF2aWdhdG9yLnBsdWdpbnNbaV0ubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBsdWdpbnMuam9pbignLCcpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFzSmF2YSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5qYXZhRW5hYmxlZCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFzRmxhc2goKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhIW5hdmlnYXRvci5wbHVnaW5zLm5hbWVkSXRlbSgnU2hvY2t3YXZlIEZsYXNoJyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYXNMb2NhbFN0b3JhZ2UoKTogYm9vbGVhbiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBoYXNMcyA9ICd0ZXN0LWhhcy1scyc7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShoYXNMcywgaGFzTHMpO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oaGFzTHMpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYXNTZXNzaW9uU3RvcmFnZSgpOiBib29sZWFuIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGhhc1NzID0gJ3Rlc3QtaGFzLXNzJztcbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oaGFzU3MsIGhhc1NzKTtcbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oaGFzU3MpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYXNDb29raWUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3IuY29va2llRW5hYmxlZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFRpbWVab25lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBTdHJpbmcoU3RyaW5nKG5ldyBEYXRlKCkpLnNwbGl0KCcoJylbMV0pLnNwbGl0KCcpJylbMF07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRMYW5ndWFnZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLmxhbmd1YWdlO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0U3lzdGVtTGFuZ3VhZ2UoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IubGFuZ3VhZ2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYXNDYW52YXMoKTogYm9vbGVhbiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICByZXR1cm4gISEoZWxlbS5nZXRDb250ZXh0ICYmIGVsZW0uZ2V0Q29udGV4dCgnMmQnKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==