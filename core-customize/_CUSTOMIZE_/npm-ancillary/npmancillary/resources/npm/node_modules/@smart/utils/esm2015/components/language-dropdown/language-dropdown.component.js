/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
import { Component, Inject } from '@angular/core';
import { LanguageService } from '../../services/language.service';
import { EVENT_SERVICE, LANGUAGE_SERVICE } from '../../constants';
import { LanguageDropdown } from './language-dropdown';
/**
 * @ngdoc component
 * @name  @smartutils.components:LanguageDropdownComponent
 *
 * @description
 * A component responsible for displaying and selecting application language. Uses {@link @smartutils.components:SelectComponent SelectComponent} to show language items
 *
 */
let LanguageDropdownComponent = class LanguageDropdownComponent extends LanguageDropdown {
    constructor(languageService, eventService) {
        super(languageService, eventService);
        this.eventService = eventService;
    }
};
LanguageDropdownComponent.ctorParameters = () => [
    { type: LanguageService, decorators: [{ type: Inject, args: [LANGUAGE_SERVICE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [EVENT_SERVICE,] }] }
];
LanguageDropdownComponent = tslib_1.__decorate([
    Component({
        selector: 'su-language-dropdown',
        template: `
        <su-select
            class="su-language-selector"
            [items]="items"
            [initialValue]="initialLanguage"
            (onItemSelected)="onSelectedLanguage($event)"
        >
        </su-select>
    `
    }),
    tslib_1.__param(0, Inject(LANGUAGE_SERVICE)),
    tslib_1.__param(1, Inject(EVENT_SERVICE)),
    tslib_1.__metadata("design:paramtypes", [LanguageService, Object])
], LanguageDropdownComponent);
export { LanguageDropdownComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZ2UtZHJvcGRvd24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNtYXJ0L3V0aWxzLyIsInNvdXJjZXMiOlsiY29tcG9uZW50cy9sYW5ndWFnZS1kcm9wZG93bi9sYW5ndWFnZS1kcm9wZG93bi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHbEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdkQ7Ozs7Ozs7R0FPRztBQWNILElBQWEseUJBQXlCLEdBQXRDLE1BQWEseUJBQTBCLFNBQVEsZ0JBQWdCO0lBQzNELFlBQzhCLGVBQWdDLEVBQzVCLFlBQTJCO1FBRXpELEtBQUssQ0FBQyxlQUFlLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFGUCxpQkFBWSxHQUFaLFlBQVksQ0FBZTtJQUc3RCxDQUFDO0NBQ0osQ0FBQTs7WUFMa0QsZUFBZSx1QkFBekQsTUFBTSxTQUFDLGdCQUFnQjs0Q0FDdkIsTUFBTSxTQUFDLGFBQWE7O0FBSGhCLHlCQUF5QjtJQVpyQyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsc0JBQXNCO1FBQ2hDLFFBQVEsRUFBRTs7Ozs7Ozs7S0FRVDtLQUNKLENBQUM7SUFHTyxtQkFBQSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtJQUN4QixtQkFBQSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUE7NkNBRHFCLGVBQWU7R0FGckQseUJBQXlCLENBT3JDO1NBUFkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9sYW5ndWFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IEVWRU5UX1NFUlZJQ0UsIExBTkdVQUdFX1NFUlZJQ0UgfSBmcm9tICcuLi8uLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgSUV2ZW50U2VydmljZSB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnO1xuXG5pbXBvcnQgeyBMYW5ndWFnZURyb3Bkb3duIH0gZnJvbSAnLi9sYW5ndWFnZS1kcm9wZG93bic7XG5cbi8qKlxuICogQG5nZG9jIGNvbXBvbmVudFxuICogQG5hbWUgIEBzbWFydHV0aWxzLmNvbXBvbmVudHM6TGFuZ3VhZ2VEcm9wZG93bkNvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBjb21wb25lbnQgcmVzcG9uc2libGUgZm9yIGRpc3BsYXlpbmcgYW5kIHNlbGVjdGluZyBhcHBsaWNhdGlvbiBsYW5ndWFnZS4gVXNlcyB7QGxpbmsgQHNtYXJ0dXRpbHMuY29tcG9uZW50czpTZWxlY3RDb21wb25lbnQgU2VsZWN0Q29tcG9uZW50fSB0byBzaG93IGxhbmd1YWdlIGl0ZW1zXG4gKlxuICovXG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnc3UtbGFuZ3VhZ2UtZHJvcGRvd24nLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxzdS1zZWxlY3RcbiAgICAgICAgICAgIGNsYXNzPVwic3UtbGFuZ3VhZ2Utc2VsZWN0b3JcIlxuICAgICAgICAgICAgW2l0ZW1zXT1cIml0ZW1zXCJcbiAgICAgICAgICAgIFtpbml0aWFsVmFsdWVdPVwiaW5pdGlhbExhbmd1YWdlXCJcbiAgICAgICAgICAgIChvbkl0ZW1TZWxlY3RlZCk9XCJvblNlbGVjdGVkTGFuZ3VhZ2UoJGV2ZW50KVwiXG4gICAgICAgID5cbiAgICAgICAgPC9zdS1zZWxlY3Q+XG4gICAgYFxufSlcbmV4cG9ydCBjbGFzcyBMYW5ndWFnZURyb3Bkb3duQ29tcG9uZW50IGV4dGVuZHMgTGFuZ3VhZ2VEcm9wZG93biB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoTEFOR1VBR0VfU0VSVklDRSkgbGFuZ3VhZ2VTZXJ2aWNlOiBMYW5ndWFnZVNlcnZpY2UsXG4gICAgICAgIEBJbmplY3QoRVZFTlRfU0VSVklDRSkgcHVibGljIGV2ZW50U2VydmljZTogSUV2ZW50U2VydmljZVxuICAgICkge1xuICAgICAgICBzdXBlcihsYW5ndWFnZVNlcnZpY2UsIGV2ZW50U2VydmljZSk7XG4gICAgfVxufVxuIl19