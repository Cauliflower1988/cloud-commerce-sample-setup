/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as lodash from 'lodash';
/**
 * @ngdoc service
 * @name @smartutils.services:CloneableUtils
 *
 * @description
 * utility service around Cloneable objects
 */
export class CloneableUtils {
    /**
     * @ngdoc method
     * @name @smartutils.services:CloneableUtils#makeCloneable
     * @methodOf @smartutils.services:CloneableUtils
     * @description
     * returns a "cloneable" version of an object.
     * Something is cloneable when it can be sent through W3C postMessage.
     * To this purpose, functions must be removed from the cloneable candidate.
     * @param {Object} json the object to be made cloneable
     * @returns {Cloneable} the cloneable copy of the object
     */
    makeCloneable(_json) {
        const json = lodash.cloneDeepWith(_json, (value) => {
            if (value !== undefined && value !== null && !this.isPrimitive(json)) {
                // is a promise
                if (value.then) {
                    return null;
                }
                else if (typeof value === 'function') {
                    return null;
                }
                else if (lodash.isElement(value)) {
                    return null;
                    // is yjQuery
                }
                else if (typeof value !== 'string' &&
                    value.hasOwnProperty('length') &&
                    !value.forEach) {
                    return null;
                }
                else {
                    return value;
                }
            }
            else {
                return value;
            }
        });
        if (json === undefined || json === null || this.isPrimitive(json)) {
            return json;
        }
        else if (json.hasOwnProperty('length') || json.forEach) {
            // Array, already taken care of by yjQuery
            return json.map((arrayElement) => this.makeCloneable(arrayElement));
        }
        else {
            // JSON
            return Object.keys(json).reduce((clone, directKey) => {
                if (directKey.indexOf('$') !== 0) {
                    clone[directKey] = this.makeCloneable(json[directKey]);
                }
                return clone;
            }, {});
        }
    }
    isPrimitive(value) {
        return typeof value === 'number' || typeof value === 'string' || typeof value === 'boolean';
    }
}
export const cloneableUtils = new CloneableUtils();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvbmVhYmxlLXV0aWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNtYXJ0L3V0aWxzLyIsInNvdXJjZXMiOlsidXRpbHMvY2xvbmVhYmxlLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUNILE9BQU8sS0FBSyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBR2pDOzs7Ozs7R0FNRztBQUNILE1BQU0sT0FBTyxjQUFjO0lBQ3ZCOzs7Ozs7Ozs7O09BVUc7SUFDSCxhQUFhLENBQUMsS0FBVTtRQUNwQixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQ3BELElBQUksS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDbEUsZUFBZTtnQkFDZixJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUU7b0JBQ1osT0FBTyxJQUFJLENBQUM7aUJBQ2Y7cUJBQU0sSUFBSSxPQUFPLEtBQUssS0FBSyxVQUFVLEVBQUU7b0JBQ3BDLE9BQU8sSUFBSSxDQUFDO2lCQUNmO3FCQUFNLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDaEMsT0FBTyxJQUFJLENBQUM7b0JBQ1osYUFBYTtpQkFDaEI7cUJBQU0sSUFDSCxPQUFPLEtBQUssS0FBSyxRQUFRO29CQUN6QixLQUFLLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQztvQkFDOUIsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUNoQjtvQkFDRSxPQUFPLElBQUksQ0FBQztpQkFDZjtxQkFBTTtvQkFDSCxPQUFPLEtBQUssQ0FBQztpQkFDaEI7YUFDSjtpQkFBTTtnQkFDSCxPQUFPLEtBQUssQ0FBQzthQUNoQjtRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxJQUFJLEtBQUssU0FBUyxJQUFJLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMvRCxPQUFPLElBQUksQ0FBQztTQUNmO2FBQU0sSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDdEQsMENBQTBDO1lBQzFDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFlBQWlCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQWMsQ0FBQztTQUN6RjthQUFNO1lBQ0gsT0FBTztZQUNQLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQzNCLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFO2dCQUNqQixJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUM5QixLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztpQkFDMUQ7Z0JBQ0QsT0FBTyxLQUFLLENBQUM7WUFDakIsQ0FBQyxFQUNELEVBQWEsQ0FDaEIsQ0FBQztTQUNMO0lBQ0wsQ0FBQztJQUVPLFdBQVcsQ0FBQyxLQUFVO1FBQzFCLE9BQU8sT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxPQUFPLEtBQUssS0FBSyxTQUFTLENBQUM7SUFDaEcsQ0FBQztDQUNKO0FBQ0QsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLElBQUksY0FBYyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBTQVAgU0Ugb3IgYW4gU0FQIGFmZmlsaWF0ZSBjb21wYW55LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQG1vZHVsZSBzbWFydHV0aWxzXG4gKi9cbmltcG9ydCAqIGFzIGxvZGFzaCBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgQ2xvbmVhYmxlLCBQYXlsb2FkIH0gZnJvbSAnLi4vZHRvcyc7XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lIEBzbWFydHV0aWxzLnNlcnZpY2VzOkNsb25lYWJsZVV0aWxzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiB1dGlsaXR5IHNlcnZpY2UgYXJvdW5kIENsb25lYWJsZSBvYmplY3RzXG4gKi9cbmV4cG9ydCBjbGFzcyBDbG9uZWFibGVVdGlscyB7XG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIEBzbWFydHV0aWxzLnNlcnZpY2VzOkNsb25lYWJsZVV0aWxzI21ha2VDbG9uZWFibGVcbiAgICAgKiBAbWV0aG9kT2YgQHNtYXJ0dXRpbHMuc2VydmljZXM6Q2xvbmVhYmxlVXRpbHNcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiByZXR1cm5zIGEgXCJjbG9uZWFibGVcIiB2ZXJzaW9uIG9mIGFuIG9iamVjdC5cbiAgICAgKiBTb21ldGhpbmcgaXMgY2xvbmVhYmxlIHdoZW4gaXQgY2FuIGJlIHNlbnQgdGhyb3VnaCBXM0MgcG9zdE1lc3NhZ2UuXG4gICAgICogVG8gdGhpcyBwdXJwb3NlLCBmdW5jdGlvbnMgbXVzdCBiZSByZW1vdmVkIGZyb20gdGhlIGNsb25lYWJsZSBjYW5kaWRhdGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGpzb24gdGhlIG9iamVjdCB0byBiZSBtYWRlIGNsb25lYWJsZVxuICAgICAqIEByZXR1cm5zIHtDbG9uZWFibGV9IHRoZSBjbG9uZWFibGUgY29weSBvZiB0aGUgb2JqZWN0XG4gICAgICovXG4gICAgbWFrZUNsb25lYWJsZShfanNvbjogYW55KTogQ2xvbmVhYmxlIHtcbiAgICAgICAgY29uc3QganNvbiA9IGxvZGFzaC5jbG9uZURlZXBXaXRoKF9qc29uLCAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwgJiYgIXRoaXMuaXNQcmltaXRpdmUoanNvbikpIHtcbiAgICAgICAgICAgICAgICAvLyBpcyBhIHByb21pc2VcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUudGhlbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxvZGFzaC5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAvLyBpcyB5alF1ZXJ5XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnbGVuZ3RoJykgJiZcbiAgICAgICAgICAgICAgICAgICAgIXZhbHVlLmZvckVhY2hcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGpzb24gPT09IHVuZGVmaW5lZCB8fCBqc29uID09PSBudWxsIHx8IHRoaXMuaXNQcmltaXRpdmUoanNvbikpIHtcbiAgICAgICAgICAgIHJldHVybiBqc29uO1xuICAgICAgICB9IGVsc2UgaWYgKGpzb24uaGFzT3duUHJvcGVydHkoJ2xlbmd0aCcpIHx8IGpzb24uZm9yRWFjaCkge1xuICAgICAgICAgICAgLy8gQXJyYXksIGFscmVhZHkgdGFrZW4gY2FyZSBvZiBieSB5alF1ZXJ5XG4gICAgICAgICAgICByZXR1cm4ganNvbi5tYXAoKGFycmF5RWxlbWVudDogYW55KSA9PiB0aGlzLm1ha2VDbG9uZWFibGUoYXJyYXlFbGVtZW50KSkgYXMgQ2xvbmVhYmxlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSlNPTlxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGpzb24pLnJlZHVjZShcbiAgICAgICAgICAgICAgICAoY2xvbmUsIGRpcmVjdEtleSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0S2V5LmluZGV4T2YoJyQnKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVbZGlyZWN0S2V5XSA9IHRoaXMubWFrZUNsb25lYWJsZShqc29uW2RpcmVjdEtleV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHt9IGFzIFBheWxvYWRcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGlzUHJpbWl0aXZlKHZhbHVlOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbiAgICB9XG59XG5leHBvcnQgY29uc3QgY2xvbmVhYmxlVXRpbHMgPSBuZXcgQ2xvbmVhYmxlVXRpbHMoKTtcbiJdfQ==