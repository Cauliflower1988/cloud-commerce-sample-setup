/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/* forbiddenNameSpaces useClass:false */
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { FlawInjectionInterceptor } from './flaw-injection.interceptor';
/** @internal */
let FlawInjectionInterceptorModule = class FlawInjectionInterceptorModule {
};
FlawInjectionInterceptorModule = tslib_1.__decorate([
    NgModule({
        imports: [],
        providers: [
            {
                provide: HTTP_INTERCEPTORS,
                useClass: FlawInjectionInterceptor,
                multi: true
            },
            {
                provide: APP_INITIALIZER,
                useFactory() {
                    FlawInjectionInterceptor.registerRequestFlaw({
                        test: (request) => /sites\/[\w-]+\//.test(request.url),
                        mutate: (request) => {
                            return request.clone({
                                url: request.url.replace(/sites\/([\w-]+)\//, 'sites/' + Math.random() + '/')
                            });
                        }
                    });
                    return (component) => {
                        // an initializer useFactory must return a function
                    };
                },
                multi: true
            }
        ]
    })
], FlawInjectionInterceptorModule);
export { FlawInjectionInterceptorModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhdy1pbmplY3Rpb24taW50ZXJjZXB0b3IuTW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNtYXJ0L3V0aWxzLyIsInNvdXJjZXMiOlsic2VydmljZXMvaW50ZXJjZXB0b3JzL2ZsYXdzL2ZsYXctaW5qZWN0aW9uLWludGVyY2VwdG9yLk1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHO0FBQ0gsd0NBQXdDO0FBQ3hDLE9BQU8sRUFBRSxlQUFlLEVBQWdCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RSxPQUFPLEVBQWUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUV4RSxnQkFBZ0I7QUFnQ2hCLElBQWEsOEJBQThCLEdBQTNDLE1BQWEsOEJBQThCO0NBQUcsQ0FBQTtBQUFqQyw4QkFBOEI7SUEvQjFDLFFBQVEsQ0FBQztRQUNOLE9BQU8sRUFBRSxFQUFFO1FBQ1gsU0FBUyxFQUFFO1lBQ1A7Z0JBQ0ksT0FBTyxFQUFFLGlCQUFpQjtnQkFDMUIsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMsS0FBSyxFQUFFLElBQUk7YUFDZDtZQUNEO2dCQUNJLE9BQU8sRUFBRSxlQUFlO2dCQUN4QixVQUFVO29CQUNOLHdCQUF3QixDQUFDLG1CQUFtQixDQUFDO3dCQUN6QyxJQUFJLEVBQUUsQ0FBQyxPQUF5QixFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQzt3QkFDeEUsTUFBTSxFQUFFLENBQUMsT0FBeUIsRUFBRSxFQUFFOzRCQUNsQyxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUM7Z0NBQ2pCLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FDcEIsbUJBQW1CLEVBQ25CLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUNqQzs2QkFDSixDQUFDLENBQUM7d0JBQ1AsQ0FBQztxQkFDSixDQUFDLENBQUM7b0JBRUgsT0FBTyxDQUFDLFNBQTRCLEVBQUUsRUFBRTt3QkFDcEMsbURBQW1EO29CQUN2RCxDQUFDLENBQUM7Z0JBQ04sQ0FBQztnQkFDRCxLQUFLLEVBQUUsSUFBSTthQUNkO1NBQ0o7S0FDSixDQUFDO0dBQ1csOEJBQThCLENBQUc7U0FBakMsOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG4vKiBmb3JiaWRkZW5OYW1lU3BhY2VzIHVzZUNsYXNzOmZhbHNlICovXG5pbXBvcnQgeyBBUFBfSU5JVElBTElaRVIsIENvbXBvbmVudFJlZiwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBSZXF1ZXN0LCBIVFRQX0lOVEVSQ0VQVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEZsYXdJbmplY3Rpb25JbnRlcmNlcHRvciB9IGZyb20gJy4vZmxhdy1pbmplY3Rpb24uaW50ZXJjZXB0b3InO1xuXG4vKiogQGludGVybmFsICovXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtdLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBIVFRQX0lOVEVSQ0VQVE9SUyxcbiAgICAgICAgICAgIHVzZUNsYXNzOiBGbGF3SW5qZWN0aW9uSW50ZXJjZXB0b3IsXG4gICAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgICAgICAgICB1c2VGYWN0b3J5KCkge1xuICAgICAgICAgICAgICAgIEZsYXdJbmplY3Rpb25JbnRlcmNlcHRvci5yZWdpc3RlclJlcXVlc3RGbGF3KHtcbiAgICAgICAgICAgICAgICAgICAgdGVzdDogKHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4pID0+IC9zaXRlc1xcL1tcXHctXStcXC8vLnRlc3QocmVxdWVzdC51cmwpLFxuICAgICAgICAgICAgICAgICAgICBtdXRhdGU6IChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdC5jbG9uZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiByZXF1ZXN0LnVybC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvc2l0ZXNcXC8oW1xcdy1dKylcXC8vLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2l0ZXMvJyArIE1hdGgucmFuZG9tKCkgKyAnLydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChjb21wb25lbnQ6IENvbXBvbmVudFJlZjxhbnk+KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFuIGluaXRpYWxpemVyIHVzZUZhY3RvcnkgbXVzdCByZXR1cm4gYSBmdW5jdGlvblxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgfVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgRmxhd0luamVjdGlvbkludGVyY2VwdG9yTW9kdWxlIHt9XG4iXX0=