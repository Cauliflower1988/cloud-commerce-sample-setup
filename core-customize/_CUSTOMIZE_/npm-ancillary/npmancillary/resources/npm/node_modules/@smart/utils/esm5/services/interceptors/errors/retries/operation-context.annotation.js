/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
import { annotationService } from '../../../annotation.service';
var operationContextName = 'OperationContextRegistered';
/**
 * @ngdoc object
 * @name @smartutils.object:@OperationContextRegistered
 * @description
 * Class level typescript {@link http://www.typescriptlang.org/docs/handbook/decorators.html decorator factory} is delegated to
 * {@link @smartutils.services:OperationContextService OperationContextService.register} and it provides the functionality
 * to register an url with  operation context(s).
 *
 * For example:
 * 1. @OperationContextRegistered('apiUrl', ['CMS', 'INTERACTIVE'])
 * 2. @OperationContextRegistered('apiUrl', 'TOOLING')
 *
 * @param {string} url
 * @param {string | string[]} operationContext
 */
export var OperationContextRegistered = annotationService.getClassAnnotationFactory(operationContextName);
export function OperationContextAnnotationFactory(injector, operationContextService, OPERATION_CONTEXT) {
    'ngInject';
    return annotationService.setClassAnnotationFactory(operationContextName, function (factoryArguments) {
        return function (instance, originalConstructor, invocationArguments) {
            originalConstructor.call.apply(originalConstructor, tslib_1.__spread([instance], invocationArguments));
            var url = injector.get(factoryArguments[0], factoryArguments[0]);
            if (typeof factoryArguments[1] === 'string') {
                var operationContext = OPERATION_CONTEXT[factoryArguments[1]];
                operationContextService.register(url, operationContext);
            }
            else if (Array.isArray(factoryArguments[1]) && factoryArguments[1].length > 0) {
                factoryArguments[1].forEach(function (element) {
                    operationContextService.register(url, OPERATION_CONTEXT[element]);
                });
            }
        };
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9uLWNvbnRleHQuYW5ub3RhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2ludGVyY2VwdG9ycy9lcnJvcnMvcmV0cmllcy9vcGVyYXRpb24tY29udGV4dC5hbm5vdGF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFNQSxPQUFPLEVBQUUsaUJBQWlCLEVBQTBCLE1BQU0sNkJBQTZCLENBQUM7QUFHeEYsSUFBTSxvQkFBb0IsR0FBRyw0QkFBNEIsQ0FBQztBQUUxRDs7Ozs7Ozs7Ozs7Ozs7R0FjRztBQUNILE1BQU0sQ0FBQyxJQUFNLDBCQUEwQixHQUFHLGlCQUFpQixDQUFDLHlCQUF5QixDQUNqRixvQkFBb0IsQ0FDaUQsQ0FBQztBQUUxRSxNQUFNLFVBQVUsaUNBQWlDLENBQzdDLFFBQWtCLEVBQ2xCLHVCQUFnRCxFQUNoRCxpQkFBbUM7SUFFbkMsVUFBVSxDQUFDO0lBQ1gsT0FBTyxpQkFBaUIsQ0FBQyx5QkFBeUIsQ0FBQyxvQkFBb0IsRUFBRSxVQUNyRSxnQkFBdUI7UUFFdkIsT0FBTyxVQUNILFFBQWEsRUFDYixtQkFBeUMsRUFDekMsbUJBQTBCO1lBRTFCLG1CQUFtQixDQUFDLElBQUksT0FBeEIsbUJBQW1CLG9CQUFNLFFBQVEsR0FBSyxtQkFBbUIsR0FBRTtZQUUzRCxJQUFNLEdBQUcsR0FBVyxRQUFRLENBQUMsR0FBRyxDQUFTLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFbkYsSUFBSSxPQUFPLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtnQkFDekMsSUFBTSxnQkFBZ0IsR0FBWSxpQkFBeUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNqRix1QkFBdUIsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUM7YUFDM0Q7aUJBQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDN0UsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBZTtvQkFDeEMsdUJBQXVCLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRyxpQkFBeUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUMvRSxDQUFDLENBQUMsQ0FBQzthQUNOO1FBQ0wsQ0FBQyxDQUFDO0lBQ04sQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG5pbXBvcnQgeyBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHlwZWRNYXAgfSBmcm9tICcuLi8uLi8uLi8uLi9kdG9zJztcbmltcG9ydCB7IGFubm90YXRpb25TZXJ2aWNlLCBDbGFzc0Fubm90YXRpb25GYWN0b3J5IH0gZnJvbSAnLi4vLi4vLi4vYW5ub3RhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IE9wZXJhdGlvbkNvbnRleHRTZXJ2aWNlIH0gZnJvbSAnLi9vcGVyYXRpb24tY29udGV4dC5zZXJ2aWNlJztcblxuY29uc3Qgb3BlcmF0aW9uQ29udGV4dE5hbWUgPSAnT3BlcmF0aW9uQ29udGV4dFJlZ2lzdGVyZWQnO1xuXG4vKipcbiAqIEBuZ2RvYyBvYmplY3RcbiAqIEBuYW1lIEBzbWFydHV0aWxzLm9iamVjdDpAT3BlcmF0aW9uQ29udGV4dFJlZ2lzdGVyZWRcbiAqIEBkZXNjcmlwdGlvblxuICogQ2xhc3MgbGV2ZWwgdHlwZXNjcmlwdCB7QGxpbmsgaHR0cDovL3d3dy50eXBlc2NyaXB0bGFuZy5vcmcvZG9jcy9oYW5kYm9vay9kZWNvcmF0b3JzLmh0bWwgZGVjb3JhdG9yIGZhY3Rvcnl9IGlzIGRlbGVnYXRlZCB0b1xuICoge0BsaW5rIEBzbWFydHV0aWxzLnNlcnZpY2VzOk9wZXJhdGlvbkNvbnRleHRTZXJ2aWNlIE9wZXJhdGlvbkNvbnRleHRTZXJ2aWNlLnJlZ2lzdGVyfSBhbmQgaXQgcHJvdmlkZXMgdGhlIGZ1bmN0aW9uYWxpdHlcbiAqIHRvIHJlZ2lzdGVyIGFuIHVybCB3aXRoICBvcGVyYXRpb24gY29udGV4dChzKS5cbiAqXG4gKiBGb3IgZXhhbXBsZTpcbiAqIDEuIEBPcGVyYXRpb25Db250ZXh0UmVnaXN0ZXJlZCgnYXBpVXJsJywgWydDTVMnLCAnSU5URVJBQ1RJVkUnXSlcbiAqIDIuIEBPcGVyYXRpb25Db250ZXh0UmVnaXN0ZXJlZCgnYXBpVXJsJywgJ1RPT0xJTkcnKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7c3RyaW5nIHwgc3RyaW5nW119IG9wZXJhdGlvbkNvbnRleHRcbiAqL1xuZXhwb3J0IGNvbnN0IE9wZXJhdGlvbkNvbnRleHRSZWdpc3RlcmVkID0gYW5ub3RhdGlvblNlcnZpY2UuZ2V0Q2xhc3NBbm5vdGF0aW9uRmFjdG9yeShcbiAgICBvcGVyYXRpb25Db250ZXh0TmFtZVxuKSBhcyAodXJsOiBzdHJpbmcsIG9wZXJhdGlvbkNvbnRleHQ6IHN0cmluZyB8IHN0cmluZ1tdKSA9PiBDbGFzc0RlY29yYXRvcjtcblxuZXhwb3J0IGZ1bmN0aW9uIE9wZXJhdGlvbkNvbnRleHRBbm5vdGF0aW9uRmFjdG9yeShcbiAgICBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgb3BlcmF0aW9uQ29udGV4dFNlcnZpY2U6IE9wZXJhdGlvbkNvbnRleHRTZXJ2aWNlLFxuICAgIE9QRVJBVElPTl9DT05URVhUOiBUeXBlZE1hcDxzdHJpbmc+XG4pOiBDbGFzc0Fubm90YXRpb25GYWN0b3J5IHwgbnVsbCB7XG4gICAgJ25nSW5qZWN0JztcbiAgICByZXR1cm4gYW5ub3RhdGlvblNlcnZpY2Uuc2V0Q2xhc3NBbm5vdGF0aW9uRmFjdG9yeShvcGVyYXRpb25Db250ZXh0TmFtZSwgZnVuY3Rpb24oXG4gICAgICAgIGZhY3RvcnlBcmd1bWVudHM6IGFueVtdXG4gICAgKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihcbiAgICAgICAgICAgIGluc3RhbmNlOiBhbnksXG4gICAgICAgICAgICBvcmlnaW5hbENvbnN0cnVjdG9yOiAoLi4ueDogYW55W10pID0+IGFueSxcbiAgICAgICAgICAgIGludm9jYXRpb25Bcmd1bWVudHM6IGFueVtdXG4gICAgICAgICkge1xuICAgICAgICAgICAgb3JpZ2luYWxDb25zdHJ1Y3Rvci5jYWxsKGluc3RhbmNlLCAuLi5pbnZvY2F0aW9uQXJndW1lbnRzKTtcblxuICAgICAgICAgICAgY29uc3QgdXJsOiBzdHJpbmcgPSBpbmplY3Rvci5nZXQ8c3RyaW5nPihmYWN0b3J5QXJndW1lbnRzWzBdLCBmYWN0b3J5QXJndW1lbnRzWzBdKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmYWN0b3J5QXJndW1lbnRzWzFdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wZXJhdGlvbkNvbnRleHQ6IHN0cmluZyA9IChPUEVSQVRJT05fQ09OVEVYVCBhcyBhbnkpW2ZhY3RvcnlBcmd1bWVudHNbMV1dO1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbkNvbnRleHRTZXJ2aWNlLnJlZ2lzdGVyKHVybCwgb3BlcmF0aW9uQ29udGV4dCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZmFjdG9yeUFyZ3VtZW50c1sxXSkgJiYgZmFjdG9yeUFyZ3VtZW50c1sxXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZmFjdG9yeUFyZ3VtZW50c1sxXS5mb3JFYWNoKChlbGVtZW50OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uQ29udGV4dFNlcnZpY2UucmVnaXN0ZXIodXJsLCAoT1BFUkFUSU9OX0NPTlRFWFQgYXMgYW55KVtlbGVtZW50XSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7XG59XG4iXX0=