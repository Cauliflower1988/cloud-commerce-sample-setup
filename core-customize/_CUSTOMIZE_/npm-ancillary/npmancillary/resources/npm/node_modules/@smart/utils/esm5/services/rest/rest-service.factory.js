/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as lodash from 'lodash';
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { RestClient } from './rest-client';
import { LogService } from '../log.service';
/** @internal */
var RestServiceFactory = /** @class */ (function () {
    function RestServiceFactory(httpClient) {
        this.httpClient = httpClient;
        this.map = new Map();
        this.basePath = null;
        this.DOMAIN = null;
        this.IDENTIFIER = 'identifier';
    }
    RestServiceFactory_1 = RestServiceFactory;
    RestServiceFactory.setGlobalBasePath = function (globalBasePath) {
        if (!RestServiceFactory_1.globalBasePath) {
            RestServiceFactory_1.globalBasePath = globalBasePath;
        }
        else {
            RestServiceFactory_1.logService.warn('The value of a global base path was already set. ' +
                'Update is not possible, the value remained unchanged!');
        }
    };
    RestServiceFactory.getGlobalBasePath = function () {
        return RestServiceFactory_1.globalBasePath ? RestServiceFactory_1.globalBasePath : '';
    };
    RestServiceFactory.prototype.setDomain = function (DOMAIN) {
        this.DOMAIN = DOMAIN;
    };
    RestServiceFactory.prototype.setBasePath = function (basePath) {
        this.basePath = basePath;
    };
    RestServiceFactory.prototype.get = function (uri, identifier) {
        if (identifier === void 0) { identifier = this.IDENTIFIER; }
        if (this.map.has(uri + identifier)) {
            return this.map.get(uri + identifier);
        }
        if (!/^https?\:\/\//.test(uri)) {
            var newBasePath = this.getNewBasePath();
            var basePathURI = lodash.isEmpty(newBasePath)
                ? uri
                : newBasePath + (/^\//.test(uri) ? uri : "/" + uri);
            uri = this.shouldAppendDomain(uri) ? this.DOMAIN + "/" + uri : basePathURI;
        }
        var restClient = new RestClient(this.httpClient, uri, identifier);
        this.map.set(uri + identifier, restClient);
        return restClient;
    };
    RestServiceFactory.prototype.shouldAppendDomain = function (uri) {
        return !!this.DOMAIN && !/^\//.test(uri);
    };
    RestServiceFactory.prototype.getNewBasePath = function () {
        return this.basePath ? this.basePath : RestServiceFactory_1.globalBasePath;
    };
    var RestServiceFactory_1;
    RestServiceFactory.globalBasePath = null;
    RestServiceFactory.logService = new LogService();
    RestServiceFactory.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    RestServiceFactory = RestServiceFactory_1 = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [HttpClient])
    ], RestServiceFactory);
    return RestServiceFactory;
}());
export { RestServiceFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdC1zZXJ2aWNlLmZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac21hcnQvdXRpbHMvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9yZXN0L3Jlc3Qtc2VydmljZS5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7QUFDSCxPQUFPLEtBQUssTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUNqQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUdsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU1QyxnQkFBZ0I7QUFFaEI7SUF1QkksNEJBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFMbEMsUUFBRyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7UUFDaEIsYUFBUSxHQUFrQixJQUFJLENBQUM7UUFDL0IsV0FBTSxHQUFrQixJQUFJLENBQUM7UUFDN0IsZUFBVSxHQUFXLFlBQVksQ0FBQztJQUVHLENBQUM7MkJBdkJyQyxrQkFBa0I7SUFDcEIsb0NBQWlCLEdBQXhCLFVBQXlCLGNBQXNCO1FBQzNDLElBQUksQ0FBQyxvQkFBa0IsQ0FBQyxjQUFjLEVBQUU7WUFDcEMsb0JBQWtCLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztTQUN0RDthQUFNO1lBQ0gsb0JBQWtCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDOUIsbURBQW1EO2dCQUMvQyx1REFBdUQsQ0FDOUQsQ0FBQztTQUNMO0lBQ0wsQ0FBQztJQUVNLG9DQUFpQixHQUF4QjtRQUNJLE9BQU8sb0JBQWtCLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxvQkFBa0IsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUN0RixDQUFDO0lBV0Qsc0NBQVMsR0FBVCxVQUFVLE1BQWM7UUFDcEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDekIsQ0FBQztJQUVELHdDQUFXLEdBQVgsVUFBWSxRQUFnQjtRQUN4QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUM3QixDQUFDO0lBRUQsZ0NBQUcsR0FBSCxVQUFPLEdBQVcsRUFBRSxVQUFvQztRQUFwQywyQkFBQSxFQUFBLGFBQXFCLElBQUksQ0FBQyxVQUFVO1FBQ3BELElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQyxFQUFFO1lBQ2hDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQyxDQUFDO1NBQ3pDO1FBRUQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDNUIsSUFBTSxXQUFXLEdBQWtCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN6RCxJQUFNLFdBQVcsR0FBVyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztnQkFDbkQsQ0FBQyxDQUFDLEdBQUc7Z0JBQ0wsQ0FBQyxDQUFDLFdBQVcsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBSSxHQUFLLENBQUMsQ0FBQztZQUV4RCxHQUFHLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBSSxJQUFJLENBQUMsTUFBTSxTQUFJLEdBQUssQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO1NBQzlFO1FBRUQsSUFBTSxVQUFVLEdBQWtCLElBQUksVUFBVSxDQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3RGLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDM0MsT0FBTyxVQUFVLENBQUM7SUFDdEIsQ0FBQztJQUVPLCtDQUFrQixHQUExQixVQUEyQixHQUFXO1FBQ2xDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTywyQ0FBYyxHQUF0QjtRQUNJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsb0JBQWtCLENBQUMsY0FBYyxDQUFDO0lBQzdFLENBQUM7O0lBMUNjLGlDQUFjLEdBQWtCLElBQUksQ0FBQztJQUNyQyw2QkFBVSxHQUFlLElBQUksVUFBVSxFQUFFLENBQUM7O2dCQU16QixVQUFVOztJQXZCakMsa0JBQWtCO1FBRDlCLFVBQVUsRUFBRTtpREF3QnVCLFVBQVU7T0F2QmpDLGtCQUFrQixDQTJEOUI7SUFBRCx5QkFBQztDQUFBLEFBM0RELElBMkRDO1NBM0RZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFNBUCBTRSBvciBhbiBTQVAgYWZmaWxpYXRlIGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbW9kdWxlIHNtYXJ0dXRpbHNcbiAqL1xuaW1wb3J0ICogYXMgbG9kYXNoIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSVJlc3RTZXJ2aWNlRmFjdG9yeSB9IGZyb20gJy4vaS1yZXN0LXNlcnZpY2UuZmFjdG9yeSc7XG5pbXBvcnQgeyBJUmVzdFNlcnZpY2UgfSBmcm9tICcuL2ktcmVzdC1zZXJ2aWNlJztcbmltcG9ydCB7IFJlc3RDbGllbnQgfSBmcm9tICcuL3Jlc3QtY2xpZW50JztcbmltcG9ydCB7IExvZ1NlcnZpY2UgfSBmcm9tICcuLi9sb2cuc2VydmljZSc7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBSZXN0U2VydmljZUZhY3RvcnkgaW1wbGVtZW50cyBJUmVzdFNlcnZpY2VGYWN0b3J5IHtcbiAgICBzdGF0aWMgc2V0R2xvYmFsQmFzZVBhdGgoZ2xvYmFsQmFzZVBhdGg6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAoIVJlc3RTZXJ2aWNlRmFjdG9yeS5nbG9iYWxCYXNlUGF0aCkge1xuICAgICAgICAgICAgUmVzdFNlcnZpY2VGYWN0b3J5Lmdsb2JhbEJhc2VQYXRoID0gZ2xvYmFsQmFzZVBhdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBSZXN0U2VydmljZUZhY3RvcnkubG9nU2VydmljZS53YXJuKFxuICAgICAgICAgICAgICAgICdUaGUgdmFsdWUgb2YgYSBnbG9iYWwgYmFzZSBwYXRoIHdhcyBhbHJlYWR5IHNldC4gJyArXG4gICAgICAgICAgICAgICAgICAgICdVcGRhdGUgaXMgbm90IHBvc3NpYmxlLCB0aGUgdmFsdWUgcmVtYWluZWQgdW5jaGFuZ2VkISdcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0R2xvYmFsQmFzZVBhdGgoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFJlc3RTZXJ2aWNlRmFjdG9yeS5nbG9iYWxCYXNlUGF0aCA/IFJlc3RTZXJ2aWNlRmFjdG9yeS5nbG9iYWxCYXNlUGF0aCA6ICcnO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGdsb2JhbEJhc2VQYXRoOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgICBwcml2YXRlIHN0YXRpYyBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlID0gbmV3IExvZ1NlcnZpY2UoKTtcbiAgICBwcml2YXRlIG1hcCA9IG5ldyBNYXAoKTtcbiAgICBwcml2YXRlIGJhc2VQYXRoOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgICBwcml2YXRlIERPTUFJTjogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gICAgcHJpdmF0ZSBJREVOVElGSUVSOiBzdHJpbmcgPSAnaWRlbnRpZmllcic7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHt9XG5cbiAgICBzZXREb21haW4oRE9NQUlOOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5ET01BSU4gPSBET01BSU47XG4gICAgfVxuXG4gICAgc2V0QmFzZVBhdGgoYmFzZVBhdGg6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmJhc2VQYXRoID0gYmFzZVBhdGg7XG4gICAgfVxuXG4gICAgZ2V0PFQ+KHVyaTogc3RyaW5nLCBpZGVudGlmaWVyOiBzdHJpbmcgPSB0aGlzLklERU5USUZJRVIpOiBJUmVzdFNlcnZpY2U8VD4ge1xuICAgICAgICBpZiAodGhpcy5tYXAuaGFzKHVyaSArIGlkZW50aWZpZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KHVyaSArIGlkZW50aWZpZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEvXmh0dHBzP1xcOlxcL1xcLy8udGVzdCh1cmkpKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdCYXNlUGF0aDogc3RyaW5nIHwgbnVsbCA9IHRoaXMuZ2V0TmV3QmFzZVBhdGgoKTtcbiAgICAgICAgICAgIGNvbnN0IGJhc2VQYXRoVVJJOiBzdHJpbmcgPSBsb2Rhc2guaXNFbXB0eShuZXdCYXNlUGF0aClcbiAgICAgICAgICAgICAgICA/IHVyaVxuICAgICAgICAgICAgICAgIDogbmV3QmFzZVBhdGggKyAoL15cXC8vLnRlc3QodXJpKSA/IHVyaSA6IGAvJHt1cml9YCk7XG5cbiAgICAgICAgICAgIHVyaSA9IHRoaXMuc2hvdWxkQXBwZW5kRG9tYWluKHVyaSkgPyBgJHt0aGlzLkRPTUFJTn0vJHt1cml9YCA6IGJhc2VQYXRoVVJJO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzdENsaWVudDogUmVzdENsaWVudDxUPiA9IG5ldyBSZXN0Q2xpZW50PFQ+KHRoaXMuaHR0cENsaWVudCwgdXJpLCBpZGVudGlmaWVyKTtcbiAgICAgICAgdGhpcy5tYXAuc2V0KHVyaSArIGlkZW50aWZpZXIsIHJlc3RDbGllbnQpO1xuICAgICAgICByZXR1cm4gcmVzdENsaWVudDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNob3VsZEFwcGVuZERvbWFpbih1cmk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLkRPTUFJTiAmJiAhL15cXC8vLnRlc3QodXJpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldE5ld0Jhc2VQYXRoKCk6IHN0cmluZyB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlUGF0aCA/IHRoaXMuYmFzZVBhdGggOiBSZXN0U2VydmljZUZhY3RvcnkuZ2xvYmFsQmFzZVBhdGg7XG4gICAgfVxufVxuIl19