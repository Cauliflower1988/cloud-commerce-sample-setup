/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/* tslint:disable:max-classes-per-file */
import * as tslib_1 from "tslib";
/**
 * @internal
 * Internal property on the constructor used for adding decorator metadata
 * so that it can be later picked up after component compilation.
 */
export var FORM_PROP = '_form_prop_';
/**
 * Base data PropDecorator.
 * @internal
 */
var PropDecorator = /** @class */ (function () {
    function PropDecorator(property) {
        this.property = property;
    }
    return PropDecorator;
}());
export { PropDecorator };
/**
 * @internal
 */
var InputPropDecorator = /** @class */ (function (_super) {
    tslib_1.__extends(InputPropDecorator, _super);
    function InputPropDecorator(property, alias) {
        var _this = _super.call(this, property) || this;
        _this.alias = alias ? alias : _this.property;
        return _this;
    }
    return InputPropDecorator;
}(PropDecorator));
export { InputPropDecorator };
/**
 * @internal
 */
var FormPropDecorator = /** @class */ (function (_super) {
    tslib_1.__extends(FormPropDecorator, _super);
    function FormPropDecorator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FormPropDecorator;
}(PropDecorator));
export { FormPropDecorator };
/**
 * @internal
 */
var ControlPropDecorator = /** @class */ (function (_super) {
    tslib_1.__extends(ControlPropDecorator, _super);
    function ControlPropDecorator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ControlPropDecorator;
}(PropDecorator));
export { ControlPropDecorator };
/**
 * Used for tagging dynamic inputs and adding them to the FORM_PROP property
 * of the target constructor.
 */
function makePropertyDecorator(factory) {
    return function (target, key) {
        var ctor = target.constructor;
        if (!ctor[FORM_PROP]) {
            ctor[FORM_PROP] = [];
        }
        ctor[FORM_PROP].push(factory(key));
    };
}
/**
 * Injects the AbstractForm for the dynamic form component.
 */
export function DynamicForm() {
    return makePropertyDecorator(function (key) { return new FormPropDecorator(key); });
}
/**
 * Injects the AbstractFormControl of the AbstractForm for the dynamic form component.
 */
export function DynamicFormControl() {
    return makePropertyDecorator(function (key) { return new ControlPropDecorator(key); });
}
/**
 * Injects a property of the AbstractForm for the dynamic form component.
 * Inputs are assigned from the FormSchema's 'inputs' property.
 * NOTE:
 * Property values are only available ngOnInit or onDynamicInputChange.
 * @param alias Use this alias to target a property of the AbstractForm. Defaults
 * to the assigned class property.
 * @example
 * <pre>
 *     @Component({ ... })
 *     export class DynamicFormComponent {
 *         @DynamicInput()
 *         property: string
 *     }
 * <pre>
 */
export var DynamicInput = function (alias) {
    if (alias === void 0) { alias = null; }
    return makePropertyDecorator(function (key) { return new InputPropDecorator(key, alias); });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvZm9ybS1idWlsZGVyL2RlY29yYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBQ0gseUNBQXlDOztBQUV6Qzs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLElBQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQztBQUV2Qzs7O0dBR0c7QUFDSDtJQUNJLHVCQUFtQixRQUFnQjtRQUFoQixhQUFRLEdBQVIsUUFBUSxDQUFRO0lBQUcsQ0FBQztJQUMzQyxvQkFBQztBQUFELENBQUMsQUFGRCxJQUVDOztBQUVEOztHQUVHO0FBQ0g7SUFBd0MsOENBQWE7SUFFakQsNEJBQVksUUFBZ0IsRUFBRSxLQUFvQjtRQUFsRCxZQUNJLGtCQUFNLFFBQVEsQ0FBQyxTQUVsQjtRQURHLEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxRQUFRLENBQUM7O0lBQy9DLENBQUM7SUFDTCx5QkFBQztBQUFELENBQUMsQUFORCxDQUF3QyxhQUFhLEdBTXBEOztBQUVEOztHQUVHO0FBQ0g7SUFBdUMsNkNBQWE7SUFBcEQ7O0lBQXNELENBQUM7SUFBRCx3QkFBQztBQUFELENBQUMsQUFBdkQsQ0FBdUMsYUFBYSxHQUFHOztBQUV2RDs7R0FFRztBQUNIO0lBQTBDLGdEQUFhO0lBQXZEOztJQUF5RCxDQUFDO0lBQUQsMkJBQUM7QUFBRCxDQUFDLEFBQTFELENBQTBDLGFBQWEsR0FBRzs7QUFFMUQ7OztHQUdHO0FBQ0gsU0FBUyxxQkFBcUIsQ0FBSSxPQUF1QztJQUNyRSxPQUFPLFVBQUksTUFBUyxFQUFFLEdBQVc7UUFDN0IsSUFBTSxJQUFJLEdBQUksTUFBYyxDQUFDLFdBQWtCLENBQUM7UUFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQ3hCO1FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN2QyxDQUFDLENBQUM7QUFDTixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsV0FBVztJQUN2QixPQUFPLHFCQUFxQixDQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsSUFBSSxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsRUFBMUIsQ0FBMEIsQ0FBQyxDQUFDO0FBQ3RFLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxrQkFBa0I7SUFDOUIsT0FBTyxxQkFBcUIsQ0FBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLElBQUksb0JBQW9CLENBQUMsR0FBRyxDQUFDLEVBQTdCLENBQTZCLENBQUMsQ0FBQztBQUN6RSxDQUFDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBQ0gsTUFBTSxDQUFDLElBQU0sWUFBWSxHQUFHLFVBQUMsS0FBMkI7SUFBM0Isc0JBQUEsRUFBQSxZQUEyQjtJQUNwRCxPQUFPLHFCQUFxQixDQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsSUFBSSxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQWxDLENBQWtDLENBQUMsQ0FBQztBQUM5RSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBTQVAgU0Ugb3IgYW4gU0FQIGFmZmlsaWF0ZSBjb21wYW55LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQG1vZHVsZSBzbWFydHV0aWxzXG4gKi9cbi8qIHRzbGludDpkaXNhYmxlOm1heC1jbGFzc2VzLXBlci1maWxlICovXG5cbi8qKlxuICogQGludGVybmFsXG4gKiBJbnRlcm5hbCBwcm9wZXJ0eSBvbiB0aGUgY29uc3RydWN0b3IgdXNlZCBmb3IgYWRkaW5nIGRlY29yYXRvciBtZXRhZGF0YVxuICogc28gdGhhdCBpdCBjYW4gYmUgbGF0ZXIgcGlja2VkIHVwIGFmdGVyIGNvbXBvbmVudCBjb21waWxhdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IEZPUk1fUFJPUCA9ICdfZm9ybV9wcm9wXyc7XG5cbi8qKlxuICogQmFzZSBkYXRhIFByb3BEZWNvcmF0b3IuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIFByb3BEZWNvcmF0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBwcm9wZXJ0eTogc3RyaW5nKSB7fVxufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgSW5wdXRQcm9wRGVjb3JhdG9yIGV4dGVuZHMgUHJvcERlY29yYXRvciB7XG4gICAgcHVibGljIGFsaWFzOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IocHJvcGVydHk6IHN0cmluZywgYWxpYXM6IHN0cmluZyB8IG51bGwpIHtcbiAgICAgICAgc3VwZXIocHJvcGVydHkpO1xuICAgICAgICB0aGlzLmFsaWFzID0gYWxpYXMgPyBhbGlhcyA6IHRoaXMucHJvcGVydHk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgRm9ybVByb3BEZWNvcmF0b3IgZXh0ZW5kcyBQcm9wRGVjb3JhdG9yIHt9XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBDb250cm9sUHJvcERlY29yYXRvciBleHRlbmRzIFByb3BEZWNvcmF0b3Ige31cblxuLyoqXG4gKiBVc2VkIGZvciB0YWdnaW5nIGR5bmFtaWMgaW5wdXRzIGFuZCBhZGRpbmcgdGhlbSB0byB0aGUgRk9STV9QUk9QIHByb3BlcnR5XG4gKiBvZiB0aGUgdGFyZ2V0IGNvbnN0cnVjdG9yLlxuICovXG5mdW5jdGlvbiBtYWtlUHJvcGVydHlEZWNvcmF0b3I8VD4oZmFjdG9yeTogKGtleTogc3RyaW5nKSA9PiBQcm9wRGVjb3JhdG9yKSB7XG4gICAgcmV0dXJuIDxDPih0YXJnZXQ6IEMsIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IGN0b3IgPSAodGFyZ2V0IGFzIGFueSkuY29uc3RydWN0b3IgYXMgYW55O1xuICAgICAgICBpZiAoIWN0b3JbRk9STV9QUk9QXSkge1xuICAgICAgICAgICAgY3RvcltGT1JNX1BST1BdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgY3RvcltGT1JNX1BST1BdLnB1c2goZmFjdG9yeShrZXkpKTtcbiAgICB9O1xufVxuXG4vKipcbiAqIEluamVjdHMgdGhlIEFic3RyYWN0Rm9ybSBmb3IgdGhlIGR5bmFtaWMgZm9ybSBjb21wb25lbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBEeW5hbWljRm9ybSgpIHtcbiAgICByZXR1cm4gbWFrZVByb3BlcnR5RGVjb3JhdG9yKChrZXkpID0+IG5ldyBGb3JtUHJvcERlY29yYXRvcihrZXkpKTtcbn1cblxuLyoqXG4gKiBJbmplY3RzIHRoZSBBYnN0cmFjdEZvcm1Db250cm9sIG9mIHRoZSBBYnN0cmFjdEZvcm0gZm9yIHRoZSBkeW5hbWljIGZvcm0gY29tcG9uZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gRHluYW1pY0Zvcm1Db250cm9sKCkge1xuICAgIHJldHVybiBtYWtlUHJvcGVydHlEZWNvcmF0b3IoKGtleSkgPT4gbmV3IENvbnRyb2xQcm9wRGVjb3JhdG9yKGtleSkpO1xufVxuXG4vKipcbiAqIEluamVjdHMgYSBwcm9wZXJ0eSBvZiB0aGUgQWJzdHJhY3RGb3JtIGZvciB0aGUgZHluYW1pYyBmb3JtIGNvbXBvbmVudC5cbiAqIElucHV0cyBhcmUgYXNzaWduZWQgZnJvbSB0aGUgRm9ybVNjaGVtYSdzICdpbnB1dHMnIHByb3BlcnR5LlxuICogTk9URTpcbiAqIFByb3BlcnR5IHZhbHVlcyBhcmUgb25seSBhdmFpbGFibGUgbmdPbkluaXQgb3Igb25EeW5hbWljSW5wdXRDaGFuZ2UuXG4gKiBAcGFyYW0gYWxpYXMgVXNlIHRoaXMgYWxpYXMgdG8gdGFyZ2V0IGEgcHJvcGVydHkgb2YgdGhlIEFic3RyYWN0Rm9ybS4gRGVmYXVsdHNcbiAqIHRvIHRoZSBhc3NpZ25lZCBjbGFzcyBwcm9wZXJ0eS5cbiAqIEBleGFtcGxlXG4gKiA8cHJlPlxuICogICAgIEBDb21wb25lbnQoeyAuLi4gfSlcbiAqICAgICBleHBvcnQgY2xhc3MgRHluYW1pY0Zvcm1Db21wb25lbnQge1xuICogICAgICAgICBARHluYW1pY0lucHV0KClcbiAqICAgICAgICAgcHJvcGVydHk6IHN0cmluZ1xuICogICAgIH1cbiAqIDxwcmU+XG4gKi9cbmV4cG9ydCBjb25zdCBEeW5hbWljSW5wdXQgPSAoYWxpYXM6IHN0cmluZyB8IG51bGwgPSBudWxsKSA9PiB7XG4gICAgcmV0dXJuIG1ha2VQcm9wZXJ0eURlY29yYXRvcigoa2V5KSA9PiBuZXcgSW5wdXRQcm9wRGVjb3JhdG9yKGtleSwgYWxpYXMpKTtcbn07XG4iXX0=