/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { HttpUtils } from '../../utils';
import { HttpErrorInterceptorService } from './http-error-interceptor.service';
/**
 * @ngdoc overview
 * @name httpErrorInterceptorServiceModule
 *
 * @description
 * This module provides the functionality to add custom HTTP error interceptors.
 * Interceptors are used to execute code each time an HTTP request fails.
 */
let HttpErrorInterceptor = class HttpErrorInterceptor {
    constructor(httpErrorInterceptorService, httpUtils) {
        this.httpErrorInterceptorService = httpErrorInterceptorService;
        this.httpUtils = httpUtils;
    }
    intercept(request, next) {
        return next.handle(request).pipe(catchError((error, caught) => {
            if (!this.httpUtils.isHTMLRequest(request, error)) {
                return this.httpErrorInterceptorService.responseError(request, error);
            }
            else {
                return throwError(error);
            }
        }));
    }
};
HttpErrorInterceptor.ctorParameters = () => [
    { type: HttpErrorInterceptorService },
    { type: HttpUtils }
];
HttpErrorInterceptor = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [HttpErrorInterceptorService,
        HttpUtils])
], HttpErrorInterceptor);
export { HttpErrorInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1lcnJvci5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2ludGVyY2VwdG9ycy9odHRwLWVycm9yLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFXQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDeEMsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFL0U7Ozs7Ozs7R0FPRztBQUVILElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0lBQzdCLFlBQ1ksMkJBQXdELEVBQ3hELFNBQW9CO1FBRHBCLGdDQUEyQixHQUEzQiwyQkFBMkIsQ0FBNkI7UUFDeEQsY0FBUyxHQUFULFNBQVMsQ0FBVztJQUM3QixDQUFDO0lBRUosU0FBUyxDQUFJLE9BQXVCLEVBQUUsSUFBaUI7UUFDbkQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDNUIsVUFBVSxDQUFDLENBQUMsS0FBd0IsRUFBRSxNQUFnQyxFQUFFLEVBQUU7WUFDdEUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRTtnQkFDL0MsT0FBTyxJQUFJLENBQUMsMkJBQTJCLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQzthQUN6RTtpQkFBTTtnQkFDSCxPQUFPLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUM1QjtRQUNMLENBQUMsQ0FBQyxDQUNMLENBQUM7SUFDTixDQUFDO0NBQ0osQ0FBQTs7WUFmNEMsMkJBQTJCO1lBQzdDLFNBQVM7O0FBSHZCLG9CQUFvQjtJQURoQyxVQUFVLEVBQUU7NkNBR2dDLDJCQUEyQjtRQUM3QyxTQUFTO0dBSHZCLG9CQUFvQixDQWlCaEM7U0FqQlksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG5pbXBvcnQge1xuICAgIEh0dHBFcnJvclJlc3BvbnNlLFxuICAgIEh0dHBFdmVudCxcbiAgICBIdHRwSGFuZGxlcixcbiAgICBIdHRwSW50ZXJjZXB0b3IsXG4gICAgSHR0cFJlcXVlc3Rcbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgdGhyb3dFcnJvciwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEh0dHBVdGlscyB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IEh0dHBFcnJvckludGVyY2VwdG9yU2VydmljZSB9IGZyb20gJy4vaHR0cC1lcnJvci1pbnRlcmNlcHRvci5zZXJ2aWNlJztcblxuLyoqXG4gKiBAbmdkb2Mgb3ZlcnZpZXdcbiAqIEBuYW1lIGh0dHBFcnJvckludGVyY2VwdG9yU2VydmljZU1vZHVsZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBtb2R1bGUgcHJvdmlkZXMgdGhlIGZ1bmN0aW9uYWxpdHkgdG8gYWRkIGN1c3RvbSBIVFRQIGVycm9yIGludGVyY2VwdG9ycy5cbiAqIEludGVyY2VwdG9ycyBhcmUgdXNlZCB0byBleGVjdXRlIGNvZGUgZWFjaCB0aW1lIGFuIEhUVFAgcmVxdWVzdCBmYWlscy5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEh0dHBFcnJvckludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBodHRwRXJyb3JJbnRlcmNlcHRvclNlcnZpY2U6IEh0dHBFcnJvckludGVyY2VwdG9yU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBodHRwVXRpbHM6IEh0dHBVdGlsc1xuICAgICkge31cblxuICAgIGludGVyY2VwdDxUPihyZXF1ZXN0OiBIdHRwUmVxdWVzdDxUPiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxUPj4ge1xuICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdCkucGlwZShcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSwgY2F1Z2h0OiBPYnNlcnZhYmxlPEh0dHBFdmVudDxUPj4pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaHR0cFV0aWxzLmlzSFRNTFJlcXVlc3QocmVxdWVzdCwgZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHBFcnJvckludGVyY2VwdG9yU2VydmljZS5yZXNwb25zZUVycm9yKHJlcXVlc3QsIGVycm9yKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=