/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as lodash from 'lodash';
export class Alert {
    constructor(_alertConf, ALERT_CONFIG_DEFAULTS, fundamentalAlertService, translateService) {
        this._alertConf = _alertConf;
        this.fundamentalAlertService = fundamentalAlertService;
        this.translateService = translateService;
        this._displayed = false;
        lodash.defaultsDeep(this._alertConf, lodash.cloneDeep(ALERT_CONFIG_DEFAULTS));
    }
    get alertConf() {
        return this._alertConf;
    }
    get message() {
        return this._alertConf.message;
    }
    get type() {
        return this._alertConf.type;
    }
    /**
     * Displays the alert to the user.
     */
    show() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.isDisplayed()) {
                return;
            }
            if (this._alertConf.message) {
                this._alertConf.message = yield this.translateService
                    .get(this._alertConf.message, this._alertConf.messagePlaceholders)
                    .toPromise();
            }
            const content = typeof this._alertConf.message !== 'undefined'
                ? this._alertConf.message
                : this._alertConf.component || '';
            this._alertRef = this.fundamentalAlertService.open(content, this._alertConf);
            this._alertRef.afterDismissed.subscribe(() => (this._displayed = false));
            this._displayed = true;
        });
    }
    /**
     * Hides the alert if it is currently being displayed to the user.
     */
    hide() {
        if (!this.isDisplayed()) {
            return;
        }
        this._alertRef.dismiss();
    }
    isDisplayed() {
        return this._displayed;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac21hcnQvdXRpbHMvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9hbGVydC9hbGVydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHO0FBQ0gsT0FBTyxLQUFLLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFTakMsTUFBTSxPQUFPLEtBQUs7SUFJZCxZQUNZLFVBQXdCLEVBQ2hDLHFCQUE2QyxFQUNyQyx1QkFBZ0QsRUFDaEQsZ0JBQWtDO1FBSGxDLGVBQVUsR0FBVixVQUFVLENBQWM7UUFFeEIsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtRQUNoRCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBUHRDLGVBQVUsR0FBWSxLQUFLLENBQUM7UUFTaEMsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFRCxJQUFJLFNBQVM7UUFDVCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQUksT0FBTztRQUNQLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUM7SUFDbkMsQ0FBQztJQUVELElBQUksSUFBSTtRQUNKLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFjLENBQUM7SUFDMUMsQ0FBQztJQUVEOztPQUVHO0lBQ1UsSUFBSTs7WUFDYixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRTtnQkFDcEIsT0FBTzthQUNWO1lBRUQsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRTtnQkFDekIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCO3FCQUNoRCxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQztxQkFDakUsU0FBUyxFQUFVLENBQUM7YUFDNUI7WUFFRCxNQUFNLE9BQU8sR0FDVCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxLQUFLLFdBQVc7Z0JBQzFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU87Z0JBQ3pCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUM7WUFDMUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDN0UsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBRXpFLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQzNCLENBQUM7S0FBQTtJQUVEOztPQUVHO0lBQ0ksSUFBSTtRQUNQLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDckIsT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRU0sV0FBVztRQUNkLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUMzQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBTQVAgU0Ugb3IgYW4gU0FQIGFmZmlsaWF0ZSBjb21wYW55LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQG1vZHVsZSBzbWFydHV0aWxzXG4gKi9cbmltcG9ydCAqIGFzIGxvZGFzaCBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBBbGVydENvbmZpZyBhcyBGdW5kYW1lbnRhbEFsZXJ0Q29uZmlnLFxuICAgIEFsZXJ0UmVmLFxuICAgIEFsZXJ0U2VydmljZSBhcyBGdW5kYW1lbnRhbEFsZXJ0U2VydmljZVxufSBmcm9tICdAZnVuZGFtZW50YWwtbmd4L2NvcmUnO1xuaW1wb3J0IHsgSUFsZXJ0Q29uZmlnIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBBbGVydCB7XG4gICAgcHJpdmF0ZSBfZGlzcGxheWVkOiBib29sZWFuID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBfYWxlcnRSZWYhOiBBbGVydFJlZjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIF9hbGVydENvbmY6IElBbGVydENvbmZpZyxcbiAgICAgICAgQUxFUlRfQ09ORklHX0RFRkFVTFRTOiBGdW5kYW1lbnRhbEFsZXJ0Q29uZmlnLFxuICAgICAgICBwcml2YXRlIGZ1bmRhbWVudGFsQWxlcnRTZXJ2aWNlOiBGdW5kYW1lbnRhbEFsZXJ0U2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSB0cmFuc2xhdGVTZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlXG4gICAgKSB7XG4gICAgICAgIGxvZGFzaC5kZWZhdWx0c0RlZXAodGhpcy5fYWxlcnRDb25mLCBsb2Rhc2guY2xvbmVEZWVwKEFMRVJUX0NPTkZJR19ERUZBVUxUUykpO1xuICAgIH1cblxuICAgIGdldCBhbGVydENvbmYoKTogSUFsZXJ0Q29uZmlnIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FsZXJ0Q29uZjtcbiAgICB9XG5cbiAgICBnZXQgbWVzc2FnZSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWxlcnRDb25mLm1lc3NhZ2U7XG4gICAgfVxuXG4gICAgZ2V0IHR5cGUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FsZXJ0Q29uZi50eXBlIGFzIHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNwbGF5cyB0aGUgYWxlcnQgdG8gdGhlIHVzZXIuXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIHNob3coKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmICh0aGlzLmlzRGlzcGxheWVkKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9hbGVydENvbmYubWVzc2FnZSkge1xuICAgICAgICAgICAgdGhpcy5fYWxlcnRDb25mLm1lc3NhZ2UgPSBhd2FpdCB0aGlzLnRyYW5zbGF0ZVNlcnZpY2VcbiAgICAgICAgICAgICAgICAuZ2V0KHRoaXMuX2FsZXJ0Q29uZi5tZXNzYWdlLCB0aGlzLl9hbGVydENvbmYubWVzc2FnZVBsYWNlaG9sZGVycylcbiAgICAgICAgICAgICAgICAudG9Qcm9taXNlPHN0cmluZz4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPVxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuX2FsZXJ0Q29uZi5tZXNzYWdlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgID8gdGhpcy5fYWxlcnRDb25mLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICA6IHRoaXMuX2FsZXJ0Q29uZi5jb21wb25lbnQgfHwgJyc7XG4gICAgICAgIHRoaXMuX2FsZXJ0UmVmID0gdGhpcy5mdW5kYW1lbnRhbEFsZXJ0U2VydmljZS5vcGVuKGNvbnRlbnQsIHRoaXMuX2FsZXJ0Q29uZik7XG4gICAgICAgIHRoaXMuX2FsZXJ0UmVmLmFmdGVyRGlzbWlzc2VkLnN1YnNjcmliZSgoKSA9PiAodGhpcy5fZGlzcGxheWVkID0gZmFsc2UpKTtcblxuICAgICAgICB0aGlzLl9kaXNwbGF5ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhpZGVzIHRoZSBhbGVydCBpZiBpdCBpcyBjdXJyZW50bHkgYmVpbmcgZGlzcGxheWVkIHRvIHRoZSB1c2VyLlxuICAgICAqL1xuICAgIHB1YmxpYyBoaWRlKCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuaXNEaXNwbGF5ZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fYWxlcnRSZWYuZGlzbWlzcygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBpc0Rpc3BsYXllZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc3BsYXllZDtcbiAgICB9XG59XG4iXX0=