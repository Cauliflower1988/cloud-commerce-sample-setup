/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
var HttpInterceptorModule_1;
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { APP_BOOTSTRAP_LISTENER, NgModule } from '@angular/core';
import { defaultRetryStrategyFactory, exponentialRetryStrategyFactory, linearRetryStrategyFactory, DefaultRetryStrategy, ExponentialRetry, ExponentialRetryStrategy, LinearRetry, LinearRetryStrategy, SimpleRetry } from './errors';
import { BackendInterceptor, HttpBackendService } from './backend';
import { FlawInjectionInterceptorModule } from './flaws';
import { HttpAuthInterceptor } from './http-auth.interceptor';
import { HttpErrorInterceptorService } from './http-error-interceptor.service';
import { HttpErrorInterceptor } from './http-error.interceptor';
const ɵ0 = defaultRetryStrategyFactory, ɵ1 = exponentialRetryStrategyFactory, ɵ2 = linearRetryStrategyFactory;
/**
 * @ngdoc overview
 * @name httpInterceptorModule
 *
 * @description
 * This module provides the functionality to add custom HTTP error interceptors.
 * Interceptors are used to execute code each time an HTTP request fails.
 *
 */
let HttpInterceptorModule = HttpInterceptorModule_1 = class HttpInterceptorModule {
    static forRoot(...HttpErrorInterceptorClasses) {
        return {
            ngModule: HttpInterceptorModule_1,
            providers: [
                ...HttpErrorInterceptorClasses,
                {
                    provide: HTTP_INTERCEPTORS,
                    useClass: HttpAuthInterceptor,
                    multi: true
                },
                {
                    provide: HTTP_INTERCEPTORS,
                    useClass: HttpErrorInterceptor,
                    multi: true
                },
                {
                    provide: HTTP_INTERCEPTORS,
                    useClass: BackendInterceptor,
                    multi: true
                },
                {
                    provide: APP_BOOTSTRAP_LISTENER,
                    useFactory(httpErrorInterceptorService) {
                        httpErrorInterceptorService.addInterceptors(HttpErrorInterceptorClasses);
                        return (component) => {
                            // an initializer useFactory must return a function
                        };
                    },
                    deps: [HttpErrorInterceptorService],
                    multi: true
                }
            ]
        };
    }
};
HttpInterceptorModule = HttpInterceptorModule_1 = tslib_1.__decorate([
    NgModule({
        imports: [FlawInjectionInterceptorModule],
        providers: [
            SimpleRetry,
            LinearRetry,
            ExponentialRetry,
            {
                provide: DefaultRetryStrategy,
                useFactory: ɵ0,
                deps: [SimpleRetry]
            },
            {
                provide: ExponentialRetryStrategy,
                useFactory: ɵ1,
                deps: [ExponentialRetry]
            },
            {
                provide: LinearRetryStrategy,
                useFactory: ɵ2,
                deps: [SimpleRetry]
            },
            HttpErrorInterceptorService,
            HttpBackendService
        ]
    })
], HttpInterceptorModule);
export { HttpInterceptorModule };
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1pbnRlcmNlcHRvci5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac21hcnQvdXRpbHMvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9pbnRlcmNlcHRvcnMvaHR0cC1pbnRlcmNlcHRvci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7O0dBR0c7QUFDSCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsc0JBQXNCLEVBQXFDLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVwRyxPQUFPLEVBQ0gsMkJBQTJCLEVBQzNCLCtCQUErQixFQUMvQiwwQkFBMEIsRUFDMUIsb0JBQW9CLEVBQ3BCLGdCQUFnQixFQUNoQix3QkFBd0IsRUFDeEIsV0FBVyxFQUNYLG1CQUFtQixFQUNuQixXQUFXLEVBQ2QsTUFBTSxVQUFVLENBQUM7QUFDbEIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25FLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN6RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztXQW9CeEMsMkJBQTJCLE9BSzNCLCtCQUErQixPQUsvQiwwQkFBMEI7QUEzQmxEOzs7Ozs7OztHQVFHO0FBMEJILElBQWEscUJBQXFCLDZCQUFsQyxNQUFhLHFCQUFxQjtJQUM5QixNQUFNLENBQUMsT0FBTyxDQUNWLEdBQUcsMkJBQTJEO1FBRTlELE9BQU87WUFDSCxRQUFRLEVBQUUsdUJBQXFCO1lBQy9CLFNBQVMsRUFBRTtnQkFDUCxHQUFHLDJCQUEyQjtnQkFDOUI7b0JBQ0ksT0FBTyxFQUFFLGlCQUFpQjtvQkFDMUIsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0IsS0FBSyxFQUFFLElBQUk7aUJBQ2Q7Z0JBQ0Q7b0JBQ0ksT0FBTyxFQUFFLGlCQUFpQjtvQkFDMUIsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsS0FBSyxFQUFFLElBQUk7aUJBQ2Q7Z0JBQ0Q7b0JBQ0ksT0FBTyxFQUFFLGlCQUFpQjtvQkFDMUIsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsS0FBSyxFQUFFLElBQUk7aUJBQ2Q7Z0JBQ0Q7b0JBQ0ksT0FBTyxFQUFFLHNCQUFzQjtvQkFDL0IsVUFBVSxDQUFDLDJCQUF3RDt3QkFDL0QsMkJBQTJCLENBQUMsZUFBZSxDQUFDLDJCQUEyQixDQUFDLENBQUM7d0JBRXpFLE9BQU8sQ0FBQyxTQUE0QixFQUFFLEVBQUU7NEJBQ3BDLG1EQUFtRDt3QkFDdkQsQ0FBQyxDQUFDO29CQUNOLENBQUM7b0JBQ0QsSUFBSSxFQUFFLENBQUMsMkJBQTJCLENBQUM7b0JBQ25DLEtBQUssRUFBRSxJQUFJO2lCQUNkO2FBQ0o7U0FDSixDQUFDO0lBQ04sQ0FBQztDQUNKLENBQUE7QUF0Q1kscUJBQXFCO0lBekJqQyxRQUFRLENBQUM7UUFDTixPQUFPLEVBQUUsQ0FBQyw4QkFBOEIsQ0FBQztRQUN6QyxTQUFTLEVBQUU7WUFDUCxXQUFXO1lBQ1gsV0FBVztZQUNYLGdCQUFnQjtZQUNoQjtnQkFDSSxPQUFPLEVBQUUsb0JBQW9CO2dCQUM3QixVQUFVLElBQTZCO2dCQUN2QyxJQUFJLEVBQUUsQ0FBQyxXQUFXLENBQUM7YUFDdEI7WUFDRDtnQkFDSSxPQUFPLEVBQUUsd0JBQXdCO2dCQUNqQyxVQUFVLElBQWlDO2dCQUMzQyxJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQzthQUMzQjtZQUNEO2dCQUNJLE9BQU8sRUFBRSxtQkFBbUI7Z0JBQzVCLFVBQVUsSUFBNEI7Z0JBQ3RDLElBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQzthQUN0QjtZQUNELDJCQUEyQjtZQUMzQixrQkFBa0I7U0FDckI7S0FDSixDQUFDO0dBQ1cscUJBQXFCLENBc0NqQztTQXRDWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBTQVAgU0Ugb3IgYW4gU0FQIGFmZmlsaWF0ZSBjb21wYW55LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQG1vZHVsZSBzbWFydHV0aWxzXG4gKi9cbmltcG9ydCB7IEhUVFBfSU5URVJDRVBUT1JTIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgQVBQX0JPT1RTVFJBUF9MSVNURU5FUiwgQ29tcG9uZW50UmVmLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2xhc3MgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQge1xuICAgIGRlZmF1bHRSZXRyeVN0cmF0ZWd5RmFjdG9yeSxcbiAgICBleHBvbmVudGlhbFJldHJ5U3RyYXRlZ3lGYWN0b3J5LFxuICAgIGxpbmVhclJldHJ5U3RyYXRlZ3lGYWN0b3J5LFxuICAgIERlZmF1bHRSZXRyeVN0cmF0ZWd5LFxuICAgIEV4cG9uZW50aWFsUmV0cnksXG4gICAgRXhwb25lbnRpYWxSZXRyeVN0cmF0ZWd5LFxuICAgIExpbmVhclJldHJ5LFxuICAgIExpbmVhclJldHJ5U3RyYXRlZ3ksXG4gICAgU2ltcGxlUmV0cnlcbn0gZnJvbSAnLi9lcnJvcnMnO1xuaW1wb3J0IHsgQmFja2VuZEludGVyY2VwdG9yLCBIdHRwQmFja2VuZFNlcnZpY2UgfSBmcm9tICcuL2JhY2tlbmQnO1xuaW1wb3J0IHsgRmxhd0luamVjdGlvbkludGVyY2VwdG9yTW9kdWxlIH0gZnJvbSAnLi9mbGF3cyc7XG5pbXBvcnQgeyBIdHRwQXV0aEludGVyY2VwdG9yIH0gZnJvbSAnLi9odHRwLWF1dGguaW50ZXJjZXB0b3InO1xuaW1wb3J0IHsgSHR0cEVycm9ySW50ZXJjZXB0b3JTZXJ2aWNlIH0gZnJvbSAnLi9odHRwLWVycm9yLWludGVyY2VwdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgSHR0cEVycm9ySW50ZXJjZXB0b3IgfSBmcm9tICcuL2h0dHAtZXJyb3IuaW50ZXJjZXB0b3InO1xuaW1wb3J0IHsgSUh0dHBFcnJvckludGVyY2VwdG9yIH0gZnJvbSAnLi9pLWh0dHAtZXJyb3IuaW50ZXJjZXB0b3InO1xuXG4vKipcbiAqIEBuZ2RvYyBvdmVydmlld1xuICogQG5hbWUgaHR0cEludGVyY2VwdG9yTW9kdWxlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIG1vZHVsZSBwcm92aWRlcyB0aGUgZnVuY3Rpb25hbGl0eSB0byBhZGQgY3VzdG9tIEhUVFAgZXJyb3IgaW50ZXJjZXB0b3JzLlxuICogSW50ZXJjZXB0b3JzIGFyZSB1c2VkIHRvIGV4ZWN1dGUgY29kZSBlYWNoIHRpbWUgYW4gSFRUUCByZXF1ZXN0IGZhaWxzLlxuICpcbiAqL1xuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbRmxhd0luamVjdGlvbkludGVyY2VwdG9yTW9kdWxlXSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgU2ltcGxlUmV0cnksXG4gICAgICAgIExpbmVhclJldHJ5LFxuICAgICAgICBFeHBvbmVudGlhbFJldHJ5LFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBEZWZhdWx0UmV0cnlTdHJhdGVneSxcbiAgICAgICAgICAgIHVzZUZhY3Rvcnk6IGRlZmF1bHRSZXRyeVN0cmF0ZWd5RmFjdG9yeSxcbiAgICAgICAgICAgIGRlcHM6IFtTaW1wbGVSZXRyeV1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogRXhwb25lbnRpYWxSZXRyeVN0cmF0ZWd5LFxuICAgICAgICAgICAgdXNlRmFjdG9yeTogZXhwb25lbnRpYWxSZXRyeVN0cmF0ZWd5RmFjdG9yeSxcbiAgICAgICAgICAgIGRlcHM6IFtFeHBvbmVudGlhbFJldHJ5XVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBMaW5lYXJSZXRyeVN0cmF0ZWd5LFxuICAgICAgICAgICAgdXNlRmFjdG9yeTogbGluZWFyUmV0cnlTdHJhdGVneUZhY3RvcnksXG4gICAgICAgICAgICBkZXBzOiBbU2ltcGxlUmV0cnldXG4gICAgICAgIH0sXG4gICAgICAgIEh0dHBFcnJvckludGVyY2VwdG9yU2VydmljZSxcbiAgICAgICAgSHR0cEJhY2tlbmRTZXJ2aWNlXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBIdHRwSW50ZXJjZXB0b3JNb2R1bGUge1xuICAgIHN0YXRpYyBmb3JSb290KFxuICAgICAgICAuLi5IdHRwRXJyb3JJbnRlcmNlcHRvckNsYXNzZXM6IENsYXNzPElIdHRwRXJyb3JJbnRlcmNlcHRvcj5bXVxuICAgICk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IEh0dHBJbnRlcmNlcHRvck1vZHVsZSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgIC4uLkh0dHBFcnJvckludGVyY2VwdG9yQ2xhc3NlcyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLFxuICAgICAgICAgICAgICAgICAgICB1c2VDbGFzczogSHR0cEF1dGhJbnRlcmNlcHRvcixcbiAgICAgICAgICAgICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsXG4gICAgICAgICAgICAgICAgICAgIHVzZUNsYXNzOiBIdHRwRXJyb3JJbnRlcmNlcHRvcixcbiAgICAgICAgICAgICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsXG4gICAgICAgICAgICAgICAgICAgIHVzZUNsYXNzOiBCYWNrZW5kSW50ZXJjZXB0b3IsXG4gICAgICAgICAgICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGU6IEFQUF9CT09UU1RSQVBfTElTVEVORVIsXG4gICAgICAgICAgICAgICAgICAgIHVzZUZhY3RvcnkoaHR0cEVycm9ySW50ZXJjZXB0b3JTZXJ2aWNlOiBIdHRwRXJyb3JJbnRlcmNlcHRvclNlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBFcnJvckludGVyY2VwdG9yU2VydmljZS5hZGRJbnRlcmNlcHRvcnMoSHR0cEVycm9ySW50ZXJjZXB0b3JDbGFzc2VzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjb21wb25lbnQ6IENvbXBvbmVudFJlZjxhbnk+KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW4gaW5pdGlhbGl6ZXIgdXNlRmFjdG9yeSBtdXN0IHJldHVybiBhIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkZXBzOiBbSHR0cEVycm9ySW50ZXJjZXB0b3JTZXJ2aWNlXSxcbiAgICAgICAgICAgICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxufVxuIl19