/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * @ngdoc service
 * @name @smartutils.services:BooleanUtils
 *
 * @description
 * utility service around booleans.
 */
export class BooleanUtils {
    /**
     * @ngdoc method
     * @name @smartutils.services:BooleanUtils#areAllTruthy
     * @methodOf @smartutils.services:BooleanUtils
     * @description
     * Iterate on the given array of Functions, return true if each function returns true
     *
     * @param {Array} arguments the functions
     *
     * @return {Boolean} true if every function returns true
     */
    areAllTruthy(...functions) {
        return function () {
            const args = arguments;
            return functions.every((f) => {
                return f && f.apply(f, args);
            });
        };
    }
    /**
     * @ngdoc method
     * @name @smartutils.services:BooleanUtils#isAnyTruthy
     * @methodOf @smartutils.services:BooleanUtils
     *
     * @description
     * Iterate on the given array of Functions, return true if at least one function returns true
     *
     * @param {Array} arguments the functions
     *
     * @return {Boolean} true if at least one function returns true
     */
    isAnyTruthy(...functions) {
        return function () {
            const args = arguments;
            return functions.some((f) => {
                return f && f.apply(f, args);
            });
        };
    }
}
export const booleanUtils = new BooleanUtils();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vbGVhbi11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbInV0aWxzL2Jvb2xlYW4tdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUg7Ozs7OztHQU1HO0FBQ0gsTUFBTSxPQUFPLFlBQVk7SUFDckI7Ozs7Ozs7Ozs7T0FVRztJQUNILFlBQVksQ0FBQyxHQUFHLFNBQTBDO1FBQ3RELE9BQU87WUFDSCxNQUFNLElBQUksR0FBRyxTQUFTLENBQUM7WUFDdkIsT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUU7Z0JBQzlCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUNEOzs7Ozs7Ozs7OztPQVdHO0lBQ0gsV0FBVyxDQUFDLEdBQUcsU0FBMEM7UUFDckQsT0FBTztZQUNILE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQztZQUN2QixPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRTtnQkFDN0IsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDakMsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUM7SUFDTixDQUFDO0NBQ0o7QUFFRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFNBUCBTRSBvciBhbiBTQVAgYWZmaWxpYXRlIGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbW9kdWxlIHNtYXJ0dXRpbHNcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSBAc21hcnR1dGlscy5zZXJ2aWNlczpCb29sZWFuVXRpbHNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIHV0aWxpdHkgc2VydmljZSBhcm91bmQgYm9vbGVhbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBCb29sZWFuVXRpbHMge1xuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBAc21hcnR1dGlscy5zZXJ2aWNlczpCb29sZWFuVXRpbHMjYXJlQWxsVHJ1dGh5XG4gICAgICogQG1ldGhvZE9mIEBzbWFydHV0aWxzLnNlcnZpY2VzOkJvb2xlYW5VdGlsc1xuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIEl0ZXJhdGUgb24gdGhlIGdpdmVuIGFycmF5IG9mIEZ1bmN0aW9ucywgcmV0dXJuIHRydWUgaWYgZWFjaCBmdW5jdGlvbiByZXR1cm5zIHRydWVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3VtZW50cyB0aGUgZnVuY3Rpb25zXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGV2ZXJ5IGZ1bmN0aW9uIHJldHVybnMgdHJ1ZVxuICAgICAqL1xuICAgIGFyZUFsbFRydXRoeSguLi5mdW5jdGlvbnM6ICgoLi4uYXJnczogYW55W10pID0+IGJvb2xlYW4pW10pOiAoLi4uYXJnczogYW55W10pID0+IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKTogYm9vbGVhbiB7XG4gICAgICAgICAgICBjb25zdCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9ucy5ldmVyeSgoZjogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGYgJiYgZi5hcHBseShmLCBhcmdzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgQHNtYXJ0dXRpbHMuc2VydmljZXM6Qm9vbGVhblV0aWxzI2lzQW55VHJ1dGh5XG4gICAgICogQG1ldGhvZE9mIEBzbWFydHV0aWxzLnNlcnZpY2VzOkJvb2xlYW5VdGlsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogSXRlcmF0ZSBvbiB0aGUgZ2l2ZW4gYXJyYXkgb2YgRnVuY3Rpb25zLCByZXR1cm4gdHJ1ZSBpZiBhdCBsZWFzdCBvbmUgZnVuY3Rpb24gcmV0dXJucyB0cnVlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmd1bWVudHMgdGhlIGZ1bmN0aW9uc1xuICAgICAqXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBhdCBsZWFzdCBvbmUgZnVuY3Rpb24gcmV0dXJucyB0cnVlXG4gICAgICovXG4gICAgaXNBbnlUcnV0aHkoLi4uZnVuY3Rpb25zOiAoKC4uLmFyZ3M6IGFueVtdKSA9PiBib29sZWFuKVtdKTogKC4uLmFyZ3M6IGFueVtdKSA9PiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCk6IGJvb2xlYW4ge1xuICAgICAgICAgICAgY29uc3QgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbnMuc29tZSgoZjogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGYgJiYgZi5hcHBseShmLCBhcmdzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGJvb2xlYW5VdGlscyA9IG5ldyBCb29sZWFuVXRpbHMoKTtcbiJdfQ==