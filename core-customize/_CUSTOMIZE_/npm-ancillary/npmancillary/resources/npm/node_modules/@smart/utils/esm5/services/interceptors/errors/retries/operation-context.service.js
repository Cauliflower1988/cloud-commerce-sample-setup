/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as lodash from 'lodash';
import { Injectable } from '@angular/core';
/**
 * @ngdoc service
 * @name @smartutils.services:OperationContextService
 * @description
 * This service provides the functionality to register a url with its associated operation contexts and also finds operation context given an url.
 */
var OperationContextService = /** @class */ (function () {
    function OperationContextService() {
        this.store = [];
    }
    /**
     * @ngdoc method
     * @name @smartutils.services:OperationContextService#register
     * @methodOf @smartutils.services:OperationContextService
     *
     * @description
     * Register a new url with it's associated operationContext.
     *
     * @param {String} url The url that is associated to the operation context.
     * @param {String} operationContext The operation context name that is associated to the given url.
     *
     * @return {Object} operationContextService The operationContextService service
     */
    OperationContextService.prototype.register = function (url, operationContext) {
        if (typeof url !== 'string' || lodash.isEmpty(url)) {
            throw new Error('operationContextService.register error: url is invalid');
        }
        if (typeof operationContext !== 'string' || lodash.isEmpty(operationContext)) {
            throw new Error('operationContextService.register error: operationContext is invalid');
        }
        var regexIndex = this.store.findIndex(function (store) {
            return store.urlRegex.test(url) === true && store.operationContext === operationContext;
        });
        if (regexIndex !== -1) {
            return this;
        }
        var urlRegex = new RegExp(url.replace(/\/:[^\/]*/g, '/.*'));
        this.store.push({
            urlRegex: urlRegex,
            operationContext: operationContext
        });
        return this;
    };
    /**
     * @ngdoc method
     * @name @smartutils.services:OperationContextService#findOperationContext
     * @methodOf @smartutils.services:OperationContextService
     *
     * @description
     * Find the first matching operation context for the given url.
     *
     * @param {String} url The request url.
     *
     * @return {String} operationContext
     */
    OperationContextService.prototype.findOperationContext = function (url) {
        var regexIndex = this.store.findIndex(function (store) { return store.urlRegex.test(url) === true; });
        return ~regexIndex ? this.store[regexIndex].operationContext : null;
    };
    OperationContextService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], OperationContextService);
    return OperationContextService;
}());
export { OperationContextService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9uLWNvbnRleHQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2ludGVyY2VwdG9ycy9lcnJvcnMvcmV0cmllcy9vcGVyYXRpb24tY29udGV4dC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7QUFDSCxPQUFPLEtBQUssTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUNqQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUTNDOzs7OztHQUtHO0FBRUg7SUFFSTtRQUNJLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFDRDs7Ozs7Ozs7Ozs7O09BWUc7SUFDSCwwQ0FBUSxHQUFSLFVBQVMsR0FBVyxFQUFFLGdCQUF3QjtRQUMxQyxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2hELE1BQU0sSUFBSSxLQUFLLENBQUMsd0RBQXdELENBQUMsQ0FBQztTQUM3RTtRQUNELElBQUksT0FBTyxnQkFBZ0IsS0FBSyxRQUFRLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO1lBQzFFLE1BQU0sSUFBSSxLQUFLLENBQUMscUVBQXFFLENBQUMsQ0FBQztTQUMxRjtRQUNELElBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUNuQyxVQUFDLEtBQUs7WUFDRixPQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksSUFBSSxLQUFLLENBQUMsZ0JBQWdCLEtBQUssZ0JBQWdCO1FBQWhGLENBQWdGLENBQ3ZGLENBQUM7UUFFRixJQUFJLFVBQVUsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNuQixPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsSUFBTSxRQUFRLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM5RCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztZQUNaLFFBQVEsVUFBQTtZQUNSLGdCQUFnQixrQkFBQTtTQUNuQixDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBQ0Q7Ozs7Ozs7Ozs7O09BV0c7SUFDSCxzREFBb0IsR0FBcEIsVUFBcUIsR0FBVztRQUM1QixJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFDLEtBQUssSUFBSyxPQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksRUFBakMsQ0FBaUMsQ0FBQyxDQUFDO1FBQ3RGLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN4RSxDQUFDO0lBdkRRLHVCQUF1QjtRQURuQyxVQUFVLEVBQUU7O09BQ0EsdUJBQXVCLENBd0RuQztJQUFELDhCQUFDO0NBQUEsQUF4REQsSUF3REM7U0F4RFksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG5pbXBvcnQgKiBhcyBsb2Rhc2ggZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqIEBpbnRlcm5hbCAqL1xuaW50ZXJmYWNlIFN0b3JlIHtcbiAgICB1cmxSZWdleDogUmVnRXhwO1xuICAgIG9wZXJhdGlvbkNvbnRleHQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgQHNtYXJ0dXRpbHMuc2VydmljZXM6T3BlcmF0aW9uQ29udGV4dFNlcnZpY2VcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBzZXJ2aWNlIHByb3ZpZGVzIHRoZSBmdW5jdGlvbmFsaXR5IHRvIHJlZ2lzdGVyIGEgdXJsIHdpdGggaXRzIGFzc29jaWF0ZWQgb3BlcmF0aW9uIGNvbnRleHRzIGFuZCBhbHNvIGZpbmRzIG9wZXJhdGlvbiBjb250ZXh0IGdpdmVuIGFuIHVybC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE9wZXJhdGlvbkNvbnRleHRTZXJ2aWNlIHtcbiAgICBwcml2YXRlIHN0b3JlOiBTdG9yZVtdO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnN0b3JlID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBAc21hcnR1dGlscy5zZXJ2aWNlczpPcGVyYXRpb25Db250ZXh0U2VydmljZSNyZWdpc3RlclxuICAgICAqIEBtZXRob2RPZiBAc21hcnR1dGlscy5zZXJ2aWNlczpPcGVyYXRpb25Db250ZXh0U2VydmljZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmVnaXN0ZXIgYSBuZXcgdXJsIHdpdGggaXQncyBhc3NvY2lhdGVkIG9wZXJhdGlvbkNvbnRleHQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSB1cmwgdGhhdCBpcyBhc3NvY2lhdGVkIHRvIHRoZSBvcGVyYXRpb24gY29udGV4dC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3BlcmF0aW9uQ29udGV4dCBUaGUgb3BlcmF0aW9uIGNvbnRleHQgbmFtZSB0aGF0IGlzIGFzc29jaWF0ZWQgdG8gdGhlIGdpdmVuIHVybC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gb3BlcmF0aW9uQ29udGV4dFNlcnZpY2UgVGhlIG9wZXJhdGlvbkNvbnRleHRTZXJ2aWNlIHNlcnZpY2VcbiAgICAgKi9cbiAgICByZWdpc3Rlcih1cmw6IHN0cmluZywgb3BlcmF0aW9uQ29udGV4dDogc3RyaW5nKTogdGhpcyB7XG4gICAgICAgIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJyB8fCBsb2Rhc2guaXNFbXB0eSh1cmwpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ29wZXJhdGlvbkNvbnRleHRTZXJ2aWNlLnJlZ2lzdGVyIGVycm9yOiB1cmwgaXMgaW52YWxpZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3BlcmF0aW9uQ29udGV4dCAhPT0gJ3N0cmluZycgfHwgbG9kYXNoLmlzRW1wdHkob3BlcmF0aW9uQ29udGV4dCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignb3BlcmF0aW9uQ29udGV4dFNlcnZpY2UucmVnaXN0ZXIgZXJyb3I6IG9wZXJhdGlvbkNvbnRleHQgaXMgaW52YWxpZCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlZ2V4SW5kZXggPSB0aGlzLnN0b3JlLmZpbmRJbmRleChcbiAgICAgICAgICAgIChzdG9yZSkgPT5cbiAgICAgICAgICAgICAgICBzdG9yZS51cmxSZWdleC50ZXN0KHVybCkgPT09IHRydWUgJiYgc3RvcmUub3BlcmF0aW9uQ29udGV4dCA9PT0gb3BlcmF0aW9uQ29udGV4dFxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChyZWdleEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXJsUmVnZXggPSBuZXcgUmVnRXhwKHVybC5yZXBsYWNlKC9cXC86W15cXC9dKi9nLCAnLy4qJykpO1xuICAgICAgICB0aGlzLnN0b3JlLnB1c2goe1xuICAgICAgICAgICAgdXJsUmVnZXgsXG4gICAgICAgICAgICBvcGVyYXRpb25Db250ZXh0XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIEBzbWFydHV0aWxzLnNlcnZpY2VzOk9wZXJhdGlvbkNvbnRleHRTZXJ2aWNlI2ZpbmRPcGVyYXRpb25Db250ZXh0XG4gICAgICogQG1ldGhvZE9mIEBzbWFydHV0aWxzLnNlcnZpY2VzOk9wZXJhdGlvbkNvbnRleHRTZXJ2aWNlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBGaW5kIHRoZSBmaXJzdCBtYXRjaGluZyBvcGVyYXRpb24gY29udGV4dCBmb3IgdGhlIGdpdmVuIHVybC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIHJlcXVlc3QgdXJsLlxuICAgICAqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBvcGVyYXRpb25Db250ZXh0XG4gICAgICovXG4gICAgZmluZE9wZXJhdGlvbkNvbnRleHQodXJsOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgICAgICAgY29uc3QgcmVnZXhJbmRleCA9IHRoaXMuc3RvcmUuZmluZEluZGV4KChzdG9yZSkgPT4gc3RvcmUudXJsUmVnZXgudGVzdCh1cmwpID09PSB0cnVlKTtcbiAgICAgICAgcmV0dXJuIH5yZWdleEluZGV4ID8gdGhpcy5zdG9yZVtyZWdleEluZGV4XS5vcGVyYXRpb25Db250ZXh0IDogbnVsbDtcbiAgICB9XG59XG4iXX0=