/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { ComponentFactoryResolver, Directive, Input, OnDestroy, ViewContainerRef } from '@angular/core';
import { AbstractForm } from '../../models';
import { decorate } from './decorate';
let FormRendererDirective = class FormRendererDirective {
    constructor(componentFactoryResolver, viewContainerRef) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.viewContainerRef = viewContainerRef;
    }
    set form(form) {
        this._dispose();
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(form.component);
        // Create and decorate the component's inputs.
        const componentRef = this.viewContainerRef.createComponent(componentFactory);
        this._subscription = decorate(componentRef, form);
    }
    ngOnDestroy() {
        this._dispose();
    }
    /**
     * @internal
     * Clear all views and unsubscribe to streams.
     */
    _dispose() {
        this._subscription && this._subscription.unsubscribe();
        this.viewContainerRef.clear();
    }
};
FormRendererDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef }
];
tslib_1.__decorate([
    Input('formRenderer'),
    tslib_1.__metadata("design:type", AbstractForm),
    tslib_1.__metadata("design:paramtypes", [AbstractForm])
], FormRendererDirective.prototype, "form", null);
FormRendererDirective = tslib_1.__decorate([
    Directive({
        selector: '[formRenderer]'
    }),
    tslib_1.__metadata("design:paramtypes", [ComponentFactoryResolver,
        ViewContainerRef])
], FormRendererDirective);
export { FormRendererDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1yZW5kZXJlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac21hcnQvdXRpbHMvIiwic291cmNlcyI6WyJtb2R1bGVzL2Zvcm0tYnVpbGRlci9kaXJlY3RpdmVzL2Zvcm0tcmVuZGVyZXIvZm9ybS1yZW5kZXJlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRztBQUNILE9BQU8sRUFDSCx3QkFBd0IsRUFDeEIsU0FBUyxFQUNULEtBQUssRUFDTCxTQUFTLEVBQ1QsZ0JBQWdCLEVBQ25CLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDNUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUt0QyxJQUFhLHFCQUFxQixHQUFsQyxNQUFhLHFCQUFxQjtJQWtCOUIsWUFDWSx3QkFBa0QsRUFDbEQsZ0JBQWtDO1FBRGxDLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFDbEQscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtJQUMzQyxDQUFDO0lBZEosSUFBSSxJQUFJLENBQUMsSUFBa0I7UUFDdkIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLHVCQUF1QixDQUMxRSxJQUFJLENBQUMsU0FBUyxDQUNqQixDQUFDO1FBRUYsOENBQThDO1FBQzlDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUM3RSxJQUFJLENBQUMsYUFBYSxHQUFHLFFBQVEsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQU9ELFdBQVc7UUFDUCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVEOzs7T0FHRztJQUNLLFFBQVE7UUFDWixJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDdkQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2xDLENBQUM7Q0FDSixDQUFBOztZQWhCeUMsd0JBQXdCO1lBQ2hDLGdCQUFnQjs7QUFiOUM7SUFEQyxLQUFLLENBQUMsY0FBYyxDQUFDO3NDQUNQLFlBQVk7NkNBQVosWUFBWTtpREFTMUI7QUFoQlEscUJBQXFCO0lBSGpDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxnQkFBZ0I7S0FDN0IsQ0FBQzs2Q0FvQndDLHdCQUF3QjtRQUNoQyxnQkFBZ0I7R0FwQnJDLHFCQUFxQixDQW1DakM7U0FuQ1kscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG5pbXBvcnQge1xuICAgIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBEaXJlY3RpdmUsXG4gICAgSW5wdXQsXG4gICAgT25EZXN0cm95LFxuICAgIFZpZXdDb250YWluZXJSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgQWJzdHJhY3RGb3JtIH0gZnJvbSAnLi4vLi4vbW9kZWxzJztcbmltcG9ydCB7IGRlY29yYXRlIH0gZnJvbSAnLi9kZWNvcmF0ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2Zvcm1SZW5kZXJlcl0nXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1SZW5kZXJlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgcHJpdmF0ZSBfc3Vic2NyaXB0aW9uITogU3Vic2NyaXB0aW9uO1xuXG4gICAgQElucHV0KCdmb3JtUmVuZGVyZXInKVxuICAgIHNldCBmb3JtKGZvcm06IEFic3RyYWN0Rm9ybSkge1xuICAgICAgICB0aGlzLl9kaXNwb3NlKCk7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudEZhY3RvcnkgPSB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShcbiAgICAgICAgICAgIGZvcm0uY29tcG9uZW50XG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGFuZCBkZWNvcmF0ZSB0aGUgY29tcG9uZW50J3MgaW5wdXRzLlxuICAgICAgICBjb25zdCBjb21wb25lbnRSZWYgPSB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlQ29tcG9uZW50KGNvbXBvbmVudEZhY3RvcnkpO1xuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb24gPSBkZWNvcmF0ZShjb21wb25lbnRSZWYsIGZvcm0pO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgICAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWZcbiAgICApIHt9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fZGlzcG9zZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIENsZWFyIGFsbCB2aWV3cyBhbmQgdW5zdWJzY3JpYmUgdG8gc3RyZWFtcy5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9kaXNwb3NlKCkge1xuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb24gJiYgdGhpcy5fc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5jbGVhcigpO1xuICAgIH1cbn1cbiJdfQ==