/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Injectable } from '@angular/core';
import { ModalConfig as FundamentalModalConfig, ModalRef as FundamentalModalRef, ModalService as FundamentalModalService } from '@fundamental-ngx/core';
import { FundamentalModalTemplateComponent } from '../../components';
let ModalService = class ModalService {
    constructor(fundamentalModalService) {
        this.fundamentalModalService = fundamentalModalService;
    }
    open(options) {
        const { templateConfig } = options;
        return !!templateConfig
            ? this.openWithTemplate(options)
            : this.openStandalone(options);
    }
    openStandalone(options) {
        const { config = {}, component, data } = options;
        return this.fundamentalModalService.open(component, Object.assign({}, config, { data }));
    }
    openWithTemplate(options) {
        const { config = {}, templateConfig = {}, component, data } = options;
        const settings = Object.assign({}, config, { data: {
                templateConfig,
                component,
                modalData: data
            } });
        return this.fundamentalModalService.open(FundamentalModalTemplateComponent, settings);
    }
};
ModalService.ctorParameters = () => [
    { type: FundamentalModalService }
];
ModalService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [FundamentalModalService])
], ModalService);
export { ModalService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL21vZGFsL21vZGFsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRztBQUNILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUNILFdBQVcsSUFBSSxzQkFBc0IsRUFDckMsUUFBUSxJQUFJLG1CQUFtQixFQUMvQixZQUFZLElBQUksdUJBQXVCLEVBQzFDLE1BQU0sdUJBQXVCLENBQUM7QUFDL0IsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHckUsSUFBYSxZQUFZLEdBQXpCLE1BQWEsWUFBWTtJQUNyQixZQUFzQix1QkFBZ0Q7UUFBaEQsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtJQUFHLENBQUM7SUFFMUUsSUFBSSxDQUFJLE9BQW1DO1FBQ3ZDLE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFFbkMsT0FBTyxDQUFDLENBQUMsY0FBYztZQUNuQixDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFJLE9BQU8sQ0FBQztZQUNuQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBSSxPQUFPLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRU8sY0FBYyxDQUFJLE9BQW1DO1FBQ3pELE1BQU0sRUFBRSxNQUFNLEdBQUcsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFFakQsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFNBQVMsb0JBQU8sTUFBTSxJQUFFLElBQUksSUFBRyxDQUFDO0lBQzdFLENBQUM7SUFFTyxnQkFBZ0IsQ0FBSSxPQUFtQztRQUMzRCxNQUFNLEVBQUUsTUFBTSxHQUFHLEVBQUUsRUFBRSxjQUFjLEdBQUcsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFFdEUsTUFBTSxRQUFRLHFCQUNQLE1BQU0sSUFDVCxJQUFJLEVBQUU7Z0JBQ0YsY0FBYztnQkFDZCxTQUFTO2dCQUNULFNBQVMsRUFBRSxJQUFJO2FBQ2xCLEdBQ0osQ0FBQztRQUVGLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMxRixDQUFDO0NBQ0osQ0FBQTs7WUE5QmtELHVCQUF1Qjs7QUFEN0QsWUFBWTtJQUR4QixVQUFVLEVBQUU7NkNBRXNDLHVCQUF1QjtHQUQ3RCxZQUFZLENBK0J4QjtTQS9CWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJRnVuZGFtZW50YWxNb2RhbENvbmZpZyB9IGZyb20gJy4vaS1tb2RhbC5zZXJ2aWNlJztcbmltcG9ydCB7XG4gICAgTW9kYWxDb25maWcgYXMgRnVuZGFtZW50YWxNb2RhbENvbmZpZyxcbiAgICBNb2RhbFJlZiBhcyBGdW5kYW1lbnRhbE1vZGFsUmVmLFxuICAgIE1vZGFsU2VydmljZSBhcyBGdW5kYW1lbnRhbE1vZGFsU2VydmljZVxufSBmcm9tICdAZnVuZGFtZW50YWwtbmd4L2NvcmUnO1xuaW1wb3J0IHsgRnVuZGFtZW50YWxNb2RhbFRlbXBsYXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNb2RhbFNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBmdW5kYW1lbnRhbE1vZGFsU2VydmljZTogRnVuZGFtZW50YWxNb2RhbFNlcnZpY2UpIHt9XG5cbiAgICBvcGVuPFQ+KG9wdGlvbnM6IElGdW5kYW1lbnRhbE1vZGFsQ29uZmlnPFQ+KTogRnVuZGFtZW50YWxNb2RhbFJlZiB7XG4gICAgICAgIGNvbnN0IHsgdGVtcGxhdGVDb25maWcgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgcmV0dXJuICEhdGVtcGxhdGVDb25maWdcbiAgICAgICAgICAgID8gdGhpcy5vcGVuV2l0aFRlbXBsYXRlPFQ+KG9wdGlvbnMpXG4gICAgICAgICAgICA6IHRoaXMub3BlblN0YW5kYWxvbmU8VD4ob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvcGVuU3RhbmRhbG9uZTxUPihvcHRpb25zOiBJRnVuZGFtZW50YWxNb2RhbENvbmZpZzxUPik6IEZ1bmRhbWVudGFsTW9kYWxSZWYge1xuICAgICAgICBjb25zdCB7IGNvbmZpZyA9IHt9LCBjb21wb25lbnQsIGRhdGEgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZnVuZGFtZW50YWxNb2RhbFNlcnZpY2Uub3Blbihjb21wb25lbnQsIHsgLi4uY29uZmlnLCBkYXRhIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgb3BlbldpdGhUZW1wbGF0ZTxUPihvcHRpb25zOiBJRnVuZGFtZW50YWxNb2RhbENvbmZpZzxUPik6IEZ1bmRhbWVudGFsTW9kYWxSZWYge1xuICAgICAgICBjb25zdCB7IGNvbmZpZyA9IHt9LCB0ZW1wbGF0ZUNvbmZpZyA9IHt9LCBjb21wb25lbnQsIGRhdGEgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgY29uc3Qgc2V0dGluZ3M6IEZ1bmRhbWVudGFsTW9kYWxDb25maWcgPSB7XG4gICAgICAgICAgICAuLi5jb25maWcsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVDb25maWcsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50LFxuICAgICAgICAgICAgICAgIG1vZGFsRGF0YTogZGF0YVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZ1bmRhbWVudGFsTW9kYWxTZXJ2aWNlLm9wZW4oRnVuZGFtZW50YWxNb2RhbFRlbXBsYXRlQ29tcG9uZW50LCBzZXR0aW5ncyk7XG4gICAgfVxufVxuIl19