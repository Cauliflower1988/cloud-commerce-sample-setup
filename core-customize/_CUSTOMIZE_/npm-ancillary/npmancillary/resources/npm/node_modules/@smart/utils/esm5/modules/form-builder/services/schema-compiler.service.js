/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Injectable } from '@angular/core';
import { FormArray, FormControl, FormGroup } from '@angular/forms';
import { FormBuilderModule } from '../form-builder.module';
import { FormField, FormGrouping, FormList, InputProperties, ValidatorParameters } from '../models';
import { FormListerComponent } from '../components/form-lister/form-lister.component';
import { ComponentRegistryService, ComponentTypeMap } from './component-registry.service';
import { ValidatorMap, ValidatorRegistryService } from './validator-registry.service';
import { AsyncValidatorMap, AsyncValidatorRegistryService } from './async-validator-registry.service';
import * as i0 from "@angular/core";
import * as i1 from "./component-registry.service";
import * as i2 from "./validator-registry.service";
import * as i3 from "./async-validator-registry.service";
import * as i4 from "../form-builder.module";
/**
 * Schema compilers service is used for compiling a schema to concrete classes for use
 * by the FormRendererDirective.
 */
var SchemaCompilerService = /** @class */ (function () {
    function SchemaCompilerService(types, validators, asyncValidators) {
        this.types = types;
        this.validators = validators;
        this.asyncValidators = asyncValidators;
    }
    /**
     * Compile a schema group.
     *
     * @param value
     * @param groupSchema
     * @returns
     */
    SchemaCompilerService.prototype.compileGroup = function (value, groupSchema, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var abstractForms = Object.keys(groupSchema.schemas).reduce(function (acc, key) {
            acc[key] = _this._toAbstractForm(value ? value[key] : null, groupSchema.schemas[key], options);
            return acc;
        }, {});
        var formGroup = new FormGroup(Object.keys(abstractForms).reduce(function (acc, key) {
            acc[key] = abstractForms[key].control;
            return acc;
        }, {}));
        return new FormGrouping(groupSchema.component
            ? this._getComponent(groupSchema.component, options.components)
            : FormListerComponent, formGroup, new InputProperties(groupSchema.inputs), this._toPersist(groupSchema.persist), null, abstractForms);
    };
    /**
     * Compiles a list of values with a schema.
     *
     * @param values An array of values.
     * @param listSchema
     */
    SchemaCompilerService.prototype.compileList = function (values, schema, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        /**
         * The schema list for each value since each value can have different
         * schemas. Or they can have the same schema for all values in the list.
         */
        var schemaList = Array.isArray(schema.schema) ? schema.schema : [schema.schema];
        if (!schemaList.length) {
            throw Error('SchemaCompilerService - One or more schemas must be provided to compile a form list.');
        }
        var list = (Array.isArray(values) ? values : []).map(function (value, index) {
            var childSchema = schemaList[index]
                ? /**
                   * Get the schema one to one for the value, or get the last schema
                   * which may be repeated for all values.
                   */
                    schemaList[index]
                : schemaList[schemaList.length - 1];
            return _this._toAbstractForm(value, childSchema, options);
        });
        var control = new FormArray(list.map(function (form) { return form.control; }));
        return new FormList(this._getComponent(schema.component, options.components), control, new InputProperties(schema.inputs), null, this._toPersist(schema.persist), list);
    };
    /**
     * Compiles a schema field.
     *
     * @param value
     * @param {FormFieldSchema} schema
     * @returns {FormField}
     */
    SchemaCompilerService.prototype.compileField = function (value, schema, options) {
        if (options === void 0) { options = {}; }
        var validators = [];
        var asyncValidators = [];
        if (schema.validators) {
            validators = this._mapValidator(schema.validators, this.validators, options.validators);
        }
        if (schema.asyncValidators) {
            asyncValidators = this._mapValidator(schema.asyncValidators, this.asyncValidators, options.asyncValidators);
        }
        var formControl = new FormControl({ value: value, disabled: schema.disabled }, validators, asyncValidators);
        return new FormField(this._getComponent(schema.component, options.components), formControl, new InputProperties(schema.inputs), this._toPersist(schema.persist), new ValidatorParameters(schema.validators, schema.asyncValidators));
    };
    /**
     * @internal
     * @param value
     * @param schema
     */
    SchemaCompilerService.prototype._toAbstractForm = function (value, schema, options) {
        if (schema.type === 'field') {
            return this.compileField(value, schema, options);
        }
        if (schema.type === 'group') {
            return this.compileGroup(value, schema, options);
        }
        return this.compileList(value, schema, options);
    };
    /**
     * @internal
     *
     * Maps schema validators to actual validators in the registry and passes custom params to a validator.
     * If params are undefined then the validator isn't added to the array of validators. Validators
     * that are found the inline registry will take precedence of those in registries.
     */
    SchemaCompilerService.prototype._mapValidator = function (validators, registry, inline) {
        var _this = this;
        if (inline === void 0) { inline = {}; }
        return Object.keys(validators).reduce(function (acc, name) {
            var params = validators[name];
            if (params !== undefined) {
                var fn = inline[name] ? inline[name] : registry.get(name);
                if (!fn) {
                    throw new Error("SchemaCompilerService - Validator not found in " + _this.validators.constructor.name + " for: " + name + ".");
                }
                acc.push(fn(params));
            }
            return acc;
        }, []);
    };
    /**
     * @internal
     * Sets default to true if parameter persist is undefined.
     */
    SchemaCompilerService.prototype._toPersist = function (persist) {
        if (persist === void 0) { persist = true; }
        return persist;
    };
    /**
     * @internal
     * Decides if should get the type from the inline map or registry.
     * If no component is found, it would throw an error.
     *
     * @param name The name of the component in the registry.
     * @param components An component type name, used for inline components.
     */
    SchemaCompilerService.prototype._getComponent = function (name, components) {
        if (components === void 0) { components = {}; }
        var comp = components[name] ? components[name] : this.types.get(name);
        if (!comp) {
            throw new Error("SchemaCompilerService - Did not find component for: " + name + ".");
        }
        return comp;
    };
    SchemaCompilerService.ctorParameters = function () { return [
        { type: ComponentRegistryService },
        { type: ValidatorRegistryService },
        { type: AsyncValidatorRegistryService }
    ]; };
    SchemaCompilerService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function SchemaCompilerService_Factory() { return new SchemaCompilerService(i0.ɵɵinject(i1.ComponentRegistryService), i0.ɵɵinject(i2.ValidatorRegistryService), i0.ɵɵinject(i3.AsyncValidatorRegistryService)); }, token: SchemaCompilerService, providedIn: i4.FormBuilderModule });
    SchemaCompilerService = tslib_1.__decorate([
        Injectable({
            providedIn: FormBuilderModule
        }),
        tslib_1.__metadata("design:paramtypes", [ComponentRegistryService,
            ValidatorRegistryService,
            AsyncValidatorRegistryService])
    ], SchemaCompilerService);
    return SchemaCompilerService;
}());
export { SchemaCompilerService };
//# sourceMappingURL=data:application/json;base64,