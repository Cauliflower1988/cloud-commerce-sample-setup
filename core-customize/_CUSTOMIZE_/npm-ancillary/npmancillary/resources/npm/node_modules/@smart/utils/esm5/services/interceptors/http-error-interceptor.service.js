/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import * as lodash from 'lodash';
import { from } from 'rxjs';
import { Deferred, PromiseUtils } from '../../utils';
/**
 * @ngdoc service
 * @name @smartutils.services:httpErrorInterceptorService
 *
 * @description
 * The httpErrorInterceptorService provides the functionality to add custom HTTP error interceptors.
 * An interceptor can be an {Object} or an Angular Factory and must be represented by a pair of functions:
 * - predicate(request, response) {Function} that must return true if the response is associated to the interceptor. Important: The predicate must be designed to fulfill a specific function. It must not be defined for generic use.
 * - responseError(request, response) {Function} function called if the current response error matches the predicate. It must return a {Promise} with the resolved or rejected response.
 *
 * Each time an HTTP request fails, the service iterates through all registered interceptors. It sequentially calls the responseError function for all interceptors that have a predicate returning true for the current response error. If an interceptor modifies the response, the next interceptor that is called will have the modified response.
 * The last interceptor added to the service will be the first interceptor called. This makes it possible to override default interceptors.
 * If an interceptor resolves the response, the service service stops the iteration.
 */
var HttpErrorInterceptorService = /** @class */ (function () {
    function HttpErrorInterceptorService(injector, promiseUtils) {
        this.injector = injector;
        this.promiseUtils = promiseUtils;
        this._errorInterceptors = [];
    }
    /**
     * @ngdoc method
     * @name @smartutils.services:httpErrorInterceptorService#addInterceptor
     * @methodOf @smartutils.services:httpErrorInterceptorService
     *
     * @description
     * Add a new error interceptor
     *
     * @param {Object|String} interceptor The interceptor {Object} or angular Factory
     *
     * @returns {Function} Function to call to unregister the interceptor from the service
     *
     * @example
     * ```js
     *      // Add a new interceptor with an instance of IHttpErrorInterceptor:
     *      var unregisterCustomInterceptor = httpErrorInterceptorService.addInterceptor({
     *          predicate: function(request, response) {
     *              return response.status === 400;
     *          },
     *          responseError: function(request, response) {
     *              alertService.showDanger({
     *                  message: response.message
     *              });
     *              return Promise.reject(response);// FIXME: update doc
     *          }
     *      });
     *
     *      // Add an interceptor with a class of IHttpErrorInterceptor:
     *      var unregisterCustomInterceptor = httpErrorInterceptorService.addInterceptor(CustomErrorInterceptor);
     *
     *      // Unregister the interceptor:
     *      unregisterCustomInterceptor();
     * ```
     */
    HttpErrorInterceptorService.prototype.addInterceptors = function (interceptorClasses) {
        var _this = this;
        interceptorClasses.forEach(function (InterceptorClass) {
            _this.addInterceptor(InterceptorClass);
        });
    };
    HttpErrorInterceptorService.prototype.addInterceptor = function (_interceptor) {
        var _this = this;
        var interceptor;
        if (_interceptor.predicate ||
            _interceptor.responseError) {
            interceptor = _interceptor;
        }
        else {
            interceptor = this.injector.get(_interceptor);
        }
        this._validateInterceptor(interceptor);
        this._errorInterceptors.unshift(interceptor);
        return function () {
            _this._errorInterceptors.splice(_this._errorInterceptors.indexOf(interceptor), 1);
        };
    };
    HttpErrorInterceptorService.prototype.responseError = function (request, response) {
        var matchingErrorInterceptors = this._errorInterceptors.filter(function (errorInterceptor) { return errorInterceptor.predicate(request, response) === true; });
        var _interceptorsDeferred = this.promiseUtils.defer();
        if (matchingErrorInterceptors.length) {
            this._iterateErrorInterceptors(request.clone(), lodash.cloneDeep(response), matchingErrorInterceptors, _interceptorsDeferred);
        }
        else {
            _interceptorsDeferred.reject(response);
        }
        return from(_interceptorsDeferred.promise);
    };
    HttpErrorInterceptorService.prototype._iterateErrorInterceptors = function (request, response, interceptors, _interceptorsDeferred, idx) {
        if (idx === void 0) { idx = 0; }
        if (idx === interceptors.length) {
            _interceptorsDeferred.reject(response);
        }
        else {
            var iterateFn_1 = this._iterateErrorInterceptors.bind(this);
            // FIXME: fully convert this part to Observable chaining
            Promise.resolve(interceptors[idx].responseError(request, response)).then(function (interceptedResponse) {
                _interceptorsDeferred.resolve(interceptedResponse);
            }, function (interceptedResponse) {
                iterateFn_1(request, interceptedResponse, interceptors, _interceptorsDeferred, ++idx);
            });
        }
    };
    /**
     * @ignore
     * Validate if the provided interceptor respects the Interface (predicate and responseError functions are mandatory).
     * @param {Object|String} interceptor The interceptor {Object} or angular Factory
     */
    HttpErrorInterceptorService.prototype._validateInterceptor = function (interceptor) {
        if (!interceptor.predicate || typeof interceptor.predicate !== 'function') {
            throw new Error('httpErrorInterceptorService.addInterceptor.error.interceptor.has.no.predicate');
        }
        if (!interceptor.responseError || typeof interceptor.responseError !== 'function') {
            throw new Error('httpErrorInterceptorService.addInterceptor.error.interceptor.has.no.responseError');
        }
    };
    HttpErrorInterceptorService.ctorParameters = function () { return [
        { type: Injector },
        { type: PromiseUtils }
    ]; };
    HttpErrorInterceptorService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [Injector, PromiseUtils])
    ], HttpErrorInterceptorService);
    return HttpErrorInterceptorService;
}());
export { HttpErrorInterceptorService };
//# sourceMappingURL=data:application/json;base64,