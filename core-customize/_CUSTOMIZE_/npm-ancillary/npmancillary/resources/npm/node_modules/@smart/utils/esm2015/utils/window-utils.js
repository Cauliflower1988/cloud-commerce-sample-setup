/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { commonNgZone } from './common-ng-zone';
/**
 * @ngdoc service
 * @name @smartutils.services:WindowUtils
 *
 * @description
 * A collection of utility methods for windows.
 */
export class WindowUtils {
    constructor(ngZone) {
        this.ngZone = ngZone;
        /**
         * @ngdoc method
         * @name @smartutils.services:WindowUtils#isIframe
         * @methodOf @smartutils.services:WindowUtils
         * @description
         * <b>isIframe</b> will check if the current document is in an iFrame.
         * @returns {boolean} true if the current document is in an iFrame.
         */
        this.isIframe = () => {
            return this.getWindow().top !== this.getWindow();
        };
        this.ngZone = this.ngZone || commonNgZone;
    }
    getWindow() {
        return window;
    }
    /**
     * @ngdoc method
     * @name @smartutils.services:WindowUtils#runTimeoutOutsideAngular
     * @methodOf @smartutils.services:WindowUtils
     *
     * @description
     * Runs a given timeout outside Angular and attaches its callback to Angular
     * this is usefull in order not to be blocking from an e2e stand point
     *
     * @param {string} callback argument less callback to execute when timeout.
     * @param {number} timeout the delay in milliseconds until timeout
     */
    runTimeoutOutsideAngular(callback, timeout) {
        const ngZone = this.ngZone;
        if (ngZone !== undefined) {
            return ngZone.runOutsideAngular(() => {
                return setTimeout(() => {
                    return ngZone.run(callback);
                }, timeout);
            });
        }
        else {
            throw new Error('this instance of WindowUtils has not been instantiated through Angular 7 DI');
        }
    }
    /**
     * @ngdoc method
     * @name @smartutils.services:WindowUtils#runIntervalOutsideAngular
     * @methodOf @smartutils.services:WindowUtils
     *
     * @description
     * Runs a given interval outside Angular and attaches its callback to Angular
     * this is usefull in order not to be blocking from an e2e stand point
     *
     * @param {string} callback argument less callback to execute when timeout.
     * @param {number} timeout the delay in milliseconds until timeout
     */
    runIntervalOutsideAngular(callback, timeout) {
        const ngZone = this.ngZone;
        if (ngZone === undefined) {
            throw new Error('this instance of WindowUtils has not been instantiated through Angular 7 DI');
        }
        return ngZone.runOutsideAngular(() => {
            return setInterval(() => {
                return ngZone.run(callback);
            }, timeout);
        });
    }
}
WindowUtils.SMARTEDIT_IFRAME_ID = 'ySmartEditFrame';
export const windowUtils = new WindowUtils();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LXV0aWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNtYXJ0L3V0aWxzLyIsInNvdXJjZXMiOlsidXRpbHMvd2luZG93LXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQVNoRDs7Ozs7O0dBTUc7QUFDSCxNQUFNLE9BQU8sV0FBVztJQUdwQixZQUFvQixNQUFlO1FBQWYsV0FBTSxHQUFOLE1BQU0sQ0FBUztRQVFuQzs7Ozs7OztXQU9HO1FBQ0gsYUFBUSxHQUFHLEdBQUcsRUFBRTtZQUNaLE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDckQsQ0FBQyxDQUFDO1FBakJFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxZQUFZLENBQUM7SUFDOUMsQ0FBQztJQUVELFNBQVM7UUFDTCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBY0Q7Ozs7Ozs7Ozs7O09BV0c7SUFDSCx3QkFBd0IsQ0FBQyxRQUFvQixFQUFFLE9BQWdCO1FBQzNELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDM0IsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ3RCLE9BQU8sTUFBTSxDQUFDLGlCQUFpQixDQUFTLEdBQUcsRUFBRTtnQkFDekMsT0FBUSxVQUFVLENBQUMsR0FBRyxFQUFFO29CQUNwQixPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ2hDLENBQUMsRUFBRSxPQUFPLENBQXVCLENBQUM7WUFDdEMsQ0FBQyxDQUFDLENBQUM7U0FDTjthQUFNO1lBQ0gsTUFBTSxJQUFJLEtBQUssQ0FDWCw2RUFBNkUsQ0FDaEYsQ0FBQztTQUNMO0lBQ0wsQ0FBQztJQUVEOzs7Ozs7Ozs7OztPQVdHO0lBQ0gseUJBQXlCLENBQUMsUUFBb0IsRUFBRSxPQUFnQjtRQUM1RCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzNCLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUN0QixNQUFNLElBQUksS0FBSyxDQUNYLDZFQUE2RSxDQUNoRixDQUFDO1NBQ0w7UUFDRCxPQUFPLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBUyxHQUFHLEVBQUU7WUFDekMsT0FBUSxXQUFXLENBQUMsR0FBRyxFQUFFO2dCQUNyQixPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDaEMsQ0FBQyxFQUFFLE9BQU8sQ0FBdUIsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O0FBekVNLCtCQUFtQixHQUFHLGlCQUFpQixDQUFDO0FBNEVuRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFNBUCBTRSBvciBhbiBTQVAgYWZmaWxpYXRlIGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbW9kdWxlIHNtYXJ0dXRpbHNcbiAqL1xuaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb21tb25OZ1pvbmUgfSBmcm9tICcuL2NvbW1vbi1uZy16b25lJztcblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBXaW5kb3cge1xuICAgICAgICBab25lOiBhbnk7XG4gICAgICAgIF9fa2FybWFfXzogYW55O1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgQHNtYXJ0dXRpbHMuc2VydmljZXM6V2luZG93VXRpbHNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgY29sbGVjdGlvbiBvZiB1dGlsaXR5IG1ldGhvZHMgZm9yIHdpbmRvd3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBXaW5kb3dVdGlscyB7XG4gICAgc3RhdGljIFNNQVJURURJVF9JRlJBTUVfSUQgPSAneVNtYXJ0RWRpdEZyYW1lJztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbmdab25lPzogTmdab25lKSB7XG4gICAgICAgIHRoaXMubmdab25lID0gdGhpcy5uZ1pvbmUgfHwgY29tbW9uTmdab25lO1xuICAgIH1cblxuICAgIGdldFdpbmRvdygpOiBXaW5kb3cge1xuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBAc21hcnR1dGlscy5zZXJ2aWNlczpXaW5kb3dVdGlscyNpc0lmcmFtZVxuICAgICAqIEBtZXRob2RPZiBAc21hcnR1dGlscy5zZXJ2aWNlczpXaW5kb3dVdGlsc1xuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIDxiPmlzSWZyYW1lPC9iPiB3aWxsIGNoZWNrIGlmIHRoZSBjdXJyZW50IGRvY3VtZW50IGlzIGluIGFuIGlGcmFtZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgY3VycmVudCBkb2N1bWVudCBpcyBpbiBhbiBpRnJhbWUuXG4gICAgICovXG4gICAgaXNJZnJhbWUgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFdpbmRvdygpLnRvcCAhPT0gdGhpcy5nZXRXaW5kb3coKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIEBzbWFydHV0aWxzLnNlcnZpY2VzOldpbmRvd1V0aWxzI3J1blRpbWVvdXRPdXRzaWRlQW5ndWxhclxuICAgICAqIEBtZXRob2RPZiBAc21hcnR1dGlscy5zZXJ2aWNlczpXaW5kb3dVdGlsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUnVucyBhIGdpdmVuIHRpbWVvdXQgb3V0c2lkZSBBbmd1bGFyIGFuZCBhdHRhY2hlcyBpdHMgY2FsbGJhY2sgdG8gQW5ndWxhclxuICAgICAqIHRoaXMgaXMgdXNlZnVsbCBpbiBvcmRlciBub3QgdG8gYmUgYmxvY2tpbmcgZnJvbSBhbiBlMmUgc3RhbmQgcG9pbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjYWxsYmFjayBhcmd1bWVudCBsZXNzIGNhbGxiYWNrIHRvIGV4ZWN1dGUgd2hlbiB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0IHRoZSBkZWxheSBpbiBtaWxsaXNlY29uZHMgdW50aWwgdGltZW91dFxuICAgICAqL1xuICAgIHJ1blRpbWVvdXRPdXRzaWRlQW5ndWxhcihjYWxsYmFjazogKCkgPT4gdm9pZCwgdGltZW91dD86IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IG5nWm9uZSA9IHRoaXMubmdab25lO1xuICAgICAgICBpZiAobmdab25lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXI8bnVtYmVyPigoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5nWm9uZS5ydW4oY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpIGFzIHVua25vd24pIGFzIG51bWJlcjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICd0aGlzIGluc3RhbmNlIG9mIFdpbmRvd1V0aWxzIGhhcyBub3QgYmVlbiBpbnN0YW50aWF0ZWQgdGhyb3VnaCBBbmd1bGFyIDcgREknXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIEBzbWFydHV0aWxzLnNlcnZpY2VzOldpbmRvd1V0aWxzI3J1bkludGVydmFsT3V0c2lkZUFuZ3VsYXJcbiAgICAgKiBAbWV0aG9kT2YgQHNtYXJ0dXRpbHMuc2VydmljZXM6V2luZG93VXRpbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJ1bnMgYSBnaXZlbiBpbnRlcnZhbCBvdXRzaWRlIEFuZ3VsYXIgYW5kIGF0dGFjaGVzIGl0cyBjYWxsYmFjayB0byBBbmd1bGFyXG4gICAgICogdGhpcyBpcyB1c2VmdWxsIGluIG9yZGVyIG5vdCB0byBiZSBibG9ja2luZyBmcm9tIGFuIGUyZSBzdGFuZCBwb2ludFxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNhbGxiYWNrIGFyZ3VtZW50IGxlc3MgY2FsbGJhY2sgdG8gZXhlY3V0ZSB3aGVuIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXQgdGhlIGRlbGF5IGluIG1pbGxpc2Vjb25kcyB1bnRpbCB0aW1lb3V0XG4gICAgICovXG4gICAgcnVuSW50ZXJ2YWxPdXRzaWRlQW5ndWxhcihjYWxsYmFjazogKCkgPT4gdm9pZCwgdGltZW91dD86IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IG5nWm9uZSA9IHRoaXMubmdab25lO1xuICAgICAgICBpZiAobmdab25lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAndGhpcyBpbnN0YW5jZSBvZiBXaW5kb3dVdGlscyBoYXMgbm90IGJlZW4gaW5zdGFudGlhdGVkIHRocm91Z2ggQW5ndWxhciA3IERJJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmdab25lLnJ1bk91dHNpZGVBbmd1bGFyPG51bWJlcj4oKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5nWm9uZS5ydW4oY2FsbGJhY2spO1xuICAgICAgICAgICAgfSwgdGltZW91dCkgYXMgdW5rbm93bikgYXMgbnVtYmVyO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCB3aW5kb3dVdGlscyA9IG5ldyBXaW5kb3dVdGlscygpO1xuIl19