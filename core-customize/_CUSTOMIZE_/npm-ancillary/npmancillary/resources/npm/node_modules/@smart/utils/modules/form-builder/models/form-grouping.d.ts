/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { FormGroup, ValidationErrors } from '@angular/forms';
import { AbstractForm } from './abstract-form';
import { AbstractForms, ComponentType } from './interfaces';
import { InputProperties } from './input-properties';
/**
 * A FormGrouping is used to encapsulate form data
 * of objects.
 */
export declare class FormGrouping extends AbstractForm {
    forms: AbstractForms;
    /**
     * @override
     */
    readonly control: FormGroup;
    constructor(component: ComponentType, control: FormGroup, inputs: InputProperties, persist: boolean, parent: AbstractForm | null, forms?: AbstractForms);
    /**
     * Adds a form element to the group.
     *
     * @param name
     * @param form
     */
    addFormElement(name: string, form: AbstractForm): void;
    /**
     * Removes a form element from the group.
     *
     * @param {string} name
     */
    removeFormElement(name: string): void;
    /**
     * Get form element based on the string path.
     *
     * @param paths A dot notation path to the nested abstract form.
     * @returns Returns the AbstractForm based on the path. null if the child does not exists.
     */
    getFormElement(paths: string | string[]): AbstractForm | null;
    /**
     * Manually sets nested errors to each FormControl.
     *
     * Note: Method should be called on the next rendering cycle and not on the initialization of the form. Should be
     * used to enforce backend validation.
     *
     * @param errors
     */
    setNestedErrors(errors?: [string[] | string, ValidationErrors][]): void;
    /**
     * Returns value of persistable nodes.
     * @return any
     */
    getPersistedValue(): any;
}
