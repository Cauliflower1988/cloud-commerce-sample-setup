/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
var FlawInjectionInterceptor_1;
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { HttpUtils } from '../../../utils';
import { LogService } from '../../../services/log.service';
/*
 * interceptor that will inject flaw into outbound and inbound http calls.
 * It is mainly used to validate reliability and consitency of test frameworks
 */
/** @internal */
let FlawInjectionInterceptor = FlawInjectionInterceptor_1 = class FlawInjectionInterceptor {
    constructor(httpUtils, logService) {
        this.httpUtils = httpUtils;
        this.logService = logService;
        this.flawWindow = window;
        this.flawWindow.allRequests = 0;
        this.flawWindow.flawedRequests = 0;
        this.flawWindow.allResponses = 0;
        this.flawWindow.flawedResponses = 0;
    }
    static registerRequestFlaw(mutation) {
        this.requestMutations.push(mutation);
    }
    static registerResponseFlaw(mutation) {
        this.responseMutations.push(mutation);
    }
    intercept(request, next) {
        let result;
        if (FlawInjectionInterceptor_1.PROBABILITY !== 0 &&
            this.httpUtils.isCRUDRequest(request) &&
            !this._isGET(request)) {
            this.flawWindow.allRequests++;
            if (this._activateWithProbability(FlawInjectionInterceptor_1.PROBABILITY)) {
                this.flawWindow.flawedRequests++;
                const requestMutation = FlawInjectionInterceptor_1.requestMutations.find((mutation) => mutation.test(request));
                if (requestMutation) {
                    this.logService.error(`FLAWED REQUEST-"${request.url}`);
                    result = next.handle(requestMutation.mutate(request));
                }
            }
            result = next.handle(request);
            return result.pipe(map((event) => {
                if (event instanceof HttpResponse &&
                    this._activateWithProbability(FlawInjectionInterceptor_1.PROBABILITY)) {
                    this.flawWindow.flawedResponses++;
                    const responseMutation = FlawInjectionInterceptor_1.responseMutations.find((mutation) => mutation.test(request));
                    if (responseMutation && event instanceof HttpResponse) {
                        this.logService.error(`FLAWED RESPONSE-"${request.url}`);
                        return responseMutation.mutate(event);
                    }
                }
                return event;
            }));
        }
        else {
            return next.handle(request);
        }
    }
    _isGET(config) {
        return config.method === 'GET';
    }
    _activateWithProbability(probabilityTrue) {
        return Math.random() >= 1.0 - probabilityTrue;
    }
};
FlawInjectionInterceptor.requestMutations = [];
FlawInjectionInterceptor.responseMutations = [];
/*
 * probability of flaw occurrence ranging from 0 to 1
 */
FlawInjectionInterceptor.PROBABILITY = 0;
FlawInjectionInterceptor.ctorParameters = () => [
    { type: HttpUtils },
    { type: LogService }
];
FlawInjectionInterceptor = FlawInjectionInterceptor_1 = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [HttpUtils, LogService])
], FlawInjectionInterceptor);
export { FlawInjectionInterceptor };
//# sourceMappingURL=data:application/json;base64,