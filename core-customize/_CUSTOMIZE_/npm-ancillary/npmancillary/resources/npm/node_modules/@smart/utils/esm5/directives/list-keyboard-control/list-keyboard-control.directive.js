/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
import { ContentChildren, Directive, EventEmitter, HostListener, Input, Output, QueryList } from '@angular/core';
import { ListItemKeyboardControlDirective } from './list-item-keyboard-control.directive';
export var KeyboardKey;
(function (KeyboardKey) {
    KeyboardKey["ArrowDown"] = "ArrowDown";
    KeyboardKey["ArrowUp"] = "ArrowUp";
    KeyboardKey["Enter"] = "Enter";
    KeyboardKey["Esc"] = "Escape";
})(KeyboardKey || (KeyboardKey = {}));
/**
 * Directive that manages the active option in a list of items based on keyboard interaction.
 * For disabled options, a predicate must be passed with `suListKeyboardControlDisabledPredicate`
 * which will prevent that option from navigating with arrow up / down key.
 *
 * Note: It will include only direct children having the `suListItemKeyboardControl` directive.
 *
 * @example
 * ```
 * items = [
 *   {
 *     id: 1,
 *     label: 'item 1'
 *   },
 *   {
 *     id: 2,
 *     label: 'item 2'
 *   },
 *   {
 *     id: 3,
 *     label: 'item 3'
 *   }
 * ]
 * <ul suListKeyboardControl>
 *   <li suListItemKeyboardControl *ngFor="let item of items">
 *     {{ item.label }}
 *   </li>
 * </ul>
 * ```
 */
var ListKeyboardControlDirective = /** @class */ (function () {
    function ListKeyboardControlDirective() {
        /** Whether the keyboard interaction is enabled */
        this.suListKeyboardControlEnabled = true;
        this.suListKeyboardControlEnterKeydown = new EventEmitter();
        this.suListKeyboardControlEscKeydown = new EventEmitter();
        /** @internal */
        this.didNgAfterContentInit = false;
        /** @internal */
        this.shouldSetActiveAfterContentInit = false;
        /** @internal */
        this.activeItem = null;
        /** @internal */
        this.activeItemIndex = null;
    }
    /** @internal */
    ListKeyboardControlDirective.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.items.changes.subscribe(function () {
            // handler for changes in content
            if (_this.items.length === 0) {
                _this.clearActiveItem();
                return;
            }
            if (_this.suListKeyboardControlEnabled) {
                _this.setActiveItemByIndex(0, 1);
            }
            else {
                _this.clearActiveItem();
            }
        });
        if (this.shouldSetActiveAfterContentInit && this.items.length > 0) {
            this.setActiveItemByIndex(0, 1);
        }
        this.didNgAfterContentInit = true;
    };
    /** @internal */
    ListKeyboardControlDirective.prototype.onKeyDown = function (event) {
        if (!this.suListKeyboardControlEnabled || this.items.length === 0) {
            return;
        }
        // For ArrowDown and ArrowUp prevent from scrolling the container.
        // Focus event is called when setting an active item so it will also scroll if needed.
        switch (event.key) {
            case KeyboardKey.ArrowDown:
                event.preventDefault();
                this.handleArrowDown();
                return;
            case KeyboardKey.ArrowUp:
                event.preventDefault();
                this.handleArrowUp();
                return;
            case KeyboardKey.Enter:
                event.preventDefault();
                this.handleEnter();
                return;
            case KeyboardKey.Esc:
                this.handleEsc();
                return;
        }
    };
    /** @internal */
    ListKeyboardControlDirective.prototype.ngOnInit = function () {
        this.shouldSetActiveAfterContentInit = this.suListKeyboardControlEnabled;
    };
    /** @internal */
    ListKeyboardControlDirective.prototype.ngOnChanges = function (changes) {
        if (!this.didNgAfterContentInit) {
            return;
        }
        var enabledChange = changes.suListKeyboardControlEnabled;
        var predicateChange = changes.suListKeyboardControlDisabledPredicate;
        var shouldSetActive = enabledChange && enabledChange.currentValue && !enabledChange.previousValue;
        var shouldUnsetActive = enabledChange && !enabledChange.currentValue && enabledChange.previousValue;
        var shouldSetActiveForPredicate = predicateChange && predicateChange.currentValue && !!this.suListKeyboardControlEnabled;
        var shouldUnsetActiveForPredicate = predicateChange &&
            !predicateChange.currentValue &&
            predicateChange.previousValue &&
            !!this.suListKeyboardControlEnabled;
        if (this.items.length === 0) {
            return;
        }
        if (shouldSetActive || shouldSetActiveForPredicate) {
            this.setFirstItemActive();
        }
        if (shouldUnsetActive || shouldUnsetActiveForPredicate) {
            this.unsetActiveItem();
        }
    };
    /** @internal */
    ListKeyboardControlDirective.prototype.handleArrowUp = function () {
        this.setPreviousItemActive();
    };
    /** @internal */
    ListKeyboardControlDirective.prototype.handleArrowDown = function () {
        this.setNextItemActive();
    };
    /** @internal */
    ListKeyboardControlDirective.prototype.handleEnter = function () {
        this.suListKeyboardControlEnterKeydown.emit(this.activeItemIndex);
    };
    /** @internal */
    ListKeyboardControlDirective.prototype.handleEsc = function () {
        this.suListKeyboardControlEscKeydown.emit();
    };
    /** @internal */
    ListKeyboardControlDirective.prototype.getItemByIndex = function (index) {
        var items = this.getItemsArray();
        return items[index];
    };
    /** @internal */
    ListKeyboardControlDirective.prototype.getItemsArray = function () {
        return this.items.toArray();
    };
    /** @internal */
    ListKeyboardControlDirective.prototype.setActiveItemByIndex = function (index, delta) {
        var items = this.getItemsArray();
        if (this.suListKeyboardControlDisabledPredicate) {
            while (this.suListKeyboardControlDisabledPredicate(items[index], index)) {
                index += delta;
                if (!items[index]) {
                    return;
                }
            }
        }
        var item = this.getItemByIndex(index);
        this.setActiveItem(item);
    };
    /** @internal */
    ListKeyboardControlDirective.prototype.setActiveItem = function (item) {
        var items = this.getItemsArray();
        var index = items.indexOf(item);
        if (this.activeItem) {
            this.activeItem.setInactive();
        }
        if (items.length > 0) {
            this.activeItem = items[index];
            this.activeItem.setActive();
            this.activeItemIndex = index;
        }
    };
    /** @internal */
    ListKeyboardControlDirective.prototype.unsetActiveItem = function () {
        if (!this.activeItem) {
            return;
        }
        this.activeItem.setInactive();
        this.activeItemIndex = null;
    };
    /** @internal */
    ListKeyboardControlDirective.prototype.setFirstItemActive = function () {
        this.setActiveItemByIndex(0, 1);
    };
    /** @internal */
    ListKeyboardControlDirective.prototype.setNextItemActive = function () {
        if (this.activeItemIndex === null) {
            this.setFirstItemActive();
            return;
        }
        if (this.activeItemIndex < this.items.length - 1) {
            this.setActiveItemByIndex(this.activeItemIndex + 1, 1);
        }
    };
    /** @internal */
    ListKeyboardControlDirective.prototype.setPreviousItemActive = function () {
        if (this.activeItemIndex === null) {
            this.setFirstItemActive();
            return;
        }
        if (this.activeItemIndex > 0) {
            this.setActiveItemByIndex(this.activeItemIndex - 1, -1);
        }
    };
    /** @internal */
    ListKeyboardControlDirective.prototype.clearActiveItem = function () {
        this.activeItem = null;
        this.activeItemIndex = null;
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], ListKeyboardControlDirective.prototype, "suListKeyboardControlEnabled", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Function)
    ], ListKeyboardControlDirective.prototype, "suListKeyboardControlDisabledPredicate", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], ListKeyboardControlDirective.prototype, "suListKeyboardControlEnterKeydown", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], ListKeyboardControlDirective.prototype, "suListKeyboardControlEscKeydown", void 0);
    tslib_1.__decorate([
        ContentChildren(ListItemKeyboardControlDirective),
        tslib_1.__metadata("design:type", QueryList)
    ], ListKeyboardControlDirective.prototype, "items", void 0);
    tslib_1.__decorate([
        HostListener('document:keydown', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [KeyboardEvent]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ListKeyboardControlDirective.prototype, "onKeyDown", null);
    ListKeyboardControlDirective = tslib_1.__decorate([
        Directive({
            selector: '[suListKeyboardControl]'
        })
    ], ListKeyboardControlDirective);
    return ListKeyboardControlDirective;
}());
export { ListKeyboardControlDirective };
//# sourceMappingURL=data:application/json;base64,