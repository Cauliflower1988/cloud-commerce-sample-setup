/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
import { Cached, InvalidateCache } from '../cache';
/**
 * @ngdoc service
 * @name @smartutils.service:AbstractCachedRestService
 *
 * @description
 * Base class to implement Cache enabled {@link @smartutils.interfaces:IRestService IRestServices}.
 * <br/>Implementing classes just need declare a class level {@link @smartutils.object:@CacheConfig @CacheConfig} annotation
 * with at least one {@link @smartutils.object:CacheAction CacheAction} and one {@link @smartutils.object:EvictionTag EvictionTag}.
 * <br/>Cache policies called by the set of {@link @smartutils.object:CacheAction CacheActions} will have access to
 * REST call response headers being added to the response under "headers" property.
 * <br/>Those headers are then stripped from the response.
 *
 * <h2>Usage</h2>
 * <pre>
 * &#64;CacheConfig({actions: [rarelyChangingContent], tags: [userEvictionTag]})
 * &#64;SeInjectable()
 * export class ProductCatalogRestService extends AbstractCachedRestService<IBaseCatalogs> {
 * 	constructor(restServiceFactory: IRestServiceFactory) {
 * 		super(restServiceFactory, '/productcatalogs');
 * 	}
 * }
 * </pre>
 */
var AbstractCachedRestService = /** @class */ (function () {
    function AbstractCachedRestService(restServiceFactory, uri, identifier) {
        this.innerRestService = restServiceFactory.get(uri, identifier);
        this.innerRestService.activateMetadata && this.innerRestService.activateMetadata();
    }
    AbstractCachedRestService.prototype.getById = function (identifier, options) {
        return this.innerRestService.getById(identifier, options);
    };
    AbstractCachedRestService.prototype.get = function (searchParams, options) {
        return this.innerRestService.get(searchParams, options);
    };
    AbstractCachedRestService.prototype.query = function (searchParams, options) {
        return this.innerRestService.query(searchParams, options);
    };
    AbstractCachedRestService.prototype.page = function (searchParams, options) {
        return this.innerRestService.page(searchParams, options);
    };
    AbstractCachedRestService.prototype.update = function (payload, options) {
        return this.innerRestService.update(payload, options);
    };
    AbstractCachedRestService.prototype.patch = function (payload, options) {
        return this.innerRestService.patch(payload, options);
    };
    AbstractCachedRestService.prototype.remove = function (payload, options) {
        return this.innerRestService.remove(payload, options);
    };
    AbstractCachedRestService.prototype.save = function (payload, options) {
        return this.innerRestService.save(payload, options);
    };
    tslib_1.__decorate([
        StripResponseHeaders,
        Cached(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [String, Object]),
        tslib_1.__metadata("design:returntype", Promise)
    ], AbstractCachedRestService.prototype, "getById", null);
    tslib_1.__decorate([
        StripResponseHeaders,
        Cached(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object, Object]),
        tslib_1.__metadata("design:returntype", Promise)
    ], AbstractCachedRestService.prototype, "get", null);
    tslib_1.__decorate([
        StripResponseHeaders,
        Cached(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object, Object]),
        tslib_1.__metadata("design:returntype", Promise)
    ], AbstractCachedRestService.prototype, "query", null);
    tslib_1.__decorate([
        StripResponseHeaders,
        Cached(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object, Object]),
        tslib_1.__metadata("design:returntype", Promise)
    ], AbstractCachedRestService.prototype, "page", null);
    tslib_1.__decorate([
        StripResponseHeaders,
        InvalidateCache(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object, Object]),
        tslib_1.__metadata("design:returntype", Promise)
    ], AbstractCachedRestService.prototype, "update", null);
    tslib_1.__decorate([
        StripResponseHeaders,
        InvalidateCache(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object, Object]),
        tslib_1.__metadata("design:returntype", Promise)
    ], AbstractCachedRestService.prototype, "patch", null);
    tslib_1.__decorate([
        InvalidateCache(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object, Object]),
        tslib_1.__metadata("design:returntype", Promise)
    ], AbstractCachedRestService.prototype, "remove", null);
    tslib_1.__decorate([
        StripResponseHeaders,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object, Object]),
        tslib_1.__metadata("design:returntype", Promise)
    ], AbstractCachedRestService.prototype, "save", null);
    return AbstractCachedRestService;
}());
export { AbstractCachedRestService };
export function StripResponseHeaders(target, propertyName, descriptor) {
    var originalMethod = descriptor.value;
    if (originalMethod) {
        descriptor.value = function () {
            return originalMethod
                .apply(this, Array.prototype.slice.call(arguments))
                .then(function (response) {
                delete response.headers;
                return response;
            });
        };
    }
}
//# sourceMappingURL=data:application/json;base64,