/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as lodash from 'lodash';
import { Injectable } from '@angular/core';
/**
 * @ngdoc service
 * @name @smartutils.services:OperationContextService
 * @description
 * This service provides the functionality to register a url with its associated operation contexts and also finds operation context given an url.
 */
let OperationContextService = class OperationContextService {
    constructor() {
        this.store = [];
    }
    /**
     * @ngdoc method
     * @name @smartutils.services:OperationContextService#register
     * @methodOf @smartutils.services:OperationContextService
     *
     * @description
     * Register a new url with it's associated operationContext.
     *
     * @param {String} url The url that is associated to the operation context.
     * @param {String} operationContext The operation context name that is associated to the given url.
     *
     * @return {Object} operationContextService The operationContextService service
     */
    register(url, operationContext) {
        if (typeof url !== 'string' || lodash.isEmpty(url)) {
            throw new Error('operationContextService.register error: url is invalid');
        }
        if (typeof operationContext !== 'string' || lodash.isEmpty(operationContext)) {
            throw new Error('operationContextService.register error: operationContext is invalid');
        }
        const regexIndex = this.store.findIndex((store) => store.urlRegex.test(url) === true && store.operationContext === operationContext);
        if (regexIndex !== -1) {
            return this;
        }
        const urlRegex = new RegExp(url.replace(/\/:[^\/]*/g, '/.*'));
        this.store.push({
            urlRegex,
            operationContext
        });
        return this;
    }
    /**
     * @ngdoc method
     * @name @smartutils.services:OperationContextService#findOperationContext
     * @methodOf @smartutils.services:OperationContextService
     *
     * @description
     * Find the first matching operation context for the given url.
     *
     * @param {String} url The request url.
     *
     * @return {String} operationContext
     */
    findOperationContext(url) {
        const regexIndex = this.store.findIndex((store) => store.urlRegex.test(url) === true);
        return ~regexIndex ? this.store[regexIndex].operationContext : null;
    }
};
OperationContextService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], OperationContextService);
export { OperationContextService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9uLWNvbnRleHQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2ludGVyY2VwdG9ycy9lcnJvcnMvcmV0cmllcy9vcGVyYXRpb24tY29udGV4dC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7QUFDSCxPQUFPLEtBQUssTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUNqQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUTNDOzs7OztHQUtHO0FBRUgsSUFBYSx1QkFBdUIsR0FBcEMsTUFBYSx1QkFBdUI7SUFFaEM7UUFDSSxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBQ0Q7Ozs7Ozs7Ozs7OztPQVlHO0lBQ0gsUUFBUSxDQUFDLEdBQVcsRUFBRSxnQkFBd0I7UUFDMUMsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNoRCxNQUFNLElBQUksS0FBSyxDQUFDLHdEQUF3RCxDQUFDLENBQUM7U0FDN0U7UUFDRCxJQUFJLE9BQU8sZ0JBQWdCLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtZQUMxRSxNQUFNLElBQUksS0FBSyxDQUFDLHFFQUFxRSxDQUFDLENBQUM7U0FDMUY7UUFDRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FDbkMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNOLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksSUFBSSxLQUFLLENBQUMsZ0JBQWdCLEtBQUssZ0JBQWdCLENBQ3ZGLENBQUM7UUFFRixJQUFJLFVBQVUsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNuQixPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsTUFBTSxRQUFRLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM5RCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztZQUNaLFFBQVE7WUFDUixnQkFBZ0I7U0FDbkIsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUNEOzs7Ozs7Ozs7OztPQVdHO0lBQ0gsb0JBQW9CLENBQUMsR0FBVztRQUM1QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUM7UUFDdEYsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3hFLENBQUM7Q0FDSixDQUFBO0FBeERZLHVCQUF1QjtJQURuQyxVQUFVLEVBQUU7O0dBQ0EsdUJBQXVCLENBd0RuQztTQXhEWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBTQVAgU0Ugb3IgYW4gU0FQIGFmZmlsaWF0ZSBjb21wYW55LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQG1vZHVsZSBzbWFydHV0aWxzXG4gKi9cbmltcG9ydCAqIGFzIGxvZGFzaCBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKiogQGludGVybmFsICovXG5pbnRlcmZhY2UgU3RvcmUge1xuICAgIHVybFJlZ2V4OiBSZWdFeHA7XG4gICAgb3BlcmF0aW9uQ29udGV4dDogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSBAc21hcnR1dGlscy5zZXJ2aWNlczpPcGVyYXRpb25Db250ZXh0U2VydmljZVxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHNlcnZpY2UgcHJvdmlkZXMgdGhlIGZ1bmN0aW9uYWxpdHkgdG8gcmVnaXN0ZXIgYSB1cmwgd2l0aCBpdHMgYXNzb2NpYXRlZCBvcGVyYXRpb24gY29udGV4dHMgYW5kIGFsc28gZmluZHMgb3BlcmF0aW9uIGNvbnRleHQgZ2l2ZW4gYW4gdXJsLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgT3BlcmF0aW9uQ29udGV4dFNlcnZpY2Uge1xuICAgIHByaXZhdGUgc3RvcmU6IFN0b3JlW107XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIEBzbWFydHV0aWxzLnNlcnZpY2VzOk9wZXJhdGlvbkNvbnRleHRTZXJ2aWNlI3JlZ2lzdGVyXG4gICAgICogQG1ldGhvZE9mIEBzbWFydHV0aWxzLnNlcnZpY2VzOk9wZXJhdGlvbkNvbnRleHRTZXJ2aWNlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZWdpc3RlciBhIG5ldyB1cmwgd2l0aCBpdCdzIGFzc29jaWF0ZWQgb3BlcmF0aW9uQ29udGV4dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIHVybCB0aGF0IGlzIGFzc29jaWF0ZWQgdG8gdGhlIG9wZXJhdGlvbiBjb250ZXh0LlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcGVyYXRpb25Db250ZXh0IFRoZSBvcGVyYXRpb24gY29udGV4dCBuYW1lIHRoYXQgaXMgYXNzb2NpYXRlZCB0byB0aGUgZ2l2ZW4gdXJsLlxuICAgICAqXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBvcGVyYXRpb25Db250ZXh0U2VydmljZSBUaGUgb3BlcmF0aW9uQ29udGV4dFNlcnZpY2Ugc2VydmljZVxuICAgICAqL1xuICAgIHJlZ2lzdGVyKHVybDogc3RyaW5nLCBvcGVyYXRpb25Db250ZXh0OiBzdHJpbmcpOiB0aGlzIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnIHx8IGxvZGFzaC5pc0VtcHR5KHVybCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignb3BlcmF0aW9uQ29udGV4dFNlcnZpY2UucmVnaXN0ZXIgZXJyb3I6IHVybCBpcyBpbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBvcGVyYXRpb25Db250ZXh0ICE9PSAnc3RyaW5nJyB8fCBsb2Rhc2guaXNFbXB0eShvcGVyYXRpb25Db250ZXh0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdvcGVyYXRpb25Db250ZXh0U2VydmljZS5yZWdpc3RlciBlcnJvcjogb3BlcmF0aW9uQ29udGV4dCBpcyBpbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVnZXhJbmRleCA9IHRoaXMuc3RvcmUuZmluZEluZGV4KFxuICAgICAgICAgICAgKHN0b3JlKSA9PlxuICAgICAgICAgICAgICAgIHN0b3JlLnVybFJlZ2V4LnRlc3QodXJsKSA9PT0gdHJ1ZSAmJiBzdG9yZS5vcGVyYXRpb25Db250ZXh0ID09PSBvcGVyYXRpb25Db250ZXh0XG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHJlZ2V4SW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1cmxSZWdleCA9IG5ldyBSZWdFeHAodXJsLnJlcGxhY2UoL1xcLzpbXlxcL10qL2csICcvLionKSk7XG4gICAgICAgIHRoaXMuc3RvcmUucHVzaCh7XG4gICAgICAgICAgICB1cmxSZWdleCxcbiAgICAgICAgICAgIG9wZXJhdGlvbkNvbnRleHRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgQHNtYXJ0dXRpbHMuc2VydmljZXM6T3BlcmF0aW9uQ29udGV4dFNlcnZpY2UjZmluZE9wZXJhdGlvbkNvbnRleHRcbiAgICAgKiBAbWV0aG9kT2YgQHNtYXJ0dXRpbHMuc2VydmljZXM6T3BlcmF0aW9uQ29udGV4dFNlcnZpY2VcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIEZpbmQgdGhlIGZpcnN0IG1hdGNoaW5nIG9wZXJhdGlvbiBjb250ZXh0IGZvciB0aGUgZ2l2ZW4gdXJsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgcmVxdWVzdCB1cmwuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IG9wZXJhdGlvbkNvbnRleHRcbiAgICAgKi9cbiAgICBmaW5kT3BlcmF0aW9uQ29udGV4dCh1cmw6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgICAgICBjb25zdCByZWdleEluZGV4ID0gdGhpcy5zdG9yZS5maW5kSW5kZXgoKHN0b3JlKSA9PiBzdG9yZS51cmxSZWdleC50ZXN0KHVybCkgPT09IHRydWUpO1xuICAgICAgICByZXR1cm4gfnJlZ2V4SW5kZXggPyB0aGlzLnN0b3JlW3JlZ2V4SW5kZXhdLm9wZXJhdGlvbkNvbnRleHQgOiBudWxsO1xuICAgIH1cbn1cbiJdfQ==