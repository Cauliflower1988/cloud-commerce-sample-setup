/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Injectable } from '@angular/core';
import { Deferred, PromiseUtils, WindowUtils } from '../../../utils';
import { LogService } from '../../log.service';
/** @internal */
var CacheEngine = /** @class */ (function () {
    function CacheEngine(windowUtils, promiseUtils, logService) {
        this.windowUtils = windowUtils;
        this.promiseUtils = promiseUtils;
        this.logService = logService;
        this.cachedItemsRegistry = [];
        this.startBackgroundMonitoringJob();
    }
    CacheEngine_1 = CacheEngine;
    CacheEngine.prototype.addItem = function (item, cacheTiming, refresh) {
        if (this.getItemIndex(item) === -1) {
            this.cachedItemsRegistry.push({
                item: item,
                cacheTiming: cacheTiming,
                refresh: refresh,
                completed: false,
                processing: false,
                defer: this.promiseUtils.defer()
            });
        }
        else {
            this.logService.warn("CacheEngine - item already exist for id: " + item.id);
        }
    };
    CacheEngine.prototype.getItemById = function (id) {
        var match = this.cachedItemsRegistry.find(function (obj) { return obj.item.id === id; });
        return match ? match.item : null;
    };
    CacheEngine.prototype.handle = function (item) {
        var obj = this.cachedItemsRegistry[this.getItemIndex(item)];
        if (obj.completed && !this.hasExpired(item)) {
            obj.defer.resolve(item.cache);
        }
        else if (!obj.processing) {
            obj.processing = true;
            this.refreshCache(obj);
        }
        return obj.defer.promise;
    };
    CacheEngine.prototype.evict = function () {
        var _this = this;
        var tags = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            tags[_i] = arguments[_i];
        }
        tags.forEach(function (tag) {
            _this.cachedItemsRegistry
                .filter(function (obj) { return obj.item.evictionTags.indexOf(tag) > -1; })
                .forEach(function (obj) { return _this.cachedItemsRegistry.splice(_this.getItemIndex(obj.item), 1); });
        });
    };
    // regularly go though cache data and call prebound methods to refresh data when needed.
    CacheEngine.prototype.startBackgroundMonitoringJob = function () {
        var _this = this;
        this.windowUtils.runIntervalOutsideAngular(function () {
            return Promise.all(_this.cachedItemsRegistry
                .filter(function (obj) { return _this.needRefresh(obj.item); })
                .map(function (obj) { return _this.refreshCache(obj); }));
        }, CacheEngine_1.BACKGROUND_REFRESH_INTERVAL);
    };
    CacheEngine.prototype.refreshCache = function (obj) {
        var _this = this;
        return obj.refresh().then(function (value) {
            // TODO: read value.metadata to refresh expiry/refresh ages.
            obj.cacheTiming.setAge(obj.item);
            obj.item.cache = value;
            obj.item.timestamp = new Date().getTime();
            obj.completed = true;
            obj.processing = false;
            obj.defer.resolve(value);
        }, function (e) {
            _this.logService.debug("CacheEngine - unable to refresh cache for id: " + obj.item.id, e);
            delete obj.item.cache;
            obj.defer.resolve(e);
        });
    };
    CacheEngine.prototype.hasExpired = function (item) {
        return item.timestamp + item.expirationAge <= new Date().getTime();
    };
    CacheEngine.prototype.needRefresh = function (item) {
        return item.timestamp + item.refreshAge <= new Date().getTime();
    };
    CacheEngine.prototype.getItemIndex = function (item) {
        return this.cachedItemsRegistry.findIndex(function (o) { return o.item.id === item.id; });
    };
    var CacheEngine_1;
    CacheEngine.BACKGROUND_REFRESH_INTERVAL = 10000;
    CacheEngine.ctorParameters = function () { return [
        { type: WindowUtils },
        { type: PromiseUtils },
        { type: LogService }
    ]; };
    CacheEngine = CacheEngine_1 = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [WindowUtils,
            PromiseUtils,
            LogService])
    ], CacheEngine);
    return CacheEngine;
}());
export { CacheEngine };
//# sourceMappingURL=data:application/json;base64,