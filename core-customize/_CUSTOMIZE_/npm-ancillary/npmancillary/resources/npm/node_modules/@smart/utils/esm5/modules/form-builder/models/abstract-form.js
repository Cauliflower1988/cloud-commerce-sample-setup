/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
var AbstractForm = /** @class */ (function () {
    function AbstractForm(component, control, inputs, persist, parent) {
        if (parent === void 0) { parent = null; }
        this.component = component;
        this.control = control;
        this.inputs = inputs;
        this.persist = persist;
        this.parent = parent;
        /**
         * Listen onto any property changes triggered by 'setInput' method.
         *
         * @type {Observable<InputPropertyChange>}
         */
        this.inputChanges = this.inputs.changes;
    }
    /**
     * Sets property and marks components for changes if property is decorated
     * with FormProperty.
     *
     * @param {keyof T} key
     * @param {T[keyof T]} value
     */
    AbstractForm.prototype.setInput = function (key, value) {
        this.inputs.set(key, value);
    };
    /**
     * Retrieves a property.
     *
     * @param {keyof T} key
     * @returns {T[keyof T] | undefined}
     */
    AbstractForm.prototype.getInput = function (key) {
        return this.inputs.get(key);
    };
    Object.defineProperty(AbstractForm.prototype, "root", {
        /**
         * Returns root form.
         */
        get: function () {
            if (this.parent === null) {
                return this;
            }
            var root = this.parent;
            while (root.parent) {
                root = root.parent;
            }
            return root;
        },
        enumerable: true,
        configurable: true
    });
    return AbstractForm;
}());
export { AbstractForm };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtZm9ybS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvZm9ybS1idWlsZGVyL21vZGVscy9hYnN0cmFjdC1mb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVVBO0lBUUksc0JBQ29CLFNBQXdCLEVBQ3hCLE9BQXdCLEVBQ3hCLE1BQXVCLEVBQ3ZCLE9BQWdCLEVBQ3pCLE1BQWtDO1FBQWxDLHVCQUFBLEVBQUEsYUFBa0M7UUFKekIsY0FBUyxHQUFULFNBQVMsQ0FBZTtRQUN4QixZQUFPLEdBQVAsT0FBTyxDQUFpQjtRQUN4QixXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQUN2QixZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ3pCLFdBQU0sR0FBTixNQUFNLENBQTRCO1FBWjdDOzs7O1dBSUc7UUFDTSxpQkFBWSxHQUFvQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQVExRSxDQUFDO0lBT0o7Ozs7OztPQU1HO0lBQ0gsK0JBQVEsR0FBUixVQUFZLEdBQVksRUFBRSxLQUFpQjtRQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsK0JBQVEsR0FBUixVQUFZLEdBQVk7UUFDcEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBSSxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBS0Qsc0JBQUksOEJBQUk7UUFIUjs7V0FFRzthQUNIO1lBQ0ksSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLElBQUksRUFBRTtnQkFDdEIsT0FBTyxJQUFJLENBQUM7YUFDZjtZQUVELElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7WUFFdkIsT0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNoQixJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQzthQUN0QjtZQUVELE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUM7OztPQUFBO0lBQ0wsbUJBQUM7QUFBRCxDQUFDLEFBMURELElBMERDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IENvbXBvbmVudFR5cGUgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgSW5wdXRQcm9wZXJ0aWVzLCBJbnB1dFByb3BlcnR5Q2hhbmdlIH0gZnJvbSAnLi9pbnB1dC1wcm9wZXJ0aWVzJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0Rm9ybSB7XG4gICAgLyoqXG4gICAgICogTGlzdGVuIG9udG8gYW55IHByb3BlcnR5IGNoYW5nZXMgdHJpZ2dlcmVkIGJ5ICdzZXRJbnB1dCcgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHR5cGUge09ic2VydmFibGU8SW5wdXRQcm9wZXJ0eUNoYW5nZT59XG4gICAgICovXG4gICAgcmVhZG9ubHkgaW5wdXRDaGFuZ2VzOiBPYnNlcnZhYmxlPElucHV0UHJvcGVydHlDaGFuZ2U+ID0gdGhpcy5pbnB1dHMuY2hhbmdlcztcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IGNvbXBvbmVudDogQ29tcG9uZW50VHlwZSxcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCxcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IGlucHV0czogSW5wdXRQcm9wZXJ0aWVzLFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgcGVyc2lzdDogYm9vbGVhbixcbiAgICAgICAgcHVibGljIHBhcmVudDogQWJzdHJhY3RGb3JtIHwgbnVsbCA9IG51bGxcbiAgICApIHt9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgbWFwcGVkIHZhbHVlcyBvZiBmaWVsZHMgdG8gYmUgcGVyc2lzdGVkLlxuICAgICAqL1xuICAgIGFic3RyYWN0IGdldFBlcnNpc3RlZFZhbHVlKCk6IGFueTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgcHJvcGVydHkgYW5kIG1hcmtzIGNvbXBvbmVudHMgZm9yIGNoYW5nZXMgaWYgcHJvcGVydHkgaXMgZGVjb3JhdGVkXG4gICAgICogd2l0aCBGb3JtUHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2tleW9mIFR9IGtleVxuICAgICAqIEBwYXJhbSB7VFtrZXlvZiBUXX0gdmFsdWVcbiAgICAgKi9cbiAgICBzZXRJbnB1dDxUPihrZXk6IGtleW9mIFQsIHZhbHVlOiBUW2tleW9mIFRdKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaW5wdXRzLnNldChrZXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYSBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7a2V5b2YgVH0ga2V5XG4gICAgICogQHJldHVybnMge1Rba2V5b2YgVF0gfCB1bmRlZmluZWR9XG4gICAgICovXG4gICAgZ2V0SW5wdXQ8VD4oa2V5OiBrZXlvZiBUKTogVFtrZXlvZiBUXSB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLmlucHV0cy5nZXQ8VD4oa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHJvb3QgZm9ybS5cbiAgICAgKi9cbiAgICBnZXQgcm9vdCgpOiBBYnN0cmFjdEZvcm0ge1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJvb3QgPSB0aGlzLnBhcmVudDtcblxuICAgICAgICB3aGlsZSAocm9vdC5wYXJlbnQpIHtcbiAgICAgICAgICAgIHJvb3QgPSByb290LnBhcmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByb290O1xuICAgIH1cbn1cbiJdfQ==