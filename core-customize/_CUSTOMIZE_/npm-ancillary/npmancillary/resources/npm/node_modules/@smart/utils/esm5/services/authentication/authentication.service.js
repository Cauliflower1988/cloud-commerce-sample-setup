/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/*
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
import * as tslib_1 from "tslib";
import { Inject, Optional } from '@angular/core';
import * as lodash from 'lodash';
import { functionsUtils } from '../../utils';
import { IAuthenticationManagerService, IAuthenticationService, IModalService, ISettingsService, ISharedDataService, IStorageService } from '../../interfaces';
import { ITranslationsFetchService } from '../translations';
import { DEFAULT_AUTH_MAP, DEFAULT_AUTHENTICATION_ENTRY_POINT, DEFAULT_CREDENTIALS_MAP, EVENT_SERVICE, EVENTS } from '../../constants';
import { SSOAuthenticationHelper } from './sso-authentication.helper';
import { LoginDialogComponent } from '../../components/login-dialog';
var AuthenticationService = /** @class */ (function (_super) {
    tslib_1.__extends(AuthenticationService, _super);
    function AuthenticationService(translationsFetchService, modalService, sharedDataService, storageService, eventService, ssoAuthenticationHelper, settingsService, authenticationManager) {
        var _this = _super.call(this) || this;
        _this.translationsFetchService = translationsFetchService;
        _this.modalService = modalService;
        _this.sharedDataService = sharedDataService;
        _this.storageService = storageService;
        _this.eventService = eventService;
        _this.ssoAuthenticationHelper = ssoAuthenticationHelper;
        _this.settingsService = settingsService;
        _this.authenticationManager = authenticationManager;
        return _this;
    }
    AuthenticationService.prototype.filterEntryPoints = function (resource) {
        return this.sharedDataService.get('authenticationMap').then(function (authenticationMap) {
            return functionsUtils
                .convertToArray(tslib_1.__assign({}, (authenticationMap || {}), DEFAULT_AUTH_MAP))
                .filter(function (entry) {
                return new RegExp(entry.key, 'g').test(resource);
            })
                .map(function (element) { return element.value; });
        });
    };
    AuthenticationService.prototype.isAuthEntryPoint = function (resource) {
        return this.sharedDataService.get('authenticationMap').then(function (authenticationMap) {
            var authEntryPoints = functionsUtils
                .convertToArray(authenticationMap || {})
                .map(function (element) { return element.value; });
            return (authEntryPoints.indexOf(resource) > -1 ||
                resource === DEFAULT_AUTHENTICATION_ENTRY_POINT);
        });
    };
    AuthenticationService.prototype.authenticate = function (resource) {
        var _this = this;
        return this._findLoginData(resource).then(function (loginData) {
            return _this._launchAuth(loginData).then(function (modalFeedback) {
                Promise.resolve(_this.eventService.publish(EVENTS.AUTHORIZATION_SUCCESS, {
                    userHasChanged: modalFeedback.userHasChanged
                })).then(function () {
                    if (modalFeedback.userHasChanged) {
                        _this.eventService.publish(EVENTS.USER_HAS_CHANGED);
                    }
                    /**
                     * We only need to reload when the user has changed and all authentication forms were closed.
                     * There can be many authentication forms if some modules use different (from default one) end points.
                     */
                    var reauthInProcess = lodash
                        .values(_this.reauthInProgress)
                        .some(function (inProcess) { return inProcess; });
                    if (modalFeedback.userHasChanged &&
                        !reauthInProcess &&
                        _this.authenticationManager &&
                        _this.authenticationManager.onUserHasChanged) {
                        _this.authenticationManager.onUserHasChanged();
                    }
                });
                _this.reauthInProgress[loginData.authURI] = false;
            });
        });
    };
    AuthenticationService.prototype.logout = function () {
        var _this = this;
        // First, indicate the services that SmartEdit is logging out. This should give them the opportunity to clean up.
        // NOTE: This is not synchronous since some clean-up might be lengthy, and logging out should be fast.
        return this.eventService.publish(EVENTS.LOGOUT).then(function () {
            _this.storageService.removeAllAuthTokens();
            if (_this.ssoAuthenticationHelper.isAutoSSOMain()) {
                _this.ssoAuthenticationHelper.logout();
            }
            else if (_this.authenticationManager && _this.authenticationManager.onLogout) {
                _this.authenticationManager.onLogout();
            }
        });
    };
    AuthenticationService.prototype.isReAuthInProgress = function (entryPoint) {
        return Promise.resolve(this.reauthInProgress[entryPoint] === true);
    };
    AuthenticationService.prototype.setReAuthInProgress = function (entryPoint) {
        this.reauthInProgress[entryPoint] = true;
        return Promise.resolve();
    };
    AuthenticationService.prototype.isAuthenticated = function (url) {
        var _this = this;
        return this.filterEntryPoints(url).then(function (entryPoints) {
            var authURI = entryPoints && entryPoints[0];
            return Promise.resolve(_this.storageService.getAuthToken(authURI)).then(function (authToken) {
                return !!authToken;
            });
        });
    };
    /*
     * will try determine first relevant authentication entry point from authenticationMap and retrieve potential client credentials to be added on top of user credentials
     */
    AuthenticationService.prototype._findLoginData = function (resource) {
        var _this = this;
        return this.filterEntryPoints(resource).then(function (entryPoints) {
            return Promise.resolve(_this.sharedDataService.get('credentialsMap').then(function (credentialsMap) {
                var map = tslib_1.__assign({}, (credentialsMap || {}), DEFAULT_CREDENTIALS_MAP);
                var authURI = entryPoints[0];
                return {
                    authURI: authURI,
                    clientCredentials: map[authURI]
                };
            }));
        });
    };
    AuthenticationService.prototype._launchAuth = function (loginData) {
        var _this = this;
        return this.translationsFetchService
            .waitToBeReady()
            .then(function () {
            return Promise.all([
                _this.storageService.isInitialized(),
                _this.settingsService.getBoolean('smartedit.sso.enabled')
            ]);
        })
            .then(function (_a) {
            var _b = tslib_1.__read(_a, 2), isFullScreen = _b[0], ssoEnabled = _b[1];
            var modalRef = _this.modalService.open({
                component: LoginDialogComponent,
                data: tslib_1.__assign({}, loginData, { isFullScreen: isFullScreen,
                    ssoEnabled: ssoEnabled }),
                config: {
                    modalPanelClass: 'su-login-dialog-container',
                    hasBackdrop: false
                }
            });
            return new Promise(function (resolve, reject) {
                modalRef.afterClosed.subscribe(resolve, reject);
            });
        });
    };
    AuthenticationService = tslib_1.__decorate([
        tslib_1.__param(4, Inject(EVENT_SERVICE)),
        tslib_1.__param(7, Optional()),
        tslib_1.__metadata("design:paramtypes", [ITranslationsFetchService,
            IModalService,
            ISharedDataService,
            IStorageService, Object, SSOAuthenticationHelper,
            ISettingsService,
            IAuthenticationManagerService])
    ], AuthenticationService);
    return AuthenticationService;
}(IAuthenticationService));
export { AuthenticationService };
//# sourceMappingURL=data:application/json;base64,