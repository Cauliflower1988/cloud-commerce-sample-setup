/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as lodash from 'lodash';
import { Injectable } from '@angular/core';
import { take } from 'rxjs/operators';
import { HttpUtils, UrlUtils } from '../../../utils';
import { LogService } from '../../../services/log.service';
import { HttpBackendService } from './http-backend.service';
/*
 * This is the place where the entries through HttpBackenService invocations are being used.
 * All outbound http requests are funneled through here, when a match from HttpBackenService entries
 * is found, the request is intercepted and the specified mock is returned with especified status code.
 * If no match is found, the http request is effectively sent over the wire
 */
var BackendInterceptor = /** @class */ (function () {
    function BackendInterceptor(httpBackendService, httpUtils, urlUtils, logService) {
        this.httpBackendService = httpBackendService;
        this.httpUtils = httpUtils;
        this.urlUtils = urlUtils;
        this.logService = logService;
    }
    BackendInterceptor.prototype.intercept = function (request, next) {
        var backendMockRespond = this.httpBackendService.findMatchingMock(request);
        if (!backendMockRespond) {
            return next.handle(request);
        }
        var response;
        if (typeof backendMockRespond === 'object') {
            response = [200, lodash.cloneDeep(backendMockRespond)];
        }
        else {
            // if (typeof backendMockRespond === 'function')
            var data = null;
            if (request.method === 'GET') {
                data = decodeURIComponent(this.urlUtils.getQueryString(this.httpUtils.copyHttpParamsOrHeaders(request.params)));
            }
            else if (request.headers.get('Content-Type') === 'application/x-www-form-urlencoded') {
                data = request.body; // it is a query string
            }
            else if (request.method === 'POST' || request.method === 'PUT') {
                data = JSON.stringify(request.body);
            }
            var headers = this.httpUtils.copyHttpParamsOrHeaders(request.headers);
            response = backendMockRespond(request.method, decodeURIComponent(request.urlWithParams), data, headers);
        }
        this.logService.debug("backend " + status + " response for " + request.url + ": ");
        return this.httpUtils.buildHttpResponse(request, response).pipe(take(1));
    };
    BackendInterceptor.ctorParameters = function () { return [
        { type: HttpBackendService },
        { type: HttpUtils },
        { type: UrlUtils },
        { type: LogService }
    ]; };
    BackendInterceptor = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [HttpBackendService,
            HttpUtils,
            UrlUtils,
            LogService])
    ], BackendInterceptor);
    return BackendInterceptor;
}());
export { BackendInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZC5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2ludGVyY2VwdG9ycy9iYWNrZW5kL2JhY2tlbmQuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRztBQUNILE9BQU8sS0FBSyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBRWpDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXRDLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzNELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTVEOzs7OztHQUtHO0FBRUg7SUFDSSw0QkFDWSxrQkFBc0MsRUFDdEMsU0FBb0IsRUFDcEIsUUFBa0IsRUFDbEIsVUFBc0I7UUFIdEIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QyxjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQ3BCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUMvQixDQUFDO0lBRUosc0NBQVMsR0FBVCxVQUFVLE9BQXlCLEVBQUUsSUFBaUI7UUFDbEQsSUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFN0UsSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQ3JCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMvQjtRQUVELElBQUksUUFBb0YsQ0FBQztRQUV6RixJQUFJLE9BQU8sa0JBQWtCLEtBQUssUUFBUSxFQUFFO1lBQ3hDLFFBQVEsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztTQUMxRDthQUFNO1lBQ0gsZ0RBQWdEO1lBQ2hELElBQUksSUFBSSxHQUFrQixJQUFJLENBQUM7WUFDL0IsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRTtnQkFDMUIsSUFBSSxHQUFHLGtCQUFrQixDQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FDeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQ3pELENBQ0osQ0FBQzthQUNMO2lCQUFNLElBQ0gsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEtBQUssbUNBQW1DLEVBQzdFO2dCQUNFLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsdUJBQXVCO2FBQy9DO2lCQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUU7Z0JBQzlELElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN2QztZQUNELElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FFckUsQ0FBQztZQUVGLFFBQVEsR0FBRyxrQkFBa0IsQ0FDekIsT0FBTyxDQUFDLE1BQU0sRUFDZCxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEVBQ3pDLElBQUksRUFDSixPQUFPLENBQ1YsQ0FBQztTQUNMO1FBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsYUFBVyxNQUFNLHNCQUFpQixPQUFPLENBQUMsR0FBRyxPQUFJLENBQUMsQ0FBQztRQUV6RSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RSxDQUFDOztnQkEvQytCLGtCQUFrQjtnQkFDM0IsU0FBUztnQkFDVixRQUFRO2dCQUNOLFVBQVU7O0lBTHpCLGtCQUFrQjtRQUQ5QixVQUFVLEVBQUU7aURBR3VCLGtCQUFrQjtZQUMzQixTQUFTO1lBQ1YsUUFBUTtZQUNOLFVBQVU7T0FMekIsa0JBQWtCLENBa0Q5QjtJQUFELHlCQUFDO0NBQUEsQUFsREQsSUFrREM7U0FsRFksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG5pbXBvcnQgKiBhcyBsb2Rhc2ggZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUGF5bG9hZCwgVHlwZWRNYXAgfSBmcm9tICcuLi8uLi8uLi9kdG9zJztcbmltcG9ydCB7IEh0dHBVdGlscywgVXJsVXRpbHMgfSBmcm9tICcuLi8uLi8uLi91dGlscyc7XG5pbXBvcnQgeyBMb2dTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvbG9nLnNlcnZpY2UnO1xuaW1wb3J0IHsgSHR0cEJhY2tlbmRTZXJ2aWNlIH0gZnJvbSAnLi9odHRwLWJhY2tlbmQuc2VydmljZSc7XG5cbi8qXG4gKiBUaGlzIGlzIHRoZSBwbGFjZSB3aGVyZSB0aGUgZW50cmllcyB0aHJvdWdoIEh0dHBCYWNrZW5TZXJ2aWNlIGludm9jYXRpb25zIGFyZSBiZWluZyB1c2VkLlxuICogQWxsIG91dGJvdW5kIGh0dHAgcmVxdWVzdHMgYXJlIGZ1bm5lbGVkIHRocm91Z2ggaGVyZSwgd2hlbiBhIG1hdGNoIGZyb20gSHR0cEJhY2tlblNlcnZpY2UgZW50cmllc1xuICogaXMgZm91bmQsIHRoZSByZXF1ZXN0IGlzIGludGVyY2VwdGVkIGFuZCB0aGUgc3BlY2lmaWVkIG1vY2sgaXMgcmV0dXJuZWQgd2l0aCBlc3BlY2lmaWVkIHN0YXR1cyBjb2RlLlxuICogSWYgbm8gbWF0Y2ggaXMgZm91bmQsIHRoZSBodHRwIHJlcXVlc3QgaXMgZWZmZWN0aXZlbHkgc2VudCBvdmVyIHRoZSB3aXJlXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCYWNrZW5kSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGh0dHBCYWNrZW5kU2VydmljZTogSHR0cEJhY2tlbmRTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGh0dHBVdGlsczogSHR0cFV0aWxzLFxuICAgICAgICBwcml2YXRlIHVybFV0aWxzOiBVcmxVdGlscyxcbiAgICAgICAgcHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlXG4gICAgKSB7fVxuXG4gICAgaW50ZXJjZXB0KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgICAgICBjb25zdCBiYWNrZW5kTW9ja1Jlc3BvbmQgPSB0aGlzLmh0dHBCYWNrZW5kU2VydmljZS5maW5kTWF0Y2hpbmdNb2NrKHJlcXVlc3QpO1xuXG4gICAgICAgIGlmICghYmFja2VuZE1vY2tSZXNwb25kKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzcG9uc2U6IFtudW1iZXIsIFBheWxvYWQgfCBQYXlsb2FkW11dIHwgUHJvbWlzZUxpa2U8W251bWJlciwgUGF5bG9hZCB8IFBheWxvYWRbXV0+O1xuXG4gICAgICAgIGlmICh0eXBlb2YgYmFja2VuZE1vY2tSZXNwb25kID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmVzcG9uc2UgPSBbMjAwLCBsb2Rhc2guY2xvbmVEZWVwKGJhY2tlbmRNb2NrUmVzcG9uZCldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaWYgKHR5cGVvZiBiYWNrZW5kTW9ja1Jlc3BvbmQgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICBsZXQgZGF0YTogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gICAgICAgICAgICBpZiAocmVxdWVzdC5tZXRob2QgPT09ICdHRVQnKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGRlY29kZVVSSUNvbXBvbmVudChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cmxVdGlscy5nZXRRdWVyeVN0cmluZyhcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaHR0cFV0aWxzLmNvcHlIdHRwUGFyYW1zT3JIZWFkZXJzKHJlcXVlc3QucGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJykgPT09ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gcmVxdWVzdC5ib2R5OyAvLyBpdCBpcyBhIHF1ZXJ5IHN0cmluZ1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXF1ZXN0Lm1ldGhvZCA9PT0gJ1BPU1QnIHx8IHJlcXVlc3QubWV0aG9kID09PSAnUFVUJykge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBKU09OLnN0cmluZ2lmeShyZXF1ZXN0LmJvZHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IHRoaXMuaHR0cFV0aWxzLmNvcHlIdHRwUGFyYW1zT3JIZWFkZXJzKHJlcXVlc3QuaGVhZGVycykgYXMgVHlwZWRNYXA8XG4gICAgICAgICAgICAgICAgc3RyaW5nXG4gICAgICAgICAgICA+O1xuXG4gICAgICAgICAgICByZXNwb25zZSA9IGJhY2tlbmRNb2NrUmVzcG9uZChcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgICAgICAgICBkZWNvZGVVUklDb21wb25lbnQocmVxdWVzdC51cmxXaXRoUGFyYW1zKSxcbiAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgIGhlYWRlcnNcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmRlYnVnKGBiYWNrZW5kICR7c3RhdHVzfSByZXNwb25zZSBmb3IgJHtyZXF1ZXN0LnVybH06IGApO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBVdGlscy5idWlsZEh0dHBSZXNwb25zZShyZXF1ZXN0LCByZXNwb25zZSkucGlwZSh0YWtlKDEpKTtcbiAgICB9XG59XG4iXX0=