/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { commonNgZone } from './common-ng-zone';
/**
 * @ngdoc service
 * @name @smartutils.services:WindowUtils
 *
 * @description
 * A collection of utility methods for windows.
 */
var WindowUtils = /** @class */ (function () {
    function WindowUtils(ngZone) {
        var _this = this;
        this.ngZone = ngZone;
        /**
         * @ngdoc method
         * @name @smartutils.services:WindowUtils#isIframe
         * @methodOf @smartutils.services:WindowUtils
         * @description
         * <b>isIframe</b> will check if the current document is in an iFrame.
         * @returns {boolean} true if the current document is in an iFrame.
         */
        this.isIframe = function () {
            return _this.getWindow().top !== _this.getWindow();
        };
        this.ngZone = this.ngZone || commonNgZone;
    }
    WindowUtils.prototype.getWindow = function () {
        return window;
    };
    /**
     * @ngdoc method
     * @name @smartutils.services:WindowUtils#runTimeoutOutsideAngular
     * @methodOf @smartutils.services:WindowUtils
     *
     * @description
     * Runs a given timeout outside Angular and attaches its callback to Angular
     * this is usefull in order not to be blocking from an e2e stand point
     *
     * @param {string} callback argument less callback to execute when timeout.
     * @param {number} timeout the delay in milliseconds until timeout
     */
    WindowUtils.prototype.runTimeoutOutsideAngular = function (callback, timeout) {
        var ngZone = this.ngZone;
        if (ngZone !== undefined) {
            return ngZone.runOutsideAngular(function () {
                return setTimeout(function () {
                    return ngZone.run(callback);
                }, timeout);
            });
        }
        else {
            throw new Error('this instance of WindowUtils has not been instantiated through Angular 7 DI');
        }
    };
    /**
     * @ngdoc method
     * @name @smartutils.services:WindowUtils#runIntervalOutsideAngular
     * @methodOf @smartutils.services:WindowUtils
     *
     * @description
     * Runs a given interval outside Angular and attaches its callback to Angular
     * this is usefull in order not to be blocking from an e2e stand point
     *
     * @param {string} callback argument less callback to execute when timeout.
     * @param {number} timeout the delay in milliseconds until timeout
     */
    WindowUtils.prototype.runIntervalOutsideAngular = function (callback, timeout) {
        var ngZone = this.ngZone;
        if (ngZone === undefined) {
            throw new Error('this instance of WindowUtils has not been instantiated through Angular 7 DI');
        }
        return ngZone.runOutsideAngular(function () {
            return setInterval(function () {
                return ngZone.run(callback);
            }, timeout);
        });
    };
    WindowUtils.SMARTEDIT_IFRAME_ID = 'ySmartEditFrame';
    return WindowUtils;
}());
export { WindowUtils };
export var windowUtils = new WindowUtils();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LXV0aWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNtYXJ0L3V0aWxzLyIsInNvdXJjZXMiOlsidXRpbHMvd2luZG93LXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQVNoRDs7Ozs7O0dBTUc7QUFDSDtJQUdJLHFCQUFvQixNQUFlO1FBQW5DLGlCQUVDO1FBRm1CLFdBQU0sR0FBTixNQUFNLENBQVM7UUFRbkM7Ozs7Ozs7V0FPRztRQUNILGFBQVEsR0FBRztZQUNQLE9BQU8sS0FBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsS0FBSyxLQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDckQsQ0FBQyxDQUFDO1FBakJFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxZQUFZLENBQUM7SUFDOUMsQ0FBQztJQUVELCtCQUFTLEdBQVQ7UUFDSSxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBY0Q7Ozs7Ozs7Ozs7O09BV0c7SUFDSCw4Q0FBd0IsR0FBeEIsVUFBeUIsUUFBb0IsRUFBRSxPQUFnQjtRQUMzRCxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzNCLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUN0QixPQUFPLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBUztnQkFDcEMsT0FBUSxVQUFVLENBQUM7b0JBQ2YsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUNoQyxDQUFDLEVBQUUsT0FBTyxDQUF1QixDQUFDO1lBQ3RDLENBQUMsQ0FBQyxDQUFDO1NBQ047YUFBTTtZQUNILE1BQU0sSUFBSSxLQUFLLENBQ1gsNkVBQTZFLENBQ2hGLENBQUM7U0FDTDtJQUNMLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7T0FXRztJQUNILCtDQUF5QixHQUF6QixVQUEwQixRQUFvQixFQUFFLE9BQWdCO1FBQzVELElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDM0IsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQ1gsNkVBQTZFLENBQ2hGLENBQUM7U0FDTDtRQUNELE9BQU8sTUFBTSxDQUFDLGlCQUFpQixDQUFTO1lBQ3BDLE9BQVEsV0FBVyxDQUFDO2dCQUNoQixPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDaEMsQ0FBQyxFQUFFLE9BQU8sQ0FBdUIsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUF6RU0sK0JBQW1CLEdBQUcsaUJBQWlCLENBQUM7SUEwRW5ELGtCQUFDO0NBQUEsQUEzRUQsSUEyRUM7U0EzRVksV0FBVztBQTZFeEIsTUFBTSxDQUFDLElBQU0sV0FBVyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBTQVAgU0Ugb3IgYW4gU0FQIGFmZmlsaWF0ZSBjb21wYW55LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQG1vZHVsZSBzbWFydHV0aWxzXG4gKi9cbmltcG9ydCB7IE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY29tbW9uTmdab25lIH0gZnJvbSAnLi9jb21tb24tbmctem9uZSc7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICAgICAgWm9uZTogYW55O1xuICAgICAgICBfX2thcm1hX186IGFueTtcbiAgICB9XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lIEBzbWFydHV0aWxzLnNlcnZpY2VzOldpbmRvd1V0aWxzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIGNvbGxlY3Rpb24gb2YgdXRpbGl0eSBtZXRob2RzIGZvciB3aW5kb3dzLlxuICovXG5leHBvcnQgY2xhc3MgV2luZG93VXRpbHMge1xuICAgIHN0YXRpYyBTTUFSVEVESVRfSUZSQU1FX0lEID0gJ3lTbWFydEVkaXRGcmFtZSc7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5nWm9uZT86IE5nWm9uZSkge1xuICAgICAgICB0aGlzLm5nWm9uZSA9IHRoaXMubmdab25lIHx8IGNvbW1vbk5nWm9uZTtcbiAgICB9XG5cbiAgICBnZXRXaW5kb3coKTogV2luZG93IHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgQHNtYXJ0dXRpbHMuc2VydmljZXM6V2luZG93VXRpbHMjaXNJZnJhbWVcbiAgICAgKiBAbWV0aG9kT2YgQHNtYXJ0dXRpbHMuc2VydmljZXM6V2luZG93VXRpbHNcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiA8Yj5pc0lmcmFtZTwvYj4gd2lsbCBjaGVjayBpZiB0aGUgY3VycmVudCBkb2N1bWVudCBpcyBpbiBhbiBpRnJhbWUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGN1cnJlbnQgZG9jdW1lbnQgaXMgaW4gYW4gaUZyYW1lLlxuICAgICAqL1xuICAgIGlzSWZyYW1lID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRXaW5kb3coKS50b3AgIT09IHRoaXMuZ2V0V2luZG93KCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBAc21hcnR1dGlscy5zZXJ2aWNlczpXaW5kb3dVdGlscyNydW5UaW1lb3V0T3V0c2lkZUFuZ3VsYXJcbiAgICAgKiBAbWV0aG9kT2YgQHNtYXJ0dXRpbHMuc2VydmljZXM6V2luZG93VXRpbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJ1bnMgYSBnaXZlbiB0aW1lb3V0IG91dHNpZGUgQW5ndWxhciBhbmQgYXR0YWNoZXMgaXRzIGNhbGxiYWNrIHRvIEFuZ3VsYXJcbiAgICAgKiB0aGlzIGlzIHVzZWZ1bGwgaW4gb3JkZXIgbm90IHRvIGJlIGJsb2NraW5nIGZyb20gYW4gZTJlIHN0YW5kIHBvaW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2FsbGJhY2sgYXJndW1lbnQgbGVzcyBjYWxsYmFjayB0byBleGVjdXRlIHdoZW4gdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZW91dCB0aGUgZGVsYXkgaW4gbWlsbGlzZWNvbmRzIHVudGlsIHRpbWVvdXRcbiAgICAgKi9cbiAgICBydW5UaW1lb3V0T3V0c2lkZUFuZ3VsYXIoY2FsbGJhY2s6ICgpID0+IHZvaWQsIHRpbWVvdXQ/OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBuZ1pvbmUgPSB0aGlzLm5nWm9uZTtcbiAgICAgICAgaWYgKG5nWm9uZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmdab25lLnJ1bk91dHNpZGVBbmd1bGFyPG51bWJlcj4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAoc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZ1pvbmUucnVuKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9LCB0aW1lb3V0KSBhcyB1bmtub3duKSBhcyBudW1iZXI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAndGhpcyBpbnN0YW5jZSBvZiBXaW5kb3dVdGlscyBoYXMgbm90IGJlZW4gaW5zdGFudGlhdGVkIHRocm91Z2ggQW5ndWxhciA3IERJJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBAc21hcnR1dGlscy5zZXJ2aWNlczpXaW5kb3dVdGlscyNydW5JbnRlcnZhbE91dHNpZGVBbmd1bGFyXG4gICAgICogQG1ldGhvZE9mIEBzbWFydHV0aWxzLnNlcnZpY2VzOldpbmRvd1V0aWxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSdW5zIGEgZ2l2ZW4gaW50ZXJ2YWwgb3V0c2lkZSBBbmd1bGFyIGFuZCBhdHRhY2hlcyBpdHMgY2FsbGJhY2sgdG8gQW5ndWxhclxuICAgICAqIHRoaXMgaXMgdXNlZnVsbCBpbiBvcmRlciBub3QgdG8gYmUgYmxvY2tpbmcgZnJvbSBhbiBlMmUgc3RhbmQgcG9pbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjYWxsYmFjayBhcmd1bWVudCBsZXNzIGNhbGxiYWNrIHRvIGV4ZWN1dGUgd2hlbiB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0IHRoZSBkZWxheSBpbiBtaWxsaXNlY29uZHMgdW50aWwgdGltZW91dFxuICAgICAqL1xuICAgIHJ1bkludGVydmFsT3V0c2lkZUFuZ3VsYXIoY2FsbGJhY2s6ICgpID0+IHZvaWQsIHRpbWVvdXQ/OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBuZ1pvbmUgPSB0aGlzLm5nWm9uZTtcbiAgICAgICAgaWYgKG5nWm9uZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgJ3RoaXMgaW5zdGFuY2Ugb2YgV2luZG93VXRpbHMgaGFzIG5vdCBiZWVuIGluc3RhbnRpYXRlZCB0aHJvdWdoIEFuZ3VsYXIgNyBESSdcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcjxudW1iZXI+KCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZ1pvbmUucnVuKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0sIHRpbWVvdXQpIGFzIHVua25vd24pIGFzIG51bWJlcjtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3Qgd2luZG93VXRpbHMgPSBuZXcgV2luZG93VXRpbHMoKTtcbiJdfQ==