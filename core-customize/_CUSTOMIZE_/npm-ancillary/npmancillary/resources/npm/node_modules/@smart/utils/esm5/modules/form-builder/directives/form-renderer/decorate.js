/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Subscription } from 'rxjs';
import { ControlPropDecorator, FormPropDecorator, FORM_PROP, InputPropDecorator } from '../../decorators';
/**
 * @internal
 * Trigger property changes for the component and mark for check
 * for those components that have onPush change detection strategy.
 *
 * @param {ComponentRef<any>} componentRef
 */
var onChange = function (_a) {
    var changeDetectorRef = _a.changeDetectorRef, instance = _a.instance;
    instance.onDynamicInputChange && instance.onDynamicInputChange();
    changeDetectorRef.markForCheck();
};
var ɵ0 = onChange;
/**
 * @internal
 * Decorates the components with the decorators that were put into places.
 * The idea is made similar to how Angular decorates their properties with inputs.
 */
export var decorate = function (componentRef, form) {
    var instance = componentRef.instance;
    var decorators = instance.constructor[FORM_PROP];
    if (!Array.isArray(decorators)) {
        return new Subscription();
    }
    var props = new Map();
    decorators.forEach(function (decorator) {
        var property = decorator.property;
        if (decorator instanceof InputPropDecorator) {
            var alias = decorator.alias;
            if (form.getInput(alias) === undefined && instance[property] !== undefined) {
                form.setInput(alias, instance[property]);
            }
            instance[property] = form.getInput(alias);
            props.set(alias, decorator);
        }
        else if (decorator instanceof FormPropDecorator) {
            instance[property] = form;
        }
        else if (decorator instanceof ControlPropDecorator) {
            instance[property] = form.control;
        }
    });
    onChange(componentRef);
    return form.inputChanges.subscribe(function (_a) {
        var key = _a.key, value = _a.value;
        var decorator = props.get(key);
        if (!decorator) {
            return;
        }
        instance[decorator.property] = value;
        onChange(componentRef);
    });
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac21hcnQvdXRpbHMvIiwic291cmNlcyI6WyJtb2R1bGVzL2Zvcm0tYnVpbGRlci9kaXJlY3RpdmVzL2Zvcm0tcmVuZGVyZXIvZGVjb3JhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUdwQyxPQUFPLEVBQ0gsb0JBQW9CLEVBQ3BCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1Qsa0JBQWtCLEVBRXJCLE1BQU0sa0JBQWtCLENBQUM7QUFFMUI7Ozs7OztHQU1HO0FBQ0gsSUFBTSxRQUFRLEdBQUcsVUFBQyxFQUFpRTtRQUEvRCx3Q0FBaUIsRUFBRSxzQkFBUTtJQUMzQyxRQUFRLENBQUMsb0JBQW9CLElBQUksUUFBUSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDakUsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDckMsQ0FBQyxDQUFDOztBQUVGOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsSUFBTSxRQUFRLEdBQUcsVUFBQyxZQUErQixFQUFFLElBQWtCO0lBQ3hFLElBQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUM7SUFDdkMsSUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQW9CLENBQUM7SUFFdEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDNUIsT0FBTyxJQUFJLFlBQVksRUFBRSxDQUFDO0tBQzdCO0lBRUQsSUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLEVBQThCLENBQUM7SUFFcEQsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFDLFNBQVM7UUFDekIsSUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQztRQUNwQyxJQUFJLFNBQVMsWUFBWSxrQkFBa0IsRUFBRTtZQUN6QyxJQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO1lBQzlCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxTQUFTLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLFNBQVMsRUFBRTtnQkFDeEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7YUFDNUM7WUFDRCxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztTQUMvQjthQUFNLElBQUksU0FBUyxZQUFZLGlCQUFpQixFQUFFO1lBQy9DLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUM7U0FDN0I7YUFBTSxJQUFJLFNBQVMsWUFBWSxvQkFBb0IsRUFBRTtZQUNsRCxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUNyQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3ZCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsVUFBQyxFQUFjO1lBQVosWUFBRyxFQUFFLGdCQUFLO1FBQzVDLElBQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFakMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNaLE9BQU87U0FDVjtRQUVELFFBQVEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ3JDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFNBUCBTRSBvciBhbiBTQVAgYWZmaWxpYXRlIGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbW9kdWxlIHNtYXJ0dXRpbHNcbiAqL1xuaW1wb3J0IHsgQ29tcG9uZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgQWJzdHJhY3RGb3JtLCBEeW5hbWljSW5wdXRDaGFuZ2UgfSBmcm9tICcuLi8uLi9tb2RlbHMnO1xuaW1wb3J0IHtcbiAgICBDb250cm9sUHJvcERlY29yYXRvcixcbiAgICBGb3JtUHJvcERlY29yYXRvcixcbiAgICBGT1JNX1BST1AsXG4gICAgSW5wdXRQcm9wRGVjb3JhdG9yLFxuICAgIFByb3BEZWNvcmF0b3Jcbn0gZnJvbSAnLi4vLi4vZGVjb3JhdG9ycyc7XG5cbi8qKlxuICogQGludGVybmFsXG4gKiBUcmlnZ2VyIHByb3BlcnR5IGNoYW5nZXMgZm9yIHRoZSBjb21wb25lbnQgYW5kIG1hcmsgZm9yIGNoZWNrXG4gKiBmb3IgdGhvc2UgY29tcG9uZW50cyB0aGF0IGhhdmUgb25QdXNoIGNoYW5nZSBkZXRlY3Rpb24gc3RyYXRlZ3kuXG4gKlxuICogQHBhcmFtIHtDb21wb25lbnRSZWY8YW55Pn0gY29tcG9uZW50UmVmXG4gKi9cbmNvbnN0IG9uQ2hhbmdlID0gKHsgY2hhbmdlRGV0ZWN0b3JSZWYsIGluc3RhbmNlIH06IENvbXBvbmVudFJlZjxEeW5hbWljSW5wdXRDaGFuZ2U+KTogdm9pZCA9PiB7XG4gICAgaW5zdGFuY2Uub25EeW5hbWljSW5wdXRDaGFuZ2UgJiYgaW5zdGFuY2Uub25EeW5hbWljSW5wdXRDaGFuZ2UoKTtcbiAgICBjaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbn07XG5cbi8qKlxuICogQGludGVybmFsXG4gKiBEZWNvcmF0ZXMgdGhlIGNvbXBvbmVudHMgd2l0aCB0aGUgZGVjb3JhdG9ycyB0aGF0IHdlcmUgcHV0IGludG8gcGxhY2VzLlxuICogVGhlIGlkZWEgaXMgbWFkZSBzaW1pbGFyIHRvIGhvdyBBbmd1bGFyIGRlY29yYXRlcyB0aGVpciBwcm9wZXJ0aWVzIHdpdGggaW5wdXRzLlxuICovXG5leHBvcnQgY29uc3QgZGVjb3JhdGUgPSAoY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8YW55PiwgZm9ybTogQWJzdHJhY3RGb3JtKTogU3Vic2NyaXB0aW9uID0+IHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGNvbXBvbmVudFJlZi5pbnN0YW5jZTtcbiAgICBjb25zdCBkZWNvcmF0b3JzID0gaW5zdGFuY2UuY29uc3RydWN0b3JbRk9STV9QUk9QXSBhcyBQcm9wRGVjb3JhdG9yW107XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGVjb3JhdG9ycykpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9wcyA9IG5ldyBNYXA8c3RyaW5nLCBJbnB1dFByb3BEZWNvcmF0b3I+KCk7XG5cbiAgICBkZWNvcmF0b3JzLmZvckVhY2goKGRlY29yYXRvcikgPT4ge1xuICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IGRlY29yYXRvci5wcm9wZXJ0eTtcbiAgICAgICAgaWYgKGRlY29yYXRvciBpbnN0YW5jZW9mIElucHV0UHJvcERlY29yYXRvcikge1xuICAgICAgICAgICAgY29uc3QgYWxpYXMgPSBkZWNvcmF0b3IuYWxpYXM7XG4gICAgICAgICAgICBpZiAoZm9ybS5nZXRJbnB1dChhbGlhcykgPT09IHVuZGVmaW5lZCAmJiBpbnN0YW5jZVtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGZvcm0uc2V0SW5wdXQoYWxpYXMsIGluc3RhbmNlW3Byb3BlcnR5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnN0YW5jZVtwcm9wZXJ0eV0gPSBmb3JtLmdldElucHV0KGFsaWFzKTtcbiAgICAgICAgICAgIHByb3BzLnNldChhbGlhcywgZGVjb3JhdG9yKTtcbiAgICAgICAgfSBlbHNlIGlmIChkZWNvcmF0b3IgaW5zdGFuY2VvZiBGb3JtUHJvcERlY29yYXRvcikge1xuICAgICAgICAgICAgaW5zdGFuY2VbcHJvcGVydHldID0gZm9ybTtcbiAgICAgICAgfSBlbHNlIGlmIChkZWNvcmF0b3IgaW5zdGFuY2VvZiBDb250cm9sUHJvcERlY29yYXRvcikge1xuICAgICAgICAgICAgaW5zdGFuY2VbcHJvcGVydHldID0gZm9ybS5jb250cm9sO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBvbkNoYW5nZShjb21wb25lbnRSZWYpO1xuICAgIHJldHVybiBmb3JtLmlucHV0Q2hhbmdlcy5zdWJzY3JpYmUoKHsga2V5LCB2YWx1ZSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IGRlY29yYXRvciA9IHByb3BzLmdldChrZXkpO1xuXG4gICAgICAgIGlmICghZGVjb3JhdG9yKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpbnN0YW5jZVtkZWNvcmF0b3IucHJvcGVydHldID0gdmFsdWU7XG4gICAgICAgIG9uQ2hhbmdlKGNvbXBvbmVudFJlZik7XG4gICAgfSk7XG59O1xuIl19