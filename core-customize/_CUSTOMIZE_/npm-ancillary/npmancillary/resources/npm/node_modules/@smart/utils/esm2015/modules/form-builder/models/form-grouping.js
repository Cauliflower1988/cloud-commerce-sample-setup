/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
import { AbstractForm } from './abstract-form';
/**
 * A FormGrouping is used to encapsulate form data
 * of objects.
 */
export class FormGrouping extends AbstractForm {
    constructor(component, control, inputs, persist, parent, forms = {}) {
        super(component, control, inputs, persist, parent);
        this.forms = forms;
        Object.keys(this.forms).forEach((key) => {
            this.forms[key].parent = this;
        });
    }
    /**
     * Adds a form element to the group.
     *
     * @param name
     * @param form
     */
    addFormElement(name, form) {
        this.forms = Object.assign({}, this.forms, { [name]: form });
        this.control.addControl(name, form.control);
        form.parent = this;
    }
    /**
     * Removes a form element from the group.
     *
     * @param {string} name
     */
    removeFormElement(name) {
        if (!this.forms[name]) {
            return;
        }
        const _a = this.forms, _b = name, deleted = _a[_b], forms = tslib_1.__rest(_a, [typeof _b === "symbol" ? _b : _b + ""]);
        this.forms = forms;
        deleted.parent = null;
        this.control.removeControl(name);
    }
    /**
     * Get form element based on the string path.
     *
     * @param paths A dot notation path to the nested abstract form.
     * @returns Returns the AbstractForm based on the path. null if the child does not exists.
     */
    getFormElement(paths) {
        return (Array.isArray(paths) ? paths : paths.split('.')).reduce((acc, path) => {
            if (!acc || !acc.forms) {
                return null;
            }
            return acc.forms[path];
        }, this);
    }
    /**
     * Manually sets nested errors to each FormControl.
     *
     * Note: Method should be called on the next rendering cycle and not on the initialization of the form. Should be
     * used to enforce backend validation.
     *
     * @param errors
     */
    setNestedErrors(errors = []) {
        errors.forEach(([path, validationErrors]) => {
            const form = this.getFormElement(path);
            /**
             * Fail if the form does not exist.
             */
            if (!form) {
                throw new Error(`FormGrouping - Path not found when setting nested error: ${path}`);
            }
            form.control.setErrors(validationErrors);
        });
    }
    /**
     * Returns value of persistable nodes.
     * @return any
     */
    getPersistedValue() {
        return Object.keys(this.forms).reduce((acc, key) => {
            const child = this.forms[key];
            /**
             * Look ahead and if nested does not want to be mapped, merge the nested object with
             * the current object.
             *
             * If it's a field, then it's undefined.
             *
             * If it's a group, then it will be merged.
             */
            if (!child.persist) {
                return Object.assign({}, acc, child.getPersistedValue());
            }
            acc[key] = child.getPersistedValue();
            return acc;
        }, {});
    }
}
//# sourceMappingURL=data:application/json;base64,