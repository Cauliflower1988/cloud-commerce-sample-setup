/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
var SelectComponent_1;
import * as tslib_1 from "tslib";
import { forwardRef, Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BaseValueAccessor } from '../../utils/base-value-accessor';
/**
 * @ngdoc component
 * @name  @smartutils.components:SelectComponent
 *
 * @description
 * Dropdown component allowing to select item from dropdown
 *
 * @param {ISelectItem<T>[]} items Items to displayed in dropdown
 * @param {ISelectItem<T>} initialValue Value dropdown should be initialized with
 * @param {string} placeholder String to be displayed when value is not selected
 * @param {Boolean} isKeyboardControlEnabled Flag enabling dropdown items selection with arrow keys
 * @param {Boolean} hasCustomTrigger If set true the trigger opening the dropdown will be set by user
 */
let SelectComponent = SelectComponent_1 = class SelectComponent extends BaseValueAccessor {
    /**
     * @ngdoc component
     * @name  @smartutils.components:SelectComponent
     *
     * @description
     * Dropdown component allowing to select item from dropdown
     *
     * @param {ISelectItem<T>[]} items Items to displayed in dropdown
     * @param {ISelectItem<T>} initialValue Value dropdown should be initialized with
     * @param {string} placeholder String to be displayed when value is not selected
     * @param {Boolean} isKeyboardControlEnabled Flag enabling dropdown items selection with arrow keys
     * @param {Boolean} hasCustomTrigger If set true the trigger opening the dropdown will be set by user
     */
    constructor() {
        super(...arguments);
        this.items = [];
        this.initialValue = null;
        this.placeholder = '';
        this.isKeyboardControlEnabled = true;
        this.hasCustomTrigger = false;
        this.onItemSelected = new EventEmitter();
    }
    selectItem(id) {
        const item = this.items.find((selected) => selected.id === id);
        this.setValue(item);
        this.popover.close();
        this.onItemSelected.emit(item);
    }
    ngOnChanges(changes) {
        if (changes.initialValue && changes.initialValue.currentValue && !this.value) {
            this.setInitialValue(changes.initialValue.currentValue);
        }
    }
    setInitialValue(value) {
        if (typeof value === 'number') {
            this.setValueById(value);
        }
        else {
            this.setValue(value);
        }
    }
    setValue(item) {
        this.writeValue(item);
        this.onChange(item);
    }
    setValueById(id) {
        this.setValue(this.items.find((item) => item.id === id));
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], SelectComponent.prototype, "items", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], SelectComponent.prototype, "initialValue", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], SelectComponent.prototype, "placeholder", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], SelectComponent.prototype, "isKeyboardControlEnabled", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], SelectComponent.prototype, "hasCustomTrigger", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], SelectComponent.prototype, "onItemSelected", void 0);
tslib_1.__decorate([
    ViewChild('popover', { static: false }),
    tslib_1.__metadata("design:type", Object)
], SelectComponent.prototype, "popover", void 0);
SelectComponent = SelectComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'su-select',
        encapsulation: ViewEncapsulation.None,
        providers: [
            { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent_1), multi: true }
        ],
        template: `
        <fd-popover #popover fillControlMode="equal" class="su-select">
            <fd-popover-control class="su-select__popover-control">
                <button
                    class="fd-dropdown__control fd-button"
                    type="button"
                    *ngIf="!hasCustomTrigger; else customTrigger"
                >
                    {{ (value && value.label) || placeholder | translate }}
                </button>

                <ng-template #customTrigger>
                    <ng-content select="[su-select-custom-trigger]"></ng-content>
                </ng-template>
            </fd-popover-control>
            <fd-popover-body>
                <fd-menu class="su-select__menu">
                    <ul
                        fd-menu-list
                        suListKeyboardControl
                        [suListKeyboardControlEnabled]="isKeyboardControlEnabled && popover.isOpen"
                        (suListKeyboardControlEnterKeydown)="selectItem($event)"
                    >
                        <li
                            fd-menu-item
                            suListItemKeyboardControl
                            [ngClass]="item.listItemClassName"
                            *ngFor="let item of items"
                            (click)="selectItem(item.id)"
                            [attr.tabindex]="-1"
                            [attr.data-select-id]="item.id"
                        >
                            {{ item.label | translate }}
                        </li>
                    </ul>
                </fd-menu>
            </fd-popover-body>
        </fd-popover>
    `,
        styles: [".su-select,.su-select__popover-control,.su-select__popover-control .fd-dropdown{width:100%}.su-select__popover-control .fd-dropdown__control{overflow:hidden;color:#51555a}.su-select__popover-control .fd-dropdown__control::after{position:absolute;top:0;right:0;display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;padding:0;height:36px;width:36px;margin-top:0;font-size:14px}.su-select__menu .fd-menu__list{max-height:200px;overflow:auto}.su-select__menu .fd-menu__item[select-highlighted]{background:rgba(10,110,209,.07)}.su-select__menu .fd-menu__item[select-highlighted]:focus{outline:0}"]
    })
], SelectComponent);
export { SelectComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvc2VsZWN0L3NlbGVjdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOzs7QUFFSCxPQUFPLEVBQ0gsVUFBVSxFQUNWLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUVMLE1BQU0sRUFFTixTQUFTLEVBQ1QsaUJBQWlCLEVBQ3BCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBR3BFOzs7Ozs7Ozs7Ozs7R0FZRztBQWlESCxJQUFhLGVBQWUsdUJBQTVCLE1BQWEsZUFBbUIsU0FBUSxpQkFBaUM7SUE3RHpFOzs7Ozs7Ozs7Ozs7T0FZRztJQUVIOztRQWdEYSxVQUFLLEdBQXFCLEVBQUUsQ0FBQztRQUM3QixpQkFBWSxHQUFvQixJQUFrQyxDQUFDO1FBQ25FLGdCQUFXLEdBQVcsRUFBRSxDQUFDO1FBQ3pCLDZCQUF3QixHQUFZLElBQUksQ0FBQztRQUN6QyxxQkFBZ0IsR0FBWSxLQUFLLENBQUM7UUFDakMsbUJBQWMsR0FBaUMsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQW9DaEYsQ0FBQztJQWhDRyxVQUFVLENBQUMsRUFBVTtRQUNqQixNQUFNLElBQUksR0FBbUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ3hDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FDakIsQ0FBQztRQUVwQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUM5QixJQUFJLE9BQU8sQ0FBQyxZQUFZLElBQUksT0FBTyxDQUFDLFlBQVksQ0FBQyxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQzFFLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMzRDtJQUNMLENBQUM7SUFFTyxlQUFlLENBQUMsS0FBOEI7UUFDbEQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM1QjthQUFNO1lBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN4QjtJQUNMLENBQUM7SUFFTyxRQUFRLENBQUMsSUFBb0I7UUFDakMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFTyxZQUFZLENBQUMsRUFBVTtRQUMzQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBbUIsQ0FBQyxDQUFDO0lBQy9FLENBQUM7Q0FDSixDQUFBO0FBekNZO0lBQVIsS0FBSyxFQUFFOzs4Q0FBOEI7QUFDN0I7SUFBUixLQUFLLEVBQUU7O3FEQUFvRTtBQUNuRTtJQUFSLEtBQUssRUFBRTs7b0RBQTBCO0FBQ3pCO0lBQVIsS0FBSyxFQUFFOztpRUFBMEM7QUFDekM7SUFBUixLQUFLLEVBQUU7O3lEQUFtQztBQUNqQztJQUFULE1BQU0sRUFBRTtzQ0FBaUIsWUFBWTt1REFBc0M7QUFFbkM7SUFBeEMsU0FBUyxDQUFDLFNBQVMsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQzs7Z0RBQWM7QUFSN0MsZUFBZTtJQS9DM0IsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLFdBQVc7UUFDckIsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7UUFDckMsU0FBUyxFQUFFO1lBQ1AsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBZSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtTQUM5RjtRQUVELFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FzQ1Q7O0tBQ0osQ0FBQztHQUNXLGVBQWUsQ0EwQzNCO1NBMUNZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBTQVAgU0Ugb3IgYW4gU0FQIGFmZmlsaWF0ZSBjb21wYW55LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQG1vZHVsZSBzbWFydHV0aWxzXG4gKi9cblxuaW1wb3J0IHtcbiAgICBmb3J3YXJkUmVmLFxuICAgIENvbXBvbmVudCxcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgSW5wdXQsXG4gICAgT25DaGFuZ2VzLFxuICAgIE91dHB1dCxcbiAgICBTaW1wbGVDaGFuZ2VzLFxuICAgIFZpZXdDaGlsZCxcbiAgICBWaWV3RW5jYXBzdWxhdGlvblxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBCYXNlVmFsdWVBY2Nlc3NvciB9IGZyb20gJy4uLy4uL3V0aWxzL2Jhc2UtdmFsdWUtYWNjZXNzb3InO1xuaW1wb3J0IHsgSVNlbGVjdEl0ZW0gfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2ktc2VsZWN0LWl0ZW0nO1xuXG4vKipcbiAqIEBuZ2RvYyBjb21wb25lbnRcbiAqIEBuYW1lICBAc21hcnR1dGlscy5jb21wb25lbnRzOlNlbGVjdENvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRHJvcGRvd24gY29tcG9uZW50IGFsbG93aW5nIHRvIHNlbGVjdCBpdGVtIGZyb20gZHJvcGRvd25cbiAqXG4gKiBAcGFyYW0ge0lTZWxlY3RJdGVtPFQ+W119IGl0ZW1zIEl0ZW1zIHRvIGRpc3BsYXllZCBpbiBkcm9wZG93blxuICogQHBhcmFtIHtJU2VsZWN0SXRlbTxUPn0gaW5pdGlhbFZhbHVlIFZhbHVlIGRyb3Bkb3duIHNob3VsZCBiZSBpbml0aWFsaXplZCB3aXRoXG4gKiBAcGFyYW0ge3N0cmluZ30gcGxhY2Vob2xkZXIgU3RyaW5nIHRvIGJlIGRpc3BsYXllZCB3aGVuIHZhbHVlIGlzIG5vdCBzZWxlY3RlZFxuICogQHBhcmFtIHtCb29sZWFufSBpc0tleWJvYXJkQ29udHJvbEVuYWJsZWQgRmxhZyBlbmFibGluZyBkcm9wZG93biBpdGVtcyBzZWxlY3Rpb24gd2l0aCBhcnJvdyBrZXlzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGhhc0N1c3RvbVRyaWdnZXIgSWYgc2V0IHRydWUgdGhlIHRyaWdnZXIgb3BlbmluZyB0aGUgZHJvcGRvd24gd2lsbCBiZSBzZXQgYnkgdXNlclxuICovXG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnc3Utc2VsZWN0JyxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7IHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBTZWxlY3RDb21wb25lbnQpLCBtdWx0aTogdHJ1ZSB9XG4gICAgXSxcbiAgICBzdHlsZVVybHM6IFsnLi9zZWxlY3QuY29tcG9uZW50LnNjc3MnXSxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8ZmQtcG9wb3ZlciAjcG9wb3ZlciBmaWxsQ29udHJvbE1vZGU9XCJlcXVhbFwiIGNsYXNzPVwic3Utc2VsZWN0XCI+XG4gICAgICAgICAgICA8ZmQtcG9wb3Zlci1jb250cm9sIGNsYXNzPVwic3Utc2VsZWN0X19wb3BvdmVyLWNvbnRyb2xcIj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZmQtZHJvcGRvd25fX2NvbnRyb2wgZmQtYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICpuZ0lmPVwiIWhhc0N1c3RvbVRyaWdnZXI7IGVsc2UgY3VzdG9tVHJpZ2dlclwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7eyAodmFsdWUgJiYgdmFsdWUubGFiZWwpIHx8IHBsYWNlaG9sZGVyIHwgdHJhbnNsYXRlIH19XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgI2N1c3RvbVRyaWdnZXI+XG4gICAgICAgICAgICAgICAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIltzdS1zZWxlY3QtY3VzdG9tLXRyaWdnZXJdXCI+PC9uZy1jb250ZW50PlxuICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICA8L2ZkLXBvcG92ZXItY29udHJvbD5cbiAgICAgICAgICAgIDxmZC1wb3BvdmVyLWJvZHk+XG4gICAgICAgICAgICAgICAgPGZkLW1lbnUgY2xhc3M9XCJzdS1zZWxlY3RfX21lbnVcIj5cbiAgICAgICAgICAgICAgICAgICAgPHVsXG4gICAgICAgICAgICAgICAgICAgICAgICBmZC1tZW51LWxpc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1TGlzdEtleWJvYXJkQ29udHJvbFxuICAgICAgICAgICAgICAgICAgICAgICAgW3N1TGlzdEtleWJvYXJkQ29udHJvbEVuYWJsZWRdPVwiaXNLZXlib2FyZENvbnRyb2xFbmFibGVkICYmIHBvcG92ZXIuaXNPcGVuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIChzdUxpc3RLZXlib2FyZENvbnRyb2xFbnRlcktleWRvd24pPVwic2VsZWN0SXRlbSgkZXZlbnQpXCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmQtbWVudS1pdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VMaXN0SXRlbUtleWJvYXJkQ29udHJvbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtuZ0NsYXNzXT1cIml0ZW0ubGlzdEl0ZW1DbGFzc05hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICpuZ0Zvcj1cImxldCBpdGVtIG9mIGl0ZW1zXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2xpY2spPVwic2VsZWN0SXRlbShpdGVtLmlkKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIudGFiaW5kZXhdPVwiLTFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLmRhdGEtc2VsZWN0LWlkXT1cIml0ZW0uaWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGl0ZW0ubGFiZWwgfCB0cmFuc2xhdGUgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgPC9mZC1tZW51PlxuICAgICAgICAgICAgPC9mZC1wb3BvdmVyLWJvZHk+XG4gICAgICAgIDwvZmQtcG9wb3Zlcj5cbiAgICBgXG59KVxuZXhwb3J0IGNsYXNzIFNlbGVjdENvbXBvbmVudDxUPiBleHRlbmRzIEJhc2VWYWx1ZUFjY2Vzc29yPElTZWxlY3RJdGVtPFQ+PiBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgQElucHV0KCkgaXRlbXM6IElTZWxlY3RJdGVtPFQ+W10gPSBbXTtcbiAgICBASW5wdXQoKSBpbml0aWFsVmFsdWU6IElTZWxlY3RJdGVtPFQ+ID0gKG51bGwgYXMgdW5rbm93bikgYXMgSVNlbGVjdEl0ZW08VD47XG4gICAgQElucHV0KCkgcGxhY2Vob2xkZXI6IHN0cmluZyA9ICcnO1xuICAgIEBJbnB1dCgpIGlzS2V5Ym9hcmRDb250cm9sRW5hYmxlZDogYm9vbGVhbiA9IHRydWU7XG4gICAgQElucHV0KCkgaGFzQ3VzdG9tVHJpZ2dlcjogYm9vbGVhbiA9IGZhbHNlO1xuICAgIEBPdXRwdXQoKSBvbkl0ZW1TZWxlY3RlZDogRXZlbnRFbWl0dGVyPElTZWxlY3RJdGVtPFQ+PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIEBWaWV3Q2hpbGQoJ3BvcG92ZXInLCB7IHN0YXRpYzogZmFsc2UgfSkgcG9wb3ZlcjogYW55OyAvLyBQb3BvdmVyQ29tcG9uZW50XG5cbiAgICBzZWxlY3RJdGVtKGlkOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaXRlbTogSVNlbGVjdEl0ZW08VD4gPSB0aGlzLml0ZW1zLmZpbmQoXG4gICAgICAgICAgICAoc2VsZWN0ZWQpID0+IHNlbGVjdGVkLmlkID09PSBpZFxuICAgICAgICApIGFzIElTZWxlY3RJdGVtPFQ+O1xuXG4gICAgICAgIHRoaXMuc2V0VmFsdWUoaXRlbSk7XG4gICAgICAgIHRoaXMucG9wb3Zlci5jbG9zZSgpO1xuICAgICAgICB0aGlzLm9uSXRlbVNlbGVjdGVkLmVtaXQoaXRlbSk7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgICAgICBpZiAoY2hhbmdlcy5pbml0aWFsVmFsdWUgJiYgY2hhbmdlcy5pbml0aWFsVmFsdWUuY3VycmVudFZhbHVlICYmICF0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnNldEluaXRpYWxWYWx1ZShjaGFuZ2VzLmluaXRpYWxWYWx1ZS5jdXJyZW50VmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRJbml0aWFsVmFsdWUodmFsdWU6IElTZWxlY3RJdGVtPFQ+IHwgbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlQnlJZCh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc2V0VmFsdWUoaXRlbTogSVNlbGVjdEl0ZW08VD4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy53cml0ZVZhbHVlKGl0ZW0pO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKGl0ZW0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0VmFsdWVCeUlkKGlkOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLml0ZW1zLmZpbmQoKGl0ZW0pID0+IGl0ZW0uaWQgPT09IGlkKSBhcyBJU2VsZWN0SXRlbTxUPik7XG4gICAgfVxufVxuIl19