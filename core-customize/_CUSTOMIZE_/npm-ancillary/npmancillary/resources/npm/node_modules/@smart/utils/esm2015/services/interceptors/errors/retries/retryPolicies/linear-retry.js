/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * @ngdoc object
 * @name @smartutils.object:LINEAR_RETRY_DEFAULT_SETTING
 *
 * @description
 * The setting object to be used as default values for retry.
 */
export const LINEAR_RETRY_DEFAULT_SETTING = {
    MAX_ATTEMPT: 5,
    MAX_BACKOFF: 32000,
    MIN_BACKOFF: 0,
    RETRY_INTERVAL: 500
};
/**
 * @ngdoc service
 * @name @smartutils.services:linearRetry
 * @description
 * When used by a retry strategy, this service could provide a linear delay time to be used by the strategy before the next request is sent. The service also provides functionality to check if it is possible to perform a next retry.
 */
export class LinearRetry {
    calculateNextDelay(attemptCount, retryInterval, maxBackoff, minBackoff) {
        maxBackoff = maxBackoff || LINEAR_RETRY_DEFAULT_SETTING.MAX_BACKOFF;
        minBackoff = minBackoff || LINEAR_RETRY_DEFAULT_SETTING.MIN_BACKOFF;
        retryInterval = retryInterval || LINEAR_RETRY_DEFAULT_SETTING.RETRY_INTERVAL;
        const waveShield = minBackoff + Math.random();
        return Math.min(attemptCount * retryInterval + waveShield, maxBackoff);
    }
    canRetry(attemptCount, maxAttempt) {
        maxAttempt = maxAttempt || LINEAR_RETRY_DEFAULT_SETTING.MAX_ATTEMPT;
        return attemptCount <= maxAttempt;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZWFyLXJldHJ5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNtYXJ0L3V0aWxzLyIsInNvdXJjZXMiOlsic2VydmljZXMvaW50ZXJjZXB0b3JzL2Vycm9ycy9yZXRyaWVzL3JldHJ5UG9saWNpZXMvbGluZWFyLXJldHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBOzs7Ozs7R0FNRztBQUNILE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHO0lBQ3hDLFdBQVcsRUFBRSxDQUFDO0lBQ2QsV0FBVyxFQUFFLEtBQUs7SUFDbEIsV0FBVyxFQUFFLENBQUM7SUFDZCxjQUFjLEVBQUUsR0FBRztDQUN0QixDQUFDO0FBRUY7Ozs7O0dBS0c7QUFDSCxNQUFNLE9BQU8sV0FBVztJQUNwQixrQkFBa0IsQ0FDZCxZQUFvQixFQUNwQixhQUFzQixFQUN0QixVQUFtQixFQUNuQixVQUFtQjtRQUVuQixVQUFVLEdBQUcsVUFBVSxJQUFJLDRCQUE0QixDQUFDLFdBQVcsQ0FBQztRQUNwRSxVQUFVLEdBQUcsVUFBVSxJQUFJLDRCQUE0QixDQUFDLFdBQVcsQ0FBQztRQUNwRSxhQUFhLEdBQUcsYUFBYSxJQUFJLDRCQUE0QixDQUFDLGNBQWMsQ0FBQztRQUU3RSxNQUFNLFVBQVUsR0FBRyxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzlDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsYUFBYSxHQUFHLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRUQsUUFBUSxDQUFDLFlBQW9CLEVBQUUsVUFBbUI7UUFDOUMsVUFBVSxHQUFHLFVBQVUsSUFBSSw0QkFBNEIsQ0FBQyxXQUFXLENBQUM7UUFDcEUsT0FBTyxZQUFZLElBQUksVUFBVSxDQUFDO0lBQ3RDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFNBUCBTRSBvciBhbiBTQVAgYWZmaWxpYXRlIGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbW9kdWxlIHNtYXJ0dXRpbHNcbiAqL1xuaW1wb3J0IHsgSVJldHJ5IH0gZnJvbSAnLi9pLXJldHJ5Jztcbi8qKlxuICogQG5nZG9jIG9iamVjdFxuICogQG5hbWUgQHNtYXJ0dXRpbHMub2JqZWN0OkxJTkVBUl9SRVRSWV9ERUZBVUxUX1NFVFRJTkdcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBzZXR0aW5nIG9iamVjdCB0byBiZSB1c2VkIGFzIGRlZmF1bHQgdmFsdWVzIGZvciByZXRyeS5cbiAqL1xuZXhwb3J0IGNvbnN0IExJTkVBUl9SRVRSWV9ERUZBVUxUX1NFVFRJTkcgPSB7XG4gICAgTUFYX0FUVEVNUFQ6IDUsXG4gICAgTUFYX0JBQ0tPRkY6IDMyMDAwLFxuICAgIE1JTl9CQUNLT0ZGOiAwLFxuICAgIFJFVFJZX0lOVEVSVkFMOiA1MDBcbn07XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lIEBzbWFydHV0aWxzLnNlcnZpY2VzOmxpbmVhclJldHJ5XG4gKiBAZGVzY3JpcHRpb25cbiAqIFdoZW4gdXNlZCBieSBhIHJldHJ5IHN0cmF0ZWd5LCB0aGlzIHNlcnZpY2UgY291bGQgcHJvdmlkZSBhIGxpbmVhciBkZWxheSB0aW1lIHRvIGJlIHVzZWQgYnkgdGhlIHN0cmF0ZWd5IGJlZm9yZSB0aGUgbmV4dCByZXF1ZXN0IGlzIHNlbnQuIFRoZSBzZXJ2aWNlIGFsc28gcHJvdmlkZXMgZnVuY3Rpb25hbGl0eSB0byBjaGVjayBpZiBpdCBpcyBwb3NzaWJsZSB0byBwZXJmb3JtIGEgbmV4dCByZXRyeS5cbiAqL1xuZXhwb3J0IGNsYXNzIExpbmVhclJldHJ5IGltcGxlbWVudHMgSVJldHJ5IHtcbiAgICBjYWxjdWxhdGVOZXh0RGVsYXkoXG4gICAgICAgIGF0dGVtcHRDb3VudDogbnVtYmVyLFxuICAgICAgICByZXRyeUludGVydmFsPzogbnVtYmVyLFxuICAgICAgICBtYXhCYWNrb2ZmPzogbnVtYmVyLFxuICAgICAgICBtaW5CYWNrb2ZmPzogbnVtYmVyXG4gICAgKTogbnVtYmVyIHtcbiAgICAgICAgbWF4QmFja29mZiA9IG1heEJhY2tvZmYgfHwgTElORUFSX1JFVFJZX0RFRkFVTFRfU0VUVElORy5NQVhfQkFDS09GRjtcbiAgICAgICAgbWluQmFja29mZiA9IG1pbkJhY2tvZmYgfHwgTElORUFSX1JFVFJZX0RFRkFVTFRfU0VUVElORy5NSU5fQkFDS09GRjtcbiAgICAgICAgcmV0cnlJbnRlcnZhbCA9IHJldHJ5SW50ZXJ2YWwgfHwgTElORUFSX1JFVFJZX0RFRkFVTFRfU0VUVElORy5SRVRSWV9JTlRFUlZBTDtcblxuICAgICAgICBjb25zdCB3YXZlU2hpZWxkID0gbWluQmFja29mZiArIE1hdGgucmFuZG9tKCk7XG4gICAgICAgIHJldHVybiBNYXRoLm1pbihhdHRlbXB0Q291bnQgKiByZXRyeUludGVydmFsICsgd2F2ZVNoaWVsZCwgbWF4QmFja29mZik7XG4gICAgfVxuXG4gICAgY2FuUmV0cnkoYXR0ZW1wdENvdW50OiBudW1iZXIsIG1heEF0dGVtcHQ/OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgbWF4QXR0ZW1wdCA9IG1heEF0dGVtcHQgfHwgTElORUFSX1JFVFJZX0RFRkFVTFRfU0VUVElORy5NQVhfQVRURU1QVDtcbiAgICAgICAgcmV0dXJuIGF0dGVtcHRDb3VudCA8PSBtYXhBdHRlbXB0O1xuICAgIH1cbn1cbiJdfQ==