/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { values } from 'lodash';
import { AbstractForm } from './abstract-form';
export class FormList extends AbstractForm {
    constructor(component, control, inputs, parent, persist, forms = []) {
        super(component, control, inputs, persist, parent);
        this.forms = forms;
        forms.forEach((child) => {
            child.parent = this;
        });
    }
    /**
     * @override
     * Implements the abstract getPersistedValue() method.
     */
    getPersistedValue() {
        return this.forms.reduce((acc, child) => {
            if (!child.persist) {
                /**
                 * Look ahead and merge the values of the
                 * nested group, array or field.
                 *
                 * If it's a field, the values of the field
                 * would be an empty array, because it's not an object.
                 */
                return acc.concat(values(child.getPersistedValue()));
            }
            acc.push(child.getPersistedValue());
            return acc;
        }, []);
    }
    /**
     * Adds a form element to the end of the list.
     *
     * @param form
     */
    addFormElement(form) {
        this.forms = [...this.forms, form];
        this.control.push(form.control);
        form.parent = this;
    }
    /**
     * Removes a form element from the list.
     *
     * @param {string} index.
     */
    removeFormElement(index) {
        if (!this._isInBounds(index)) {
            return;
        }
        this.forms = this.forms.filter((f, i) => i !== index);
        this.control.removeAt(index);
    }
    /**
     * Returns an element at an index.
     *
     * @param index An index inbounds of the list.
     */
    formElementAt(index) {
        if (!this._isInBounds(index)) {
            return null;
        }
        return this.forms[index];
    }
    /**
     * The size of the list.
     */
    size() {
        return this.forms.length;
    }
    /**
     * Swaps a form element in the array.
     *
     * @param a The index of form a.
     * @param b The index of form b.
     */
    swapFormElements(a, b) {
        if (!this._isInBounds(a) || !this._isInBounds(b) || a === b) {
            return;
        }
        this.forms = [...this.forms];
        /**
         * Swapping form array.
         */
        const form = this.forms[a];
        this.forms[a] = this.forms[b];
        this.forms[b] = form;
        /**
         * Swapping control's array.
         */
        const control = this.control.at(a);
        this.control.insert(a, this.control.at(b));
        this.control.insert(b, control);
    }
    /**
     * Moves a form element in the array to a new position.
     *
     * @param from The previous index.
     * @param to The targeted index.
     */
    moveFormElement(from, to) {
        if (!this._isInBounds(from) || !this._isInBounds(to) || from === to) {
            return;
        }
        const delta = to < from ? -1 : 1;
        const tempControl = this.control.at(from);
        const tempForm = this.forms[from];
        for (let i = from; i !== to; i += delta) {
            const position = i + delta;
            this.control.setControl(i, this.control.at(position));
            this.forms[i] = this.forms[position];
        }
        this.control.setControl(to, tempControl);
        this.forms[to] = tempForm;
    }
    /**
     * Checks of the index is in bounds.
     *
     * @internal
     * @param index
     */
    _isInBounds(index) {
        return index < this.forms.length && index >= 0;
    }
}
//# sourceMappingURL=data:application/json;base64,