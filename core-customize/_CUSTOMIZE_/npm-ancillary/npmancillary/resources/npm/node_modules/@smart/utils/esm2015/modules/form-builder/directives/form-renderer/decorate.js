/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Subscription } from 'rxjs';
import { ControlPropDecorator, FormPropDecorator, FORM_PROP, InputPropDecorator } from '../../decorators';
/**
 * @internal
 * Trigger property changes for the component and mark for check
 * for those components that have onPush change detection strategy.
 *
 * @param {ComponentRef<any>} componentRef
 */
const onChange = ({ changeDetectorRef, instance }) => {
    instance.onDynamicInputChange && instance.onDynamicInputChange();
    changeDetectorRef.markForCheck();
};
const ɵ0 = onChange;
/**
 * @internal
 * Decorates the components with the decorators that were put into places.
 * The idea is made similar to how Angular decorates their properties with inputs.
 */
export const decorate = (componentRef, form) => {
    const instance = componentRef.instance;
    const decorators = instance.constructor[FORM_PROP];
    if (!Array.isArray(decorators)) {
        return new Subscription();
    }
    const props = new Map();
    decorators.forEach((decorator) => {
        const property = decorator.property;
        if (decorator instanceof InputPropDecorator) {
            const alias = decorator.alias;
            if (form.getInput(alias) === undefined && instance[property] !== undefined) {
                form.setInput(alias, instance[property]);
            }
            instance[property] = form.getInput(alias);
            props.set(alias, decorator);
        }
        else if (decorator instanceof FormPropDecorator) {
            instance[property] = form;
        }
        else if (decorator instanceof ControlPropDecorator) {
            instance[property] = form.control;
        }
    });
    onChange(componentRef);
    return form.inputChanges.subscribe(({ key, value }) => {
        const decorator = props.get(key);
        if (!decorator) {
            return;
        }
        instance[decorator.property] = value;
        onChange(componentRef);
    });
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac21hcnQvdXRpbHMvIiwic291cmNlcyI6WyJtb2R1bGVzL2Zvcm0tYnVpbGRlci9kaXJlY3RpdmVzL2Zvcm0tcmVuZGVyZXIvZGVjb3JhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUdwQyxPQUFPLEVBQ0gsb0JBQW9CLEVBQ3BCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1Qsa0JBQWtCLEVBRXJCLE1BQU0sa0JBQWtCLENBQUM7QUFFMUI7Ozs7OztHQU1HO0FBQ0gsTUFBTSxRQUFRLEdBQUcsQ0FBQyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBb0MsRUFBUSxFQUFFO0lBQ3pGLFFBQVEsQ0FBQyxvQkFBb0IsSUFBSSxRQUFRLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztJQUNqRSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUNyQyxDQUFDLENBQUM7O0FBRUY7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLFlBQStCLEVBQUUsSUFBa0IsRUFBZ0IsRUFBRTtJQUMxRixNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDO0lBQ3ZDLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFvQixDQUFDO0lBRXRFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQzVCLE9BQU8sSUFBSSxZQUFZLEVBQUUsQ0FBQztLQUM3QjtJQUVELE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxFQUE4QixDQUFDO0lBRXBELFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtRQUM3QixNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDO1FBQ3BDLElBQUksU0FBUyxZQUFZLGtCQUFrQixFQUFFO1lBQ3pDLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7WUFDOUIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLFNBQVMsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssU0FBUyxFQUFFO2dCQUN4RSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzthQUM1QztZQUNELFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQy9CO2FBQU0sSUFBSSxTQUFTLFlBQVksaUJBQWlCLEVBQUU7WUFDL0MsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQztTQUM3QjthQUFNLElBQUksU0FBUyxZQUFZLG9CQUFvQixFQUFFO1lBQ2xELFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ3JDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdkIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDbEQsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVqQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ1osT0FBTztTQUNWO1FBRUQsUUFBUSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDckMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzNCLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG5pbXBvcnQgeyBDb21wb25lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBBYnN0cmFjdEZvcm0sIER5bmFtaWNJbnB1dENoYW5nZSB9IGZyb20gJy4uLy4uL21vZGVscyc7XG5pbXBvcnQge1xuICAgIENvbnRyb2xQcm9wRGVjb3JhdG9yLFxuICAgIEZvcm1Qcm9wRGVjb3JhdG9yLFxuICAgIEZPUk1fUFJPUCxcbiAgICBJbnB1dFByb3BEZWNvcmF0b3IsXG4gICAgUHJvcERlY29yYXRvclxufSBmcm9tICcuLi8uLi9kZWNvcmF0b3JzJztcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIFRyaWdnZXIgcHJvcGVydHkgY2hhbmdlcyBmb3IgdGhlIGNvbXBvbmVudCBhbmQgbWFyayBmb3IgY2hlY2tcbiAqIGZvciB0aG9zZSBjb21wb25lbnRzIHRoYXQgaGF2ZSBvblB1c2ggY2hhbmdlIGRldGVjdGlvbiBzdHJhdGVneS5cbiAqXG4gKiBAcGFyYW0ge0NvbXBvbmVudFJlZjxhbnk+fSBjb21wb25lbnRSZWZcbiAqL1xuY29uc3Qgb25DaGFuZ2UgPSAoeyBjaGFuZ2VEZXRlY3RvclJlZiwgaW5zdGFuY2UgfTogQ29tcG9uZW50UmVmPER5bmFtaWNJbnB1dENoYW5nZT4pOiB2b2lkID0+IHtcbiAgICBpbnN0YW5jZS5vbkR5bmFtaWNJbnB1dENoYW5nZSAmJiBpbnN0YW5jZS5vbkR5bmFtaWNJbnB1dENoYW5nZSgpO1xuICAgIGNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xufTtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIERlY29yYXRlcyB0aGUgY29tcG9uZW50cyB3aXRoIHRoZSBkZWNvcmF0b3JzIHRoYXQgd2VyZSBwdXQgaW50byBwbGFjZXMuXG4gKiBUaGUgaWRlYSBpcyBtYWRlIHNpbWlsYXIgdG8gaG93IEFuZ3VsYXIgZGVjb3JhdGVzIHRoZWlyIHByb3BlcnRpZXMgd2l0aCBpbnB1dHMuXG4gKi9cbmV4cG9ydCBjb25zdCBkZWNvcmF0ZSA9IChjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxhbnk+LCBmb3JtOiBBYnN0cmFjdEZvcm0pOiBTdWJzY3JpcHRpb24gPT4ge1xuICAgIGNvbnN0IGluc3RhbmNlID0gY29tcG9uZW50UmVmLmluc3RhbmNlO1xuICAgIGNvbnN0IGRlY29yYXRvcnMgPSBpbnN0YW5jZS5jb25zdHJ1Y3RvcltGT1JNX1BST1BdIGFzIFByb3BEZWNvcmF0b3JbXTtcblxuICAgIGlmICghQXJyYXkuaXNBcnJheShkZWNvcmF0b3JzKSkge1xuICAgICAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgIH1cblxuICAgIGNvbnN0IHByb3BzID0gbmV3IE1hcDxzdHJpbmcsIElucHV0UHJvcERlY29yYXRvcj4oKTtcblxuICAgIGRlY29yYXRvcnMuZm9yRWFjaCgoZGVjb3JhdG9yKSA9PiB7XG4gICAgICAgIGNvbnN0IHByb3BlcnR5ID0gZGVjb3JhdG9yLnByb3BlcnR5O1xuICAgICAgICBpZiAoZGVjb3JhdG9yIGluc3RhbmNlb2YgSW5wdXRQcm9wRGVjb3JhdG9yKSB7XG4gICAgICAgICAgICBjb25zdCBhbGlhcyA9IGRlY29yYXRvci5hbGlhcztcbiAgICAgICAgICAgIGlmIChmb3JtLmdldElucHV0KGFsaWFzKSA9PT0gdW5kZWZpbmVkICYmIGluc3RhbmNlW3Byb3BlcnR5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZm9ybS5zZXRJbnB1dChhbGlhcywgaW5zdGFuY2VbcHJvcGVydHldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluc3RhbmNlW3Byb3BlcnR5XSA9IGZvcm0uZ2V0SW5wdXQoYWxpYXMpO1xuICAgICAgICAgICAgcHJvcHMuc2V0KGFsaWFzLCBkZWNvcmF0b3IpO1xuICAgICAgICB9IGVsc2UgaWYgKGRlY29yYXRvciBpbnN0YW5jZW9mIEZvcm1Qcm9wRGVjb3JhdG9yKSB7XG4gICAgICAgICAgICBpbnN0YW5jZVtwcm9wZXJ0eV0gPSBmb3JtO1xuICAgICAgICB9IGVsc2UgaWYgKGRlY29yYXRvciBpbnN0YW5jZW9mIENvbnRyb2xQcm9wRGVjb3JhdG9yKSB7XG4gICAgICAgICAgICBpbnN0YW5jZVtwcm9wZXJ0eV0gPSBmb3JtLmNvbnRyb2w7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIG9uQ2hhbmdlKGNvbXBvbmVudFJlZik7XG4gICAgcmV0dXJuIGZvcm0uaW5wdXRDaGFuZ2VzLnN1YnNjcmliZSgoeyBrZXksIHZhbHVlIH0pID0+IHtcbiAgICAgICAgY29uc3QgZGVjb3JhdG9yID0gcHJvcHMuZ2V0KGtleSk7XG5cbiAgICAgICAgaWYgKCFkZWNvcmF0b3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGluc3RhbmNlW2RlY29yYXRvci5wcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgb25DaGFuZ2UoY29tcG9uZW50UmVmKTtcbiAgICB9KTtcbn07XG4iXX0=