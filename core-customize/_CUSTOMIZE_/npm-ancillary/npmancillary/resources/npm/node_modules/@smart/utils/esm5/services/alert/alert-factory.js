/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Inject, Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { AlertConfig, AlertService as FundamentalAlertService } from '@fundamental-ngx/core';
import { IAlertServiceType } from '../../interfaces';
import { Alert } from './alert';
import { ALERT_CONFIG_DEFAULTS_TOKEN } from './alert-token';
/**
 * @ngdoc service
 * @name @smartutils.services:AlertFactory
 *
 * @description
 * The alertFactory allows you to create an instances of type Alert.<br />
 * When possible, it is better to use {@link @smartutils.services:AlertService AlertService} to show alerts.<br />
 * This factory is useful when one of the Alert class methods is needed, like
 * hide() or isDisplayed(), or if you want to create a single instance and hide/show when necessary.
 */
var AlertFactory = /** @class */ (function () {
    function AlertFactory(fundamentalAlertService, translateService, ALERT_CONFIG_DEFAULTS) {
        this.fundamentalAlertService = fundamentalAlertService;
        this.translateService = translateService;
        this.ALERT_CONFIG_DEFAULTS = ALERT_CONFIG_DEFAULTS;
    }
    /**
     * @ngdoc method
     * @name @smartutils.services:AlertFactory#createAlert
     * @methodOf @smartutils.services:AlertFactory
     * @param {string | Object} alertConf The alert's configuration {@link @smartutils.interfaces:IAlertConfig IAlertConfig}
     * @returns {Alert} An {@link Alert Alert} instance
     */
    AlertFactory.prototype.createAlert = function (alertConf) {
        var config = this.getAlertConfig(alertConf);
        return this.createAlertObject(config);
    };
    /**
     * @ngdoc method
     * @name @smartutils.services:AlertFactory#createInfo
     * @methodOf @smartutils.services:AlertFactory
     * @param {string | Object} alertConf The alert's configuration {@link @smartutils.interfaces:IAlertConfig IAlertConfig}
     * @returns {Alert} An {@link Alert Alert} instance with type set to INFO
     */
    AlertFactory.prototype.createInfo = function (alertConf) {
        var config = this.getAlertConfig(alertConf, IAlertServiceType.INFO);
        return this.createAlertObject(config);
    };
    /**
     * @ngdoc method
     * @name @smartutils.services:AlertFactory#createDanger
     * @methodOf @smartutils.services:AlertFactory
     * @param {string | Object} alertConf The alert's configuration {@link @smartutils.interfaces:IAlertConfig IAlertConfig}
     * @returns {Alert} An {@link Alert Alert} instance with type set to DANGER
     */
    AlertFactory.prototype.createDanger = function (alertConf) {
        var config = this.getAlertConfig(alertConf, IAlertServiceType.DANGER);
        return this.createAlertObject(config);
    };
    /**
     * @ngdoc method
     * @name @smartutils.services:AlertFactory#createWarning
     * @methodOf @smartutils.services:AlertFactory
     * @param {string | Object} alertConf The alert's configuration {@link @smartutils.interfaces:IAlertConfig IAlertConfig}
     * @returns {Alert} An {@link Alert Alert} instance with type set to WARNING
     */
    AlertFactory.prototype.createWarning = function (alertConf) {
        var config = this.getAlertConfig(alertConf, IAlertServiceType.WARNING);
        return this.createAlertObject(config);
    };
    /**
     * @ngdoc method
     * @name @smartutils.services:AlertFactory#createSuccess
     * @methodOf @smartutils.services:AlertFactory
     * @param {string | Object} alertConf The alert's configuration {@link @smartutils.interfaces:IAlertConfig IAlertConfig}
     * @returns {Alert} An {@link Alert Alert} instance with type set to SUCCESS
     */
    AlertFactory.prototype.createSuccess = function (alertConf) {
        var config = this.getAlertConfig(alertConf, IAlertServiceType.SUCCESS);
        return this.createAlertObject(config);
    };
    AlertFactory.prototype.getAlertConfig = function (strOrConf, type) {
        if (typeof strOrConf === 'string') {
            return {
                message: strOrConf,
                type: type || IAlertServiceType.INFO
            };
        }
        if (!strOrConf.type) {
            strOrConf.type = type || IAlertServiceType.INFO;
        }
        return strOrConf;
    };
    AlertFactory.prototype.createAlertObject = function (alertConf) {
        return new Alert(alertConf, this.ALERT_CONFIG_DEFAULTS, this.fundamentalAlertService, this.translateService);
    };
    AlertFactory.ctorParameters = function () { return [
        { type: FundamentalAlertService },
        { type: TranslateService },
        { type: AlertConfig, decorators: [{ type: Inject, args: [ALERT_CONFIG_DEFAULTS_TOKEN,] }] }
    ]; };
    AlertFactory = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(2, Inject(ALERT_CONFIG_DEFAULTS_TOKEN)),
        tslib_1.__metadata("design:paramtypes", [FundamentalAlertService,
            TranslateService,
            AlertConfig])
    ], AlertFactory);
    return AlertFactory;
}());
export { AlertFactory };
//# sourceMappingURL=data:application/json;base64,