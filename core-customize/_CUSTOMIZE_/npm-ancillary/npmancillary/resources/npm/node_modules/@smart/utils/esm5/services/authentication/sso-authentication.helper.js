/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Injectable, Injector } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Deferred, PromiseUtils, WindowUtils } from '../../utils';
var SSO_DIALOG_MARKER = 'sso';
var SSO_PROPERTIES;
(function (SSO_PROPERTIES) {
    SSO_PROPERTIES["SSO_CLIENT_ID"] = "SSO_CLIENT_ID";
    SSO_PROPERTIES["SSO_AUTHENTICATION_ENTRY_POINT"] = "SSO_AUTHENTICATION_ENTRY_POINT";
    SSO_PROPERTIES["SSO_LOGOUT_ENTRY_POINT"] = "SSO_LOGOUT_ENTRY_POINT";
    SSO_PROPERTIES["SSO_OAUTH2_AUTHENTICATION_ENTRY_POINT"] = "SSO_OAUTH2_AUTHENTICATION_ENTRY_POINT";
})(SSO_PROPERTIES || (SSO_PROPERTIES = {}));
var CHILD_SMARTEDIT_SENDING_AUTHTOKEN = 'ssoAuthenticate';
var CHILD_SMARTEDIT_SENDING_AUTH_ERROR = 'ssoAuthenticateError';
var SSODIALOG_WINDOW = 'SSODIALOG_WINDOW';
/*
 * Helper to initiate a SAML /SSO autentication sequence through a pop-up
 * (because the sequence involves auto-submiting html form at some point that causes a redirect and hence would
 * loose app context if not executed in a different window)
 * that ultimately loads the app again which in turn will detect its context and do the following:
 * - will not continue loading
 * - wil post the loginToken to the /authenticate end point to retrieve oAuth access
 * - will send back to parent (through postMessage) the retrieved oAuth access
 * - will close;
 */
var SSOAuthenticationHelper = /** @class */ (function () {
    function SSOAuthenticationHelper(windowUtils, promiseUtils, httpClient, injector) {
        this.windowUtils = windowUtils;
        this.promiseUtils = promiseUtils;
        this.httpClient = httpClient;
        this.injector = injector;
        this.logoutIframeId = 'logoutIframe';
        this.deferred = null;
        this.listenForAuthTokenBeingSentBack();
    }
    SSOAuthenticationHelper_1 = SSOAuthenticationHelper;
    /*
     * Initiates the SSO dialog through a pop-up
     */
    SSOAuthenticationHelper.prototype.launchSSODialog = function () {
        this.deferred = this.promiseUtils.defer();
        var ssoAuthenticationEntryPoint = this.injector.get(SSO_PROPERTIES.SSO_AUTHENTICATION_ENTRY_POINT) +
            this.getSSOContextPath();
        this.window.open(ssoAuthenticationEntryPoint, SSODIALOG_WINDOW, 'toolbar=no,scrollbars=no,resizable=no,top=200,left=200,width=1000,height=800');
        return this.deferred.promise;
    };
    /*
     * SSO happen in a popup window launched by AuthenticationHelper#launchSSODialog().
     * Once SSO is successful, a 'LoginToken' cookie is present, this is a pre-requisite for doing a POST to the /authenticate
     * endpoint that will return the Authorization bearer token.
     * This bearer is then sent with postMessage to the opener window, i.e. the SmartEdit application that will resume the pending 401 request.
     */
    SSOAuthenticationHelper.prototype.completeDialog = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.httpClient
                .post(_this.injector.get(SSO_PROPERTIES.SSO_OAUTH2_AUTHENTICATION_ENTRY_POINT), { client_id: _this.injector.get(SSO_PROPERTIES.SSO_CLIENT_ID) })
                .subscribe(function (authToken) {
                _this.window.opener.postMessage({
                    eventId: CHILD_SMARTEDIT_SENDING_AUTHTOKEN,
                    authToken: authToken
                }, _this.document.location.origin);
                _this.window.close();
                resolve();
            }, function (httpErrorResponse) {
                var clonableHttpErrorResponse = {
                    error: httpErrorResponse.error,
                    status: httpErrorResponse.status
                };
                _this.window.opener.postMessage({
                    eventId: CHILD_SMARTEDIT_SENDING_AUTH_ERROR,
                    error: clonableHttpErrorResponse
                }, _this.document.location.origin);
                _this.window.close();
                reject();
            });
        });
    };
    /*
     * case of the App being a popup only meant for authentication and spun up buy the main app
     */
    SSOAuthenticationHelper.prototype.isSSODialog = function () {
        return (this.window.name === SSODIALOG_WINDOW &&
            new RegExp("[?&]" + SSO_DIALOG_MARKER).test(location.search));
    };
    /*
     * case of:
     * - the App called from another app in an SSO context and that should therefore auto-authenticate with SSO
     * - last manual authentication was with SSO
     */
    SSOAuthenticationHelper.prototype.isAutoSSOMain = function () {
        return (SSOAuthenticationHelper_1.lastAuthenticatedWithSSO ||
            (this.window.name !== SSODIALOG_WINDOW &&
                new RegExp("[?&]" + SSO_DIALOG_MARKER).test(location.search)));
    };
    SSOAuthenticationHelper.prototype.logout = function () {
        var logoutIframe = this.logoutIframe;
        if (!logoutIframe) {
            logoutIframe = this.document.createElement('iframe');
            logoutIframe.id = this.logoutIframeId;
            logoutIframe.style.display = 'none';
            this.document.body.appendChild(logoutIframe);
        }
        logoutIframe.src = this.injector.get(SSO_PROPERTIES.SSO_LOGOUT_ENTRY_POINT);
        SSOAuthenticationHelper_1.lastAuthenticatedWithSSO = false;
        this.document.location.href = this.document.location.href.replace(this.getSSOContextPath(), this.document.location.pathname);
    };
    // context path of app in an SSO mode
    SSOAuthenticationHelper.prototype.getSSOContextPath = function () {
        return this.document.location.pathname + "?" + SSO_DIALOG_MARKER;
    };
    SSOAuthenticationHelper.prototype.listenForAuthTokenBeingSentBack = function () {
        var _this = this;
        this.window.addEventListener('message', function (event) {
            if (event.origin !== document.location.origin) {
                return;
            }
            _this.logoutIframe && _this.logoutIframe.remove();
            if (event.data.eventId === CHILD_SMARTEDIT_SENDING_AUTHTOKEN) {
                SSOAuthenticationHelper_1.lastAuthenticatedWithSSO = true;
                _this.deferred && _this.deferred.resolve(event.data.authToken);
            }
            else if (event.data.eventId === CHILD_SMARTEDIT_SENDING_AUTH_ERROR) {
                _this.deferred && _this.deferred.reject(event.data.error);
            }
        }, false);
    };
    Object.defineProperty(SSOAuthenticationHelper.prototype, "window", {
        get: function () {
            return this.windowUtils.getWindow();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SSOAuthenticationHelper.prototype, "document", {
        get: function () {
            return this.window.document;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SSOAuthenticationHelper.prototype, "logoutIframe", {
        get: function () {
            return this.document.querySelector("iframe#" + this.logoutIframeId);
        },
        enumerable: true,
        configurable: true
    });
    var SSOAuthenticationHelper_1;
    // static in order to be shared by multiple instances
    SSOAuthenticationHelper.lastAuthenticatedWithSSO = false;
    SSOAuthenticationHelper.ctorParameters = function () { return [
        { type: WindowUtils },
        { type: PromiseUtils },
        { type: HttpClient },
        { type: Injector }
    ]; };
    SSOAuthenticationHelper = SSOAuthenticationHelper_1 = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [WindowUtils,
            PromiseUtils,
            HttpClient,
            Injector])
    ], SSOAuthenticationHelper);
    return SSOAuthenticationHelper;
}());
export { SSOAuthenticationHelper };
//# sourceMappingURL=data:application/json;base64,