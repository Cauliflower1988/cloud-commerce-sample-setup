/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/*
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
/**
 * @ngdoc interface
 * @name smarteditServicesModule.interface:ISharedDataService
 *
 * @description
 * Provides an abstract extensible shared data service. Used to store any data to be used either the SmartEdit
 * application or the SmartEdit container.
 *
 * This class serves as an interface and should be extended, not instantiated.
 */
var ISharedDataService = /** @class */ (function () {
    function ISharedDataService() {
    }
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISharedDataService#get
     * @methodOf smarteditServicesModule.interface:ISharedDataService
     *
     * @description
     * Get the data for the given key.
     *
     * @param {String} key The key of the data to fetch
     */
    ISharedDataService.prototype.get = function (key) {
        'proxyFunction';
        return Promise.resolve({});
    };
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISharedDataService#set
     * @methodOf smarteditServicesModule.interface:ISharedDataService
     *
     * @description
     * Set data for the given key.
     *
     * @param {String} key The key of the data to set
     * @param {object} value The value of the data to set
     */
    ISharedDataService.prototype.set = function (key, value) {
        'proxyFunction';
        return Promise.resolve();
    };
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISharedDataService#update
     * @methodOf smarteditServicesModule.interface:ISharedDataService
     *
     * @description
     * Convenience method to retrieve and modify on the fly the content stored under a given key
     *
     * @param {String} key The key of the data to store
     * @param {Function} modifyingCallback callback fed with the value stored under the given key. The callback must return the new value of the object to update.
     */
    ISharedDataService.prototype.update = function (key, modifyingCallback) {
        'proxyFunction';
        return Promise.resolve();
    };
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISharedDataService#remove
     * @methodOf smarteditServicesModule.interface:ISharedDataService
     *
     * @description
     * Remove the entry for the given key.
     *
     * @param {String} key The key of the data to remove.
     * @returns {Promise<Cloneable>} A promise which resolves to the removed data for the given key.
     */
    ISharedDataService.prototype.remove = function (key) {
        'proxyFunction';
        return Promise.resolve({});
    };
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISharedDataService#containsKey
     * @methodOf smarteditServicesModule.interface:ISharedDataService
     *
     * @description
     * Checks the given key exists or not.
     *
     * @param {String} key The key of the data to check.
     * @returns {Promise<boolean>} A promise which resolves to true if the given key is found. Otherwise false.
     */
    ISharedDataService.prototype.containsKey = function (key) {
        'proxyFunction';
        return Promise.resolve(true);
    };
    return ISharedDataService;
}());
export { ISharedDataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaS1zaGFyZWQtZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNtYXJ0L3V0aWxzLyIsInNvdXJjZXMiOlsiaW50ZXJmYWNlcy9pLXNoYXJlZC1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBQ0g7O0dBRUc7QUFJSDs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUFBO0lBK0VBLENBQUM7SUE5RUc7Ozs7Ozs7OztPQVNHO0lBQ0gsZ0NBQUcsR0FBSCxVQUFJLEdBQVc7UUFDWCxlQUFlLENBQUM7UUFDaEIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRDs7Ozs7Ozs7OztPQVVHO0lBQ0gsZ0NBQUcsR0FBSCxVQUFJLEdBQVcsRUFBRSxLQUFnQjtRQUM3QixlQUFlLENBQUM7UUFDaEIsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVEOzs7Ozs7Ozs7O09BVUc7SUFDSCxtQ0FBTSxHQUFOLFVBQU8sR0FBVyxFQUFFLGlCQUF5QztRQUN6RCxlQUFlLENBQUM7UUFDaEIsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVEOzs7Ozs7Ozs7O09BVUc7SUFDSCxtQ0FBTSxHQUFOLFVBQU8sR0FBVztRQUNkLGVBQWUsQ0FBQztRQUNoQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVEOzs7Ozs7Ozs7O09BVUc7SUFDSCx3Q0FBVyxHQUFYLFVBQVksR0FBVztRQUNuQixlQUFlLENBQUM7UUFDaEIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFDTCx5QkFBQztBQUFELENBQUMsQUEvRUQsSUErRUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBTQVAgU0Ugb3IgYW4gU0FQIGFmZmlsaWF0ZSBjb21wYW55LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQG1vZHVsZSBzbWFydHV0aWxzXG4gKi9cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuXG5pbXBvcnQgeyBDbG9uZWFibGUgfSBmcm9tICcuLi9kdG9zJztcblxuLyoqXG4gKiBAbmdkb2MgaW50ZXJmYWNlXG4gKiBAbmFtZSBzbWFydGVkaXRTZXJ2aWNlc01vZHVsZS5pbnRlcmZhY2U6SVNoYXJlZERhdGFTZXJ2aWNlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBQcm92aWRlcyBhbiBhYnN0cmFjdCBleHRlbnNpYmxlIHNoYXJlZCBkYXRhIHNlcnZpY2UuIFVzZWQgdG8gc3RvcmUgYW55IGRhdGEgdG8gYmUgdXNlZCBlaXRoZXIgdGhlIFNtYXJ0RWRpdFxuICogYXBwbGljYXRpb24gb3IgdGhlIFNtYXJ0RWRpdCBjb250YWluZXIuXG4gKlxuICogVGhpcyBjbGFzcyBzZXJ2ZXMgYXMgYW4gaW50ZXJmYWNlIGFuZCBzaG91bGQgYmUgZXh0ZW5kZWQsIG5vdCBpbnN0YW50aWF0ZWQuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJU2hhcmVkRGF0YVNlcnZpY2Uge1xuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBzbWFydGVkaXRTZXJ2aWNlc01vZHVsZS5pbnRlcmZhY2U6SVNoYXJlZERhdGFTZXJ2aWNlI2dldFxuICAgICAqIEBtZXRob2RPZiBzbWFydGVkaXRTZXJ2aWNlc01vZHVsZS5pbnRlcmZhY2U6SVNoYXJlZERhdGFTZXJ2aWNlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBHZXQgdGhlIGRhdGEgZm9yIHRoZSBnaXZlbiBrZXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGRhdGEgdG8gZmV0Y2hcbiAgICAgKi9cbiAgICBnZXQoa2V5OiBzdHJpbmcpOiBQcm9taXNlPENsb25lYWJsZT4ge1xuICAgICAgICAncHJveHlGdW5jdGlvbic7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe30pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBzbWFydGVkaXRTZXJ2aWNlc01vZHVsZS5pbnRlcmZhY2U6SVNoYXJlZERhdGFTZXJ2aWNlI3NldFxuICAgICAqIEBtZXRob2RPZiBzbWFydGVkaXRTZXJ2aWNlc01vZHVsZS5pbnRlcmZhY2U6SVNoYXJlZERhdGFTZXJ2aWNlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTZXQgZGF0YSBmb3IgdGhlIGdpdmVuIGtleS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZGF0YSB0byBzZXRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBkYXRhIHRvIHNldFxuICAgICAqL1xuICAgIHNldChrZXk6IHN0cmluZywgdmFsdWU6IENsb25lYWJsZSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICAncHJveHlGdW5jdGlvbic7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgc21hcnRlZGl0U2VydmljZXNNb2R1bGUuaW50ZXJmYWNlOklTaGFyZWREYXRhU2VydmljZSN1cGRhdGVcbiAgICAgKiBAbWV0aG9kT2Ygc21hcnRlZGl0U2VydmljZXNNb2R1bGUuaW50ZXJmYWNlOklTaGFyZWREYXRhU2VydmljZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQ29udmVuaWVuY2UgbWV0aG9kIHRvIHJldHJpZXZlIGFuZCBtb2RpZnkgb24gdGhlIGZseSB0aGUgY29udGVudCBzdG9yZWQgdW5kZXIgYSBnaXZlbiBrZXlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZGF0YSB0byBzdG9yZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG1vZGlmeWluZ0NhbGxiYWNrIGNhbGxiYWNrIGZlZCB3aXRoIHRoZSB2YWx1ZSBzdG9yZWQgdW5kZXIgdGhlIGdpdmVuIGtleS4gVGhlIGNhbGxiYWNrIG11c3QgcmV0dXJuIHRoZSBuZXcgdmFsdWUgb2YgdGhlIG9iamVjdCB0byB1cGRhdGUuXG4gICAgICovXG4gICAgdXBkYXRlKGtleTogc3RyaW5nLCBtb2RpZnlpbmdDYWxsYmFjazogKG9sZFZhbHVlOiBhbnkpID0+IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICAncHJveHlGdW5jdGlvbic7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgc21hcnRlZGl0U2VydmljZXNNb2R1bGUuaW50ZXJmYWNlOklTaGFyZWREYXRhU2VydmljZSNyZW1vdmVcbiAgICAgKiBAbWV0aG9kT2Ygc21hcnRlZGl0U2VydmljZXNNb2R1bGUuaW50ZXJmYWNlOklTaGFyZWREYXRhU2VydmljZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmVtb3ZlIHRoZSBlbnRyeSBmb3IgdGhlIGdpdmVuIGtleS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZGF0YSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge1Byb21pc2U8Q2xvbmVhYmxlPn0gQSBwcm9taXNlIHdoaWNoIHJlc29sdmVzIHRvIHRoZSByZW1vdmVkIGRhdGEgZm9yIHRoZSBnaXZlbiBrZXkuXG4gICAgICovXG4gICAgcmVtb3ZlKGtleTogc3RyaW5nKTogUHJvbWlzZTxDbG9uZWFibGU+IHtcbiAgICAgICAgJ3Byb3h5RnVuY3Rpb24nO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHt9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgc21hcnRlZGl0U2VydmljZXNNb2R1bGUuaW50ZXJmYWNlOklTaGFyZWREYXRhU2VydmljZSNjb250YWluc0tleVxuICAgICAqIEBtZXRob2RPZiBzbWFydGVkaXRTZXJ2aWNlc01vZHVsZS5pbnRlcmZhY2U6SVNoYXJlZERhdGFTZXJ2aWNlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBDaGVja3MgdGhlIGdpdmVuIGtleSBleGlzdHMgb3Igbm90LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBkYXRhIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSBBIHByb21pc2Ugd2hpY2ggcmVzb2x2ZXMgdG8gdHJ1ZSBpZiB0aGUgZ2l2ZW4ga2V5IGlzIGZvdW5kLiBPdGhlcndpc2UgZmFsc2UuXG4gICAgICovXG4gICAgY29udGFpbnNLZXkoa2V5OiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgJ3Byb3h5RnVuY3Rpb24nO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xuICAgIH1cbn1cbiJdfQ==