/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/* forbiddenNameSpaces useClass:false */
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { FlawInjectionInterceptor } from './flaw-injection.interceptor';
/** @internal */
var FlawInjectionInterceptorModule = /** @class */ (function () {
    function FlawInjectionInterceptorModule() {
    }
    FlawInjectionInterceptorModule = tslib_1.__decorate([
        NgModule({
            imports: [],
            providers: [
                {
                    provide: HTTP_INTERCEPTORS,
                    useClass: FlawInjectionInterceptor,
                    multi: true
                },
                {
                    provide: APP_INITIALIZER,
                    useFactory: function () {
                        FlawInjectionInterceptor.registerRequestFlaw({
                            test: function (request) { return /sites\/[\w-]+\//.test(request.url); },
                            mutate: function (request) {
                                return request.clone({
                                    url: request.url.replace(/sites\/([\w-]+)\//, 'sites/' + Math.random() + '/')
                                });
                            }
                        });
                        return function (component) {
                            // an initializer useFactory must return a function
                        };
                    },
                    multi: true
                }
            ]
        })
    ], FlawInjectionInterceptorModule);
    return FlawInjectionInterceptorModule;
}());
export { FlawInjectionInterceptorModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhdy1pbmplY3Rpb24taW50ZXJjZXB0b3IuTW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNtYXJ0L3V0aWxzLyIsInNvdXJjZXMiOlsic2VydmljZXMvaW50ZXJjZXB0b3JzL2ZsYXdzL2ZsYXctaW5qZWN0aW9uLWludGVyY2VwdG9yLk1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHO0FBQ0gsd0NBQXdDO0FBQ3hDLE9BQU8sRUFBRSxlQUFlLEVBQWdCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RSxPQUFPLEVBQWUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUV4RSxnQkFBZ0I7QUFnQ2hCO0lBQUE7SUFBNkMsQ0FBQztJQUFqQyw4QkFBOEI7UUEvQjFDLFFBQVEsQ0FBQztZQUNOLE9BQU8sRUFBRSxFQUFFO1lBQ1gsU0FBUyxFQUFFO2dCQUNQO29CQUNJLE9BQU8sRUFBRSxpQkFBaUI7b0JBQzFCLFFBQVEsRUFBRSx3QkFBd0I7b0JBQ2xDLEtBQUssRUFBRSxJQUFJO2lCQUNkO2dCQUNEO29CQUNJLE9BQU8sRUFBRSxlQUFlO29CQUN4QixVQUFVLEVBQVY7d0JBQ0ksd0JBQXdCLENBQUMsbUJBQW1CLENBQUM7NEJBQ3pDLElBQUksRUFBRSxVQUFDLE9BQXlCLElBQUssT0FBQSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFuQyxDQUFtQzs0QkFDeEUsTUFBTSxFQUFFLFVBQUMsT0FBeUI7Z0NBQzlCLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQztvQ0FDakIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUNwQixtQkFBbUIsRUFDbkIsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQ2pDO2lDQUNKLENBQUMsQ0FBQzs0QkFDUCxDQUFDO3lCQUNKLENBQUMsQ0FBQzt3QkFFSCxPQUFPLFVBQUMsU0FBNEI7NEJBQ2hDLG1EQUFtRDt3QkFDdkQsQ0FBQyxDQUFDO29CQUNOLENBQUM7b0JBQ0QsS0FBSyxFQUFFLElBQUk7aUJBQ2Q7YUFDSjtTQUNKLENBQUM7T0FDVyw4QkFBOEIsQ0FBRztJQUFELHFDQUFDO0NBQUEsQUFBOUMsSUFBOEM7U0FBakMsOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG4vKiBmb3JiaWRkZW5OYW1lU3BhY2VzIHVzZUNsYXNzOmZhbHNlICovXG5pbXBvcnQgeyBBUFBfSU5JVElBTElaRVIsIENvbXBvbmVudFJlZiwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBSZXF1ZXN0LCBIVFRQX0lOVEVSQ0VQVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEZsYXdJbmplY3Rpb25JbnRlcmNlcHRvciB9IGZyb20gJy4vZmxhdy1pbmplY3Rpb24uaW50ZXJjZXB0b3InO1xuXG4vKiogQGludGVybmFsICovXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtdLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBIVFRQX0lOVEVSQ0VQVE9SUyxcbiAgICAgICAgICAgIHVzZUNsYXNzOiBGbGF3SW5qZWN0aW9uSW50ZXJjZXB0b3IsXG4gICAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgICAgICAgICB1c2VGYWN0b3J5KCkge1xuICAgICAgICAgICAgICAgIEZsYXdJbmplY3Rpb25JbnRlcmNlcHRvci5yZWdpc3RlclJlcXVlc3RGbGF3KHtcbiAgICAgICAgICAgICAgICAgICAgdGVzdDogKHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4pID0+IC9zaXRlc1xcL1tcXHctXStcXC8vLnRlc3QocmVxdWVzdC51cmwpLFxuICAgICAgICAgICAgICAgICAgICBtdXRhdGU6IChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdC5jbG9uZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiByZXF1ZXN0LnVybC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvc2l0ZXNcXC8oW1xcdy1dKylcXC8vLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2l0ZXMvJyArIE1hdGgucmFuZG9tKCkgKyAnLydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChjb21wb25lbnQ6IENvbXBvbmVudFJlZjxhbnk+KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFuIGluaXRpYWxpemVyIHVzZUZhY3RvcnkgbXVzdCByZXR1cm4gYSBmdW5jdGlvblxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgfVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgRmxhd0luamVjdGlvbkludGVyY2VwdG9yTW9kdWxlIHt9XG4iXX0=