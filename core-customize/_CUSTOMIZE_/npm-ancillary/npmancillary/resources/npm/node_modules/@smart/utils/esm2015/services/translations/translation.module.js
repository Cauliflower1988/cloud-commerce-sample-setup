/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
var TranslationModule_1;
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { TranslateLoader, TranslateModule, TranslateService } from '@ngx-translate/core';
import { BrowserService } from '../../services/browser';
import { IStorageService } from '../../interfaces';
import { ITranslationsFetchService } from './i-translations-fetch.service';
import { TranslateHttpLoader } from './translate-http.loader';
let TranslationModule = TranslationModule_1 = class TranslationModule {
    static forChild() {
        return TranslateModule.forChild({
            isolate: false,
            loader: {
                provide: TranslateLoader,
                useClass: TranslateHttpLoader
            }
        });
    }
    static forRoot(TranslationsFetchServiceClass) {
        return {
            ngModule: TranslationModule_1,
            providers: [
                {
                    provide: ITranslationsFetchService,
                    useClass: TranslationsFetchServiceClass
                },
                {
                    provide: APP_INITIALIZER,
                    useFactory(translate, storageService, browserService) {
                        storageService
                            .getValueFromLocalStorage('SELECTED_LANGUAGE', false)
                            .then((lang) => {
                            return lang ? lang.isoCode : browserService.getBrowserLocale();
                        }, () => {
                            return browserService.getBrowserLocale();
                        })
                            .then((lang) => {
                            translate.setDefaultLang(lang);
                            translate.use(lang);
                        });
                        return (component) => {
                            // an initializer useFactory must return a function
                        };
                    },
                    deps: [TranslateService, IStorageService, BrowserService],
                    multi: true
                }
            ]
        };
    }
};
TranslationModule = TranslationModule_1 = tslib_1.__decorate([
    NgModule({
        imports: [
            TranslateModule.forRoot({
                isolate: false,
                loader: {
                    provide: TranslateLoader,
                    useClass: TranslateHttpLoader
                }
            })
        ],
        exports: [TranslateModule]
    })
], TranslationModule);
export { TranslationModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRpb24ubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNtYXJ0L3V0aWxzLyIsInNvdXJjZXMiOlsic2VydmljZXMvdHJhbnNsYXRpb25zL3RyYW5zbGF0aW9uLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7R0FHRztBQUNILE9BQU8sRUFBRSxlQUFlLEVBQXFDLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RixPQUFPLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXpGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbkQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDM0UsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFjOUQsSUFBYSxpQkFBaUIseUJBQTlCLE1BQWEsaUJBQWlCO0lBQzFCLE1BQU0sQ0FBQyxRQUFRO1FBQ1gsT0FBTyxlQUFlLENBQUMsUUFBUSxDQUFDO1lBQzVCLE9BQU8sRUFBRSxLQUFLO1lBQ2QsTUFBTSxFQUFFO2dCQUNKLE9BQU8sRUFBRSxlQUFlO2dCQUN4QixRQUFRLEVBQUUsbUJBQW1CO2FBQ2hDO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQ1YsNkJBQWdGO1FBRWhGLE9BQU87WUFDSCxRQUFRLEVBQUUsbUJBQWlCO1lBQzNCLFNBQVMsRUFBRTtnQkFDUDtvQkFDSSxPQUFPLEVBQUUseUJBQXlCO29CQUNsQyxRQUFRLEVBQUUsNkJBQTZCO2lCQUMxQztnQkFDRDtvQkFDSSxPQUFPLEVBQUUsZUFBZTtvQkFDeEIsVUFBVSxDQUNOLFNBQTJCLEVBQzNCLGNBQStCLEVBQy9CLGNBQThCO3dCQUU5QixjQUFjOzZCQUNULHdCQUF3QixDQUFDLG1CQUFtQixFQUFFLEtBQUssQ0FBQzs2QkFDcEQsSUFBSSxDQUNELENBQUMsSUFBdUMsRUFBRSxFQUFFOzRCQUN4QyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLGdCQUFnQixFQUFFLENBQUM7d0JBQ25FLENBQUMsRUFDRCxHQUFHLEVBQUU7NEJBQ0QsT0FBTyxjQUFjLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQzt3QkFDN0MsQ0FBQyxDQUNKOzZCQUNBLElBQUksQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFOzRCQUNuQixTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDOzRCQUMvQixTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUN4QixDQUFDLENBQUMsQ0FBQzt3QkFFUCxPQUFPLENBQUMsU0FBNEIsRUFBRSxFQUFFOzRCQUNwQyxtREFBbUQ7d0JBQ3ZELENBQUMsQ0FBQztvQkFDTixDQUFDO29CQUNELElBQUksRUFBRSxDQUFDLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxjQUFjLENBQUM7b0JBQ3pELEtBQUssRUFBRSxJQUFJO2lCQUNkO2FBQ0o7U0FDSixDQUFDO0lBQ04sQ0FBQztDQUNKLENBQUE7QUFyRFksaUJBQWlCO0lBWjdCLFFBQVEsQ0FBQztRQUNOLE9BQU8sRUFBRTtZQUNMLGVBQWUsQ0FBQyxPQUFPLENBQUM7Z0JBQ3BCLE9BQU8sRUFBRSxLQUFLO2dCQUNkLE1BQU0sRUFBRTtvQkFDSixPQUFPLEVBQUUsZUFBZTtvQkFDeEIsUUFBUSxFQUFFLG1CQUFtQjtpQkFDaEM7YUFDSixDQUFDO1NBQ0w7UUFDRCxPQUFPLEVBQUUsQ0FBQyxlQUFlLENBQUM7S0FDN0IsQ0FBQztHQUNXLGlCQUFpQixDQXFEN0I7U0FyRFksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG5pbXBvcnQgeyBBUFBfSU5JVElBTElaRVIsIENvbXBvbmVudFJlZiwgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRyYW5zbGF0ZUxvYWRlciwgVHJhbnNsYXRlTW9kdWxlLCBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBtb2R1bGVVdGlscyB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IEJyb3dzZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYnJvd3Nlcic7XG5pbXBvcnQgeyBJU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IElUcmFuc2xhdGlvbnNGZXRjaFNlcnZpY2UgfSBmcm9tICcuL2ktdHJhbnNsYXRpb25zLWZldGNoLnNlcnZpY2UnO1xuaW1wb3J0IHsgVHJhbnNsYXRlSHR0cExvYWRlciB9IGZyb20gJy4vdHJhbnNsYXRlLWh0dHAubG9hZGVyJztcblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbXG4gICAgICAgIFRyYW5zbGF0ZU1vZHVsZS5mb3JSb290KHtcbiAgICAgICAgICAgIGlzb2xhdGU6IGZhbHNlLFxuICAgICAgICAgICAgbG9hZGVyOiB7XG4gICAgICAgICAgICAgICAgcHJvdmlkZTogVHJhbnNsYXRlTG9hZGVyLFxuICAgICAgICAgICAgICAgIHVzZUNsYXNzOiBUcmFuc2xhdGVIdHRwTG9hZGVyXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgXSxcbiAgICBleHBvcnRzOiBbVHJhbnNsYXRlTW9kdWxlXVxufSlcbmV4cG9ydCBjbGFzcyBUcmFuc2xhdGlvbk1vZHVsZSB7XG4gICAgc3RhdGljIGZvckNoaWxkKCkge1xuICAgICAgICByZXR1cm4gVHJhbnNsYXRlTW9kdWxlLmZvckNoaWxkKHtcbiAgICAgICAgICAgIGlzb2xhdGU6IGZhbHNlLFxuICAgICAgICAgICAgbG9hZGVyOiB7XG4gICAgICAgICAgICAgICAgcHJvdmlkZTogVHJhbnNsYXRlTG9hZGVyLFxuICAgICAgICAgICAgICAgIHVzZUNsYXNzOiBUcmFuc2xhdGVIdHRwTG9hZGVyXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JSb290KFxuICAgICAgICBUcmFuc2xhdGlvbnNGZXRjaFNlcnZpY2VDbGFzczogbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gSVRyYW5zbGF0aW9uc0ZldGNoU2VydmljZVxuICAgICk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IFRyYW5zbGF0aW9uTW9kdWxlLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBJVHJhbnNsYXRpb25zRmV0Y2hTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICB1c2VDbGFzczogVHJhbnNsYXRpb25zRmV0Y2hTZXJ2aWNlQ2xhc3NcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxuICAgICAgICAgICAgICAgICAgICB1c2VGYWN0b3J5KFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZVNlcnZpY2U6IElTdG9yYWdlU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyb3dzZXJTZXJ2aWNlOiBCcm93c2VyU2VydmljZVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2VTZXJ2aWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmdldFZhbHVlRnJvbUxvY2FsU3RvcmFnZSgnU0VMRUNURURfTEFOR1VBR0UnLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGxhbmc6IHsgbmFtZTogc3RyaW5nOyBpc29Db2RlOiBzdHJpbmcgfSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhbmcgPyBsYW5nLmlzb0NvZGUgOiBicm93c2VyU2VydmljZS5nZXRCcm93c2VyTG9jYWxlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBicm93c2VyU2VydmljZS5nZXRCcm93c2VyTG9jYWxlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKGxhbmc6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGUuc2V0RGVmYXVsdExhbmcobGFuZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZS51c2UobGFuZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoY29tcG9uZW50OiBDb21wb25lbnRSZWY8YW55PikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuIGluaXRpYWxpemVyIHVzZUZhY3RvcnkgbXVzdCByZXR1cm4gYSBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZGVwczogW1RyYW5zbGF0ZVNlcnZpY2UsIElTdG9yYWdlU2VydmljZSwgQnJvd3NlclNlcnZpY2VdLFxuICAgICAgICAgICAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG59XG4iXX0=