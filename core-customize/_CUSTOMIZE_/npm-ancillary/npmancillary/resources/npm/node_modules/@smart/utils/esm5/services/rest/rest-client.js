import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as lodash from 'lodash';
import { HttpHeaders } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { URIBuilder } from '../../utils';
/** @internal */
var RestClient = /** @class */ (function () {
    function RestClient(httpClient, url, identifierName) {
        var _this = this;
        this.httpClient = httpClient;
        this.url = url;
        this.identifierName = identifierName;
        this.DEFAULT_HEADERS = { 'x-requested-with': 'Angular' };
        this.DEFAULT_OPTIONS = { headers: {} };
        // will activate response headers appending
        this.metadataActivated = false;
        ///////////////////////////////////////////
        /// INTERNAL METHODS NEEDED FOR GATEWAY ///
        ///////////////////////////////////////////
        this.getMethodForSingleInstance = function (name) {
            switch (name) {
                case 'getById':
                    return function (id, options) {
                        if (options === void 0) { options = _this.DEFAULT_OPTIONS; }
                        return _this.getById(id, options);
                    };
                case 'get':
                    return function (searchParams, options) {
                        if (options === void 0) { options = _this.DEFAULT_OPTIONS; }
                        return _this.get(searchParams, options);
                    };
                case 'update':
                    return function (payload, options) {
                        if (options === void 0) { options = _this.DEFAULT_OPTIONS; }
                        return _this.update(payload, options);
                    };
                case 'save':
                    return function (payload, options) {
                        if (options === void 0) { options = _this.DEFAULT_OPTIONS; }
                        return _this.save(payload, options);
                    };
                case 'patch':
                    return function (payload, options) {
                        if (options === void 0) { options = _this.DEFAULT_OPTIONS; }
                        return _this.patch(payload, options);
                    };
                case 'remove':
                    return function (payload, options) {
                        if (options === void 0) { options = _this.DEFAULT_OPTIONS; }
                        return _this.remove(payload, options);
                    };
            }
        };
        this.getMethodForArray = function (name) {
            switch (name) {
                case 'query':
                    return function (params, options) {
                        if (options === void 0) { options = _this.DEFAULT_OPTIONS; }
                        return _this.query(params, options);
                    };
            }
        };
    }
    RestClient.prototype.getById = function (identifier, options) {
        if (options === void 0) { options = this.DEFAULT_OPTIONS; }
        return this.addHeadersToBody(this.httpClient.get(this.url + "/" + identifier, {
            headers: this.buildRequestHeaders(options.headers || {}),
            observe: 'response'
        })).toPromise();
    };
    RestClient.prototype.get = function (searchParams, options) {
        if (options === void 0) { options = this.DEFAULT_OPTIONS; }
        var params = this.convertToTypeMapOfString(searchParams);
        return this.addHeadersToBody(this.httpClient.get(this.interpolateParamsInURL(this.url, params), {
            params: this.formatQueryString(this.determineTrueQueryStringParams(this.url, searchParams)),
            headers: this.buildRequestHeaders(options.headers || {}),
            observe: 'response'
        })).toPromise();
    };
    RestClient.prototype.query = function (searchParams, options) {
        if (options === void 0) { options = this.DEFAULT_OPTIONS; }
        var params = searchParams ? this.convertToTypeMapOfString(searchParams) : searchParams;
        return this.addHeadersToBody(this.httpClient.get(this.interpolateParamsInURL(this.url, params), {
            params: this.formatQueryString(this.determineTrueQueryStringParams(this.url, searchParams)),
            headers: this.buildRequestHeaders(options.headers || {}),
            observe: 'response'
        }))
            .pipe(map(function (arr) { return arr || []; }))
            .toPromise();
    };
    RestClient.prototype.page = function (pageable, options) {
        if (options === void 0) { options = this.DEFAULT_OPTIONS; }
        return (this.addHeadersToBody(this.httpClient.get(this.interpolateParamsInURL(this.url, pageable), {
            params: this.formatQueryString(this.determineTrueQueryStringParams(this.url, pageable)),
            headers: this.buildRequestHeaders(options.headers || {}),
            observe: 'response'
        }))
            // force typing to accept the fact that a page is never null
            .pipe(map(function (arr) { return arr; }))
            .toPromise());
    };
    RestClient.prototype.update = function (payload, options) {
        var _this = this;
        if (options === void 0) { options = this.DEFAULT_OPTIONS; }
        return this.performIdentifierCheck(payload)
            .then(function () { return _this.buildUrlWithIdentifier(payload); })
            .then(function (url) {
            return _this.httpClient
                .put(url, payload, {
                headers: _this.buildRequestHeaders(options.headers || {})
            })
                .toPromise();
        });
    };
    RestClient.prototype.save = function (payload, options) {
        if (options === void 0) { options = this.DEFAULT_OPTIONS; }
        return this.httpClient
            .post(this.interpolateParamsInURL(this.url, payload), payload, {
            headers: this.buildRequestHeaders(options.headers || {})
        })
            .toPromise();
    };
    RestClient.prototype.patch = function (payload, options) {
        var _this = this;
        if (options === void 0) { options = this.DEFAULT_OPTIONS; }
        return this.performIdentifierCheck(payload)
            .then(function () { return _this.buildUrlWithIdentifier(payload); })
            .then(function (url) {
            return _this.httpClient
                .patch(url, payload, {
                headers: _this.buildRequestHeaders(options.headers || {})
            })
                .toPromise();
        });
    };
    RestClient.prototype.remove = function (payload, options) {
        var _this = this;
        if (options === void 0) { options = this.DEFAULT_OPTIONS; }
        return this.performIdentifierCheck(payload)
            .then(function () { return _this.buildUrlWithIdentifier(payload); })
            .then(function (url) {
            return _this.httpClient
                .delete(url, { headers: _this.buildRequestHeaders(options.headers || {}) })
                .toPromise();
        });
    };
    RestClient.prototype.activateMetadata = function () {
        this.metadataActivated = true;
    };
    RestClient.prototype.convertToTypeMapOfString = function (searchParams) {
        return lodash.mapValues(searchParams, function (val) { return String(val); });
    };
    RestClient.prototype.formatQueryString = function (_params) {
        return this.sortByKeys(_params);
    };
    RestClient.prototype.addHeadersToBody = function (observable) {
        var _this = this;
        return observable.pipe(map(function (response) {
            var data = response.body;
            if (_this.metadataActivated && data) {
                // used by @Cached annotation
                data.headers = response.headers;
            }
            return data;
        }));
    };
    /*
     * interpolation URL placeholders interpolation with potential matches in queryString
     */
    RestClient.prototype.interpolateParamsInURL = function (_url, payload) {
        // only keep params to be found in the URI or query params
        if (payload && typeof payload !== 'string') {
            return new URIBuilder(_url)
                .replaceParams(payload)
                .sanitize()
                .build();
        }
        else {
            return _url;
        }
    };
    /*
     * remove from queryString any param needed for URL placeholders interpolation
     */
    RestClient.prototype.determineTrueQueryStringParams = function (url, payload) {
        return typeof payload === 'object'
            ? Object.keys(payload).reduce(function (prev, next) {
                if (!new RegExp(':' + next + '/').test(url) &&
                    !new RegExp(':' + next + '$').test(url) &&
                    !new RegExp(':' + next + '&').test(url) &&
                    !lodash.isNil(payload[next])) {
                    prev[next] = payload[next];
                }
                return prev;
            }, {})
            : {};
    };
    RestClient.prototype.sortByKeys = function (obj) {
        var keys = lodash.sortBy(lodash.keys(obj), function (key) {
            return key;
        });
        return lodash.zipObject(keys, lodash.map(keys, function (key) {
            return obj[key];
        }));
    };
    RestClient.prototype.performIdentifierCheck = function (payload) {
        var identifier = typeof payload === 'string' ? payload : payload[this.identifierName];
        if (!identifier) {
            return Promise.reject('no data was found under the ' +
                identifier +
                ' field of object ' +
                JSON.stringify(payload) +
                ', it is necessary for update and remove operations');
        }
        return Promise.resolve();
    };
    RestClient.prototype.buildUrlWithIdentifier = function (payload) {
        var identifier = typeof payload === 'string' ? payload : payload[this.identifierName];
        var url = this.interpolateParamsInURL("" + this.url, payload);
        url =
            url.includes('?') || this.url.includes(':' + this.identifierName)
                ? url
                : url + "/" + identifier;
        return Promise.resolve(url);
    };
    RestClient.prototype.buildRequestHeaders = function (headers) {
        return new HttpHeaders(tslib_1.__assign({}, this.DEFAULT_HEADERS, headers));
    };
    return RestClient;
}());
export { RestClient };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdC1jbGllbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac21hcnQvdXRpbHMvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9yZXN0L3Jlc3QtY2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7QUFDSDs7O0dBR0c7QUFDSCxPQUFPLEtBQUssTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUNqQyxPQUFPLEVBQWMsV0FBVyxFQUFnQixNQUFNLHNCQUFzQixDQUFDO0FBRTdFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBS3pDLGdCQUFnQjtBQUNoQjtJQU1JLG9CQUNZLFVBQXNCLEVBQ2QsR0FBVyxFQUNuQixjQUFzQjtRQUhsQyxpQkFJSTtRQUhRLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDZCxRQUFHLEdBQUgsR0FBRyxDQUFRO1FBQ25CLG1CQUFjLEdBQWQsY0FBYyxDQUFRO1FBUmpCLG9CQUFlLEdBQXFCLEVBQUUsa0JBQWtCLEVBQUUsU0FBUyxFQUFFLENBQUM7UUFDdEUsb0JBQWUsR0FBaUIsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDakUsMkNBQTJDO1FBQ25DLHNCQUFpQixHQUFHLEtBQUssQ0FBQztRQXdIbEMsMkNBQTJDO1FBQzNDLDJDQUEyQztRQUMzQywyQ0FBMkM7UUFFM0MsK0JBQTBCLEdBQUcsVUFDekIsSUFBZ0U7WUFFaEUsUUFBUSxJQUFJLEVBQUU7Z0JBQ1YsS0FBSyxTQUFTO29CQUNWLE9BQU8sVUFBQyxFQUFVLEVBQUUsT0FBNEM7d0JBQTVDLHdCQUFBLEVBQUEsVUFBd0IsS0FBSSxDQUFDLGVBQWU7d0JBQzVELE9BQUEsS0FBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDO29CQUF6QixDQUF5QixDQUFDO2dCQUNsQyxLQUFLLEtBQUs7b0JBQ04sT0FBTyxVQUFDLFlBQTBCLEVB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SUErUUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAyMCBTQVAgU0Ugb3IgYW4gU0FQIGFmZmlsaWF0ZSBjb21wYW55LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQG1vZHVsZSBzbWFydHV0aWxzXG4gKi9cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFNBUCBTRSBvciBhbiBTQVAgYWZmaWxpYXRlIGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbW9kdWxlIHNtYXJ0dXRpbHNcbiAqL1xuaW1wb3J0ICogYXMgbG9kYXNoIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycywgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUGFnZSwgUGFnZWFibGUsIFBheWxvYWQsIFR5cGVkTWFwIH0gZnJvbSAnLi4vLi4vZHRvcyc7XG5pbXBvcnQgeyBVUklCdWlsZGVyIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHsgSVJlc3RPcHRpb25zLCBJUmVzdFNlcnZpY2UsIFNlYXJjaFBhcmFtcyB9IGZyb20gJy4vaS1yZXN0LXNlcnZpY2UnO1xuXG5leHBvcnQgdHlwZSBPYmplY3RXaXRoSGVhZGVyczxUPiA9IFQgJiB7IGhlYWRlcnM/OiBIdHRwSGVhZGVycyB9O1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY2xhc3MgUmVzdENsaWVudDxUPiBpbXBsZW1lbnRzIElSZXN0U2VydmljZTxUPiB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBERUZBVUxUX0hFQURFUlM6IFR5cGVkTWFwPHN0cmluZz4gPSB7ICd4LXJlcXVlc3RlZC13aXRoJzogJ0FuZ3VsYXInIH07XG4gICAgcHJpdmF0ZSByZWFkb25seSBERUZBVUxUX09QVElPTlM6IElSZXN0T3B0aW9ucyA9IHsgaGVhZGVyczoge30gfTtcbiAgICAvLyB3aWxsIGFjdGl2YXRlIHJlc3BvbnNlIGhlYWRlcnMgYXBwZW5kaW5nXG4gICAgcHJpdmF0ZSBtZXRhZGF0YUFjdGl2YXRlZCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCxcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IHVybDogc3RyaW5nLFxuICAgICAgICBwcml2YXRlIGlkZW50aWZpZXJOYW1lOiBzdHJpbmdcbiAgICApIHt9XG5cbiAgICBnZXRCeUlkPFMgZXh0ZW5kcyBUID0gVD4oXG4gICAgICAgIGlkZW50aWZpZXI6IHN0cmluZyxcbiAgICAgICAgb3B0aW9uczogSVJlc3RPcHRpb25zID0gdGhpcy5ERUZBVUxUX09QVElPTlNcbiAgICApOiBQcm9taXNlPE9iamVjdFdpdGhIZWFkZXJzPFM+IHwgbnVsbD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRIZWFkZXJzVG9Cb2R5KFxuICAgICAgICAgICAgdGhpcy5odHRwQ2xpZW50LmdldDxTPihgJHt0aGlzLnVybH0vJHtpZGVudGlmaWVyfWAsIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmJ1aWxkUmVxdWVzdEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzIHx8IHt9KSxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiAncmVzcG9uc2UnXG4gICAgICAgICAgICB9KVxuICAgICAgICApLnRvUHJvbWlzZSgpO1xuICAgIH1cbiAgICBnZXQ8UyBleHRlbmRzIFQgPSBUPihcbiAgICAgICAgc2VhcmNoUGFyYW1zOiBTZWFyY2hQYXJhbXMsXG4gICAgICAgIG9wdGlvbnM6IElSZXN0T3B0aW9ucyA9IHRoaXMuREVGQVVMVF9PUFRJT05TXG4gICAgKTogUHJvbWlzZTxPYmplY3RXaXRoSGVhZGVyczxTPiB8IG51bGw+IHtcbiAgICAgICAgY29uc3QgcGFyYW1zID0gdGhpcy5jb252ZXJ0VG9UeXBlTWFwT2ZTdHJpbmcoc2VhcmNoUGFyYW1zKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkSGVhZGVyc1RvQm9keShcbiAgICAgICAgICAgIHRoaXMuaHR0cENsaWVudC5nZXQ8Uz4odGhpcy5pbnRlcnBvbGF0ZVBhcmFtc0luVVJMKHRoaXMudXJsLCBwYXJhbXMpLCB7XG4gICAgICAgICAgICAgICAgcGFyYW1zOiB0aGlzLmZvcm1hdFF1ZXJ5U3RyaW5nKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRldGVybWluZVRydWVRdWVyeVN0cmluZ1BhcmFtcyh0aGlzLnVybCwgc2VhcmNoUGFyYW1zKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5idWlsZFJlcXVlc3RIZWFkZXJzKG9wdGlvbnMuaGVhZGVycyB8fCB7fSksXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogJ3Jlc3BvbnNlJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKS50b1Byb21pc2UoKTtcbiAgICB9XG4gICAgcXVlcnk8UyBleHRlbmRzIFQgPSBUPihcbiAgICAgICAgc2VhcmNoUGFyYW1zPzogU2VhcmNoUGFyYW1zLFxuICAgICAgICBvcHRpb25zOiBJUmVzdE9wdGlvbnMgPSB0aGlzLkRFRkFVTFRfT1BUSU9OU1xuICAgICk6IFByb21pc2U8T2JqZWN0V2l0aEhlYWRlcnM8U1tdPj4ge1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBzZWFyY2hQYXJhbXMgPyB0aGlzLmNvbnZlcnRUb1R5cGVNYXBPZlN0cmluZyhzZWFyY2hQYXJhbXMpIDogc2VhcmNoUGFyYW1zO1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRIZWFkZXJzVG9Cb2R5KFxuICAgICAgICAgICAgdGhpcy5odHRwQ2xpZW50LmdldDxTW10+KHRoaXMuaW50ZXJwb2xhdGVQYXJhbXNJblVSTCh0aGlzLnVybCwgcGFyYW1zKSwge1xuICAgICAgICAgICAgICAgIHBhcmFtczogdGhpcy5mb3JtYXRRdWVyeVN0cmluZyhcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXRlcm1pbmVUcnVlUXVlcnlTdHJpbmdQYXJhbXModGhpcy51cmwsIHNlYXJjaFBhcmFtcylcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuYnVpbGRSZXF1ZXN0SGVhZGVycyhvcHRpb25zLmhlYWRlcnMgfHwge30pLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6ICdyZXNwb25zZSdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgICAgICAgIC5waXBlKG1hcCgoYXJyOiBTW10gfCBudWxsKSA9PiBhcnIgfHwgW10pKVxuICAgICAgICAgICAgLnRvUHJvbWlzZSgpO1xuICAgIH1cbiAgICBwYWdlPFMgZXh0ZW5kcyBUID0gVD4oXG4gICAgICAgIHBhZ2VhYmxlOiBQYWdlYWJsZSxcbiAgICAgICAgb3B0aW9uczogSVJlc3RPcHRpb25zID0gdGhpcy5ERUZBVUxUX09QVElPTlNcbiAgICApOiBQcm9taXNlPE9iamVjdFdpdGhIZWFkZXJzPFBhZ2U8Uz4+PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLmFkZEhlYWRlcnNUb0JvZHkoXG4gICAgICAgICAgICAgICAgdGhpcy5odHRwQ2xpZW50LmdldDxQYWdlPFM+Pih0aGlzLmludGVycG9sYXRlUGFyYW1zSW5VUkwodGhpcy51cmwsIHBhZ2VhYmxlKSwge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHRoaXMuZm9ybWF0UXVlcnlTdHJpbmcoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRldGVybWluZVRydWVRdWVyeVN0cmluZ1BhcmFtcyh0aGlzLnVybCwgcGFnZWFibGUpXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuYnVpbGRSZXF1ZXN0SGVhZGVycyhvcHRpb25zLmhlYWRlcnMgfHwge30pLFxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlOiAncmVzcG9uc2UnXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAvLyBmb3JjZSB0eXBpbmcgdG8gYWNjZXB0IHRoZSBmYWN0IHRoYXQgYSBwYWdlIGlzIG5ldmVyIG51bGxcbiAgICAgICAgICAgICAgICAucGlwZShtYXAoKGFycjogUGFnZTxTPiB8IG51bGwpID0+IChhcnIgYXMgYW55KSBhcyBQYWdlPFM+KSlcbiAgICAgICAgICAgICAgICAudG9Qcm9taXNlKClcbiAgICAgICAgKTtcbiAgICB9XG4gICAgdXBkYXRlPFMgZXh0ZW5kcyBUID0gVD4oXG4gICAgICAgIHBheWxvYWQ6IFBheWxvYWQsXG4gICAgICAgIG9wdGlvbnM6IElSZXN0T3B0aW9ucyA9IHRoaXMuREVGQVVMVF9PUFRJT05TXG4gICAgKTogUHJvbWlzZTxTPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnBlcmZvcm1JZGVudGlmaWVyQ2hlY2socGF5bG9hZClcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHRoaXMuYnVpbGRVcmxXaXRoSWRlbnRpZmllcihwYXlsb2FkKSlcbiAgICAgICAgICAgIC50aGVuKCh1cmw6IHN0cmluZykgPT5cbiAgICAgICAgICAgICAgICB0aGlzLmh0dHBDbGllbnRcbiAgICAgICAgICAgICAgICAgICAgLnB1dDxTPih1cmwsIHBheWxvYWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuYnVpbGRSZXF1ZXN0SGVhZGVycyhvcHRpb25zLmhlYWRlcnMgfHwge30pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50b1Byb21pc2UoKVxuICAgICAgICAgICAgKTtcbiAgICB9XG4gICAgc2F2ZTxTIGV4dGVuZHMgVCA9IFQ+KFxuICAgICAgICBwYXlsb2FkOiBQYXlsb2FkLFxuICAgICAgICBvcHRpb25zOiBJUmVzdE9wdGlvbnMgPSB0aGlzLkRFRkFVTFRfT1BUSU9OU1xuICAgICk6IFByb21pc2U8Uz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50XG4gICAgICAgICAgICAucG9zdDxTPih0aGlzLmludGVycG9sYXRlUGFyYW1zSW5VUkwodGhpcy51cmwsIHBheWxvYWQpLCBwYXlsb2FkLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5idWlsZFJlcXVlc3RIZWFkZXJzKG9wdGlvbnMuaGVhZGVycyB8fCB7fSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudG9Qcm9taXNlKCk7XG4gICAgfVxuXG4gICAgcGF0Y2g8UyBleHRlbmRzIFQgPSBUPihcbiAgICAgICAgcGF5bG9hZDogUGF5bG9hZCxcbiAgICAgICAgb3B0aW9uczogSVJlc3RPcHRpb25zID0gdGhpcy5ERUZBVUxUX09QVElPTlNcbiAgICApOiBQcm9taXNlPFM+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyZm9ybUlkZW50aWZpZXJDaGVjayhwYXlsb2FkKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4gdGhpcy5idWlsZFVybFdpdGhJZGVudGlmaWVyKHBheWxvYWQpKVxuICAgICAgICAgICAgLnRoZW4oKHVybDogc3RyaW5nKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuaHR0cENsaWVudFxuICAgICAgICAgICAgICAgICAgICAucGF0Y2g8Uz4odXJsLCBwYXlsb2FkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmJ1aWxkUmVxdWVzdEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzIHx8IHt9KVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAudG9Qcm9taXNlKClcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgcmVtb3ZlKHBheWxvYWQ6IHN0cmluZyB8IFBheWxvYWQsIG9wdGlvbnM6IElSZXN0T3B0aW9ucyA9IHRoaXMuREVGQVVMVF9PUFRJT05TKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyZm9ybUlkZW50aWZpZXJDaGVjayhwYXlsb2FkKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4gdGhpcy5idWlsZFVybFdpdGhJZGVudGlmaWVyKHBheWxvYWQpKVxuICAgICAgICAgICAgLnRoZW4oKHVybDogc3RyaW5nKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuaHR0cENsaWVudFxuICAgICAgICAgICAgICAgICAgICAuZGVsZXRlKHVybCwgeyBoZWFkZXJzOiB0aGlzLmJ1aWxkUmVxdWVzdEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzIHx8IHt9KSB9KVxuICAgICAgICAgICAgICAgICAgICAudG9Qcm9taXNlKClcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vLyBJTlRFUk5BTCBNRVRIT0RTIE5FRURFRCBGT1IgR0FURVdBWSAvLy9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICBnZXRNZXRob2RGb3JTaW5nbGVJbnN0YW5jZSA9IChcbiAgICAgICAgbmFtZTogJ2dldEJ5SWQnIHwgJ2dldCcgfCAndXBkYXRlJyB8ICdzYXZlJyB8ICdyZW1vdmUnIHwgJ3BhdGNoJ1xuICAgICk6ICgocGFyYW1zOiBhbnkpID0+IFByb21pc2U8YW55PikgPT4ge1xuICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2dldEJ5SWQnOlxuICAgICAgICAgICAgICAgIHJldHVybiAoaWQ6IHN0cmluZywgb3B0aW9uczogSVJlc3RPcHRpb25zID0gdGhpcy5ERUZBVUxUX09QVElPTlMpID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0QnlJZChpZCwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjYXNlICdnZXQnOlxuICAgICAgICAgICAgICAgIHJldHVybiAoc2VhcmNoUGFyYW1zOiBTZWFyY2hQYXJhbXMsIG9wdGlvbnM6IElSZXN0T3B0aW9ucyA9IHRoaXMuREVGQVVMVF9PUFRJT05TKSA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldChzZWFyY2hQYXJhbXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgY2FzZSAndXBkYXRlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKHBheWxvYWQ6IFBheWxvYWQsIG9wdGlvbnM6IElSZXN0T3B0aW9ucyA9IHRoaXMuREVGQVVMVF9PUFRJT05TKSA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZShwYXlsb2FkLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNhc2UgJ3NhdmUnOlxuICAgICAgICAgICAgICAgIHJldHVybiAocGF5bG9hZDogUGF5bG9hZCwgb3B0aW9uczogSVJlc3RPcHRpb25zID0gdGhpcy5ERUZBVUxUX09QVElPTlMpID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZShwYXlsb2FkLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNhc2UgJ3BhdGNoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKHBheWxvYWQ6IFBheWxvYWQsIG9wdGlvbnM6IElSZXN0T3B0aW9ucyA9IHRoaXMuREVGQVVMVF9PUFRJT05TKSA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhdGNoKHBheWxvYWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgY2FzZSAncmVtb3ZlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKHBheWxvYWQ6IHN0cmluZyB8IFBheWxvYWQsIG9wdGlvbnM6IElSZXN0T3B0aW9ucyA9IHRoaXMuREVGQVVMVF9PUFRJT05TKSA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZShwYXlsb2FkLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgZ2V0TWV0aG9kRm9yQXJyYXkgPSAobmFtZTogJ3F1ZXJ5Jyk6ICgocGFyYW1zOiBTZWFyY2hQYXJhbXMpID0+IFByb21pc2U8VFtdIHwgbnVsbD4pID0+IHtcbiAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgICBjYXNlICdxdWVyeSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChwYXJhbXM6IFNlYXJjaFBhcmFtcywgb3B0aW9uczogSVJlc3RPcHRpb25zID0gdGhpcy5ERUZBVUxUX09QVElPTlMpID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucXVlcnkocGFyYW1zLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgYWN0aXZhdGVNZXRhZGF0YSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5tZXRhZGF0YUFjdGl2YXRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb252ZXJ0VG9UeXBlTWFwT2ZTdHJpbmcoc2VhcmNoUGFyYW1zOiBTZWFyY2hQYXJhbXMpOiBUeXBlZE1hcDxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIGxvZGFzaC5tYXBWYWx1ZXMoc2VhcmNoUGFyYW1zLCAodmFsOiBhbnkpID0+IFN0cmluZyh2YWwpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZvcm1hdFF1ZXJ5U3RyaW5nKFxuICAgICAgICBfcGFyYW1zOiBTZWFyY2hQYXJhbXMgfCBQYWdlYWJsZVxuICAgICk6IHtcbiAgICAgICAgW3BhcmFtOiBzdHJpbmddOiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICB9IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc29ydEJ5S2V5cyhfcGFyYW1zKTtcbiAgICB9XG4gICAgcHJpdmF0ZSBhZGRIZWFkZXJzVG9Cb2R5PEJvZHlUeXBlPihcbiAgICAgICAgb2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8Qm9keVR5cGU+PlxuICAgICk6IE9ic2VydmFibGU8T2JqZWN0V2l0aEhlYWRlcnM8Qm9keVR5cGU+IHwgbnVsbD4ge1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5waXBlKFxuICAgICAgICAgICAgbWFwKChyZXNwb25zZTogSHR0cFJlc3BvbnNlPE9iamVjdFdpdGhIZWFkZXJzPEJvZHlUeXBlPj4pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuYm9keTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1ldGFkYXRhQWN0aXZhdGVkICYmIGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdXNlZCBieSBAQ2FjaGVkIGFubm90YXRpb25cbiAgICAgICAgICAgICAgICAgICAgZGF0YS5oZWFkZXJzID0gcmVzcG9uc2UuaGVhZGVycztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogaW50ZXJwb2xhdGlvbiBVUkwgcGxhY2Vob2xkZXJzIGludGVycG9sYXRpb24gd2l0aCBwb3RlbnRpYWwgbWF0Y2hlcyBpbiBxdWVyeVN0cmluZ1xuICAgICAqL1xuICAgIHByaXZhdGUgaW50ZXJwb2xhdGVQYXJhbXNJblVSTChfdXJsOiBzdHJpbmcsIHBheWxvYWQ/OiBzdHJpbmcgfCBUeXBlZE1hcDxhbnk+KTogc3RyaW5nIHtcbiAgICAgICAgLy8gb25seSBrZWVwIHBhcmFtcyB0byBiZSBmb3VuZCBpbiB0aGUgVVJJIG9yIHF1ZXJ5IHBhcmFtc1xuICAgICAgICBpZiAocGF5bG9hZCAmJiB0eXBlb2YgcGF5bG9hZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVVJJQnVpbGRlcihfdXJsKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlUGFyYW1zKHBheWxvYWQpXG4gICAgICAgICAgICAgICAgLnNhbml0aXplKClcbiAgICAgICAgICAgICAgICAuYnVpbGQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBfdXJsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiByZW1vdmUgZnJvbSBxdWVyeVN0cmluZyBhbnkgcGFyYW0gbmVlZGVkIGZvciBVUkwgcGxhY2Vob2xkZXJzIGludGVycG9sYXRpb25cbiAgICAgKi9cbiAgICBwcml2YXRlIGRldGVybWluZVRydWVRdWVyeVN0cmluZ1BhcmFtcyhcbiAgICAgICAgdXJsOiBzdHJpbmcsXG4gICAgICAgIHBheWxvYWQ/OiBzdHJpbmcgfCBUeXBlZE1hcDxhbnk+XG4gICAgKTogVHlwZWRNYXA8YW55PiB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgcGF5bG9hZCA9PT0gJ29iamVjdCdcbiAgICAgICAgICAgID8gT2JqZWN0LmtleXMocGF5bG9hZCkucmVkdWNlKChwcmV2OiBQYXlsb2FkLCBuZXh0OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAhbmV3IFJlZ0V4cCgnOicgKyBuZXh0ICsgJy8nKS50ZXN0KHVybCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAhbmV3IFJlZ0V4cCgnOicgKyBuZXh0ICsgJyQnKS50ZXN0KHVybCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAhbmV3IFJlZ0V4cCgnOicgKyBuZXh0ICsgJyYnKS50ZXN0KHVybCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAhbG9kYXNoLmlzTmlsKHBheWxvYWRbbmV4dF0pXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICBwcmV2W25leHRdID0gcGF5bG9hZFtuZXh0XTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgICAgICAgICB9LCB7fSlcbiAgICAgICAgICAgIDoge307XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzb3J0QnlLZXlzKG9iajogVHlwZWRNYXA8YW55Pikge1xuICAgICAgICBjb25zdCBrZXlzID0gbG9kYXNoLnNvcnRCeShsb2Rhc2gua2V5cyhvYmopLCAoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBsb2Rhc2guemlwT2JqZWN0KFxuICAgICAgICAgICAga2V5cyxcbiAgICAgICAgICAgIGxvZGFzaC5tYXAoa2V5cywgKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ialtrZXldO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBlcmZvcm1JZGVudGlmaWVyQ2hlY2socGF5bG9hZDogc3RyaW5nIHwgUGF5bG9hZCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBpZGVudGlmaWVyID0gdHlwZW9mIHBheWxvYWQgPT09ICdzdHJpbmcnID8gcGF5bG9hZCA6IHBheWxvYWRbdGhpcy5pZGVudGlmaWVyTmFtZV07XG5cbiAgICAgICAgaWYgKCFpZGVudGlmaWVyKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgICAgICAgICAgJ25vIGRhdGEgd2FzIGZvdW5kIHVuZGVyIHRoZSAnICtcbiAgICAgICAgICAgICAgICAgICAgaWRlbnRpZmllciArXG4gICAgICAgICAgICAgICAgICAgICcgZmllbGQgb2Ygb2JqZWN0ICcgK1xuICAgICAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShwYXlsb2FkKSArXG4gICAgICAgICAgICAgICAgICAgICcsIGl0IGlzIG5lY2Vzc2FyeSBmb3IgdXBkYXRlIGFuZCByZW1vdmUgb3BlcmF0aW9ucydcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBidWlsZFVybFdpdGhJZGVudGlmaWVyKHBheWxvYWQ6IHN0cmluZyB8IFBheWxvYWQpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCBpZGVudGlmaWVyID0gdHlwZW9mIHBheWxvYWQgPT09ICdzdHJpbmcnID8gcGF5bG9hZCA6IHBheWxvYWRbdGhpcy5pZGVudGlmaWVyTmFtZV07XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLmludGVycG9sYXRlUGFyYW1zSW5VUkwoYCR7dGhpcy51cmx9YCwgcGF5bG9hZCk7XG5cbiAgICAgICAgdXJsID1cbiAgICAgICAgICAgIHVybC5pbmNsdWRlcygnPycpIHx8IHRoaXMudXJsLmluY2x1ZGVzKCc6JyArIHRoaXMuaWRlbnRpZmllck5hbWUpXG4gICAgICAgICAgICAgICAgPyB1cmxcbiAgICAgICAgICAgICAgICA6IGAke3VybH0vJHtpZGVudGlmaWVyfWA7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh1cmwpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYnVpbGRSZXF1ZXN0SGVhZGVycyhoZWFkZXJzOiBUeXBlZE1hcDxzdHJpbmc+KTogSHR0cEhlYWRlcnMge1xuICAgICAgICByZXR1cm4gbmV3IEh0dHBIZWFkZXJzKHsgLi4udGhpcy5ERUZBVUxUX0hFQURFUlMsIC4uLmhlYWRlcnMgfSk7XG4gICAgfVxufVxuIl19