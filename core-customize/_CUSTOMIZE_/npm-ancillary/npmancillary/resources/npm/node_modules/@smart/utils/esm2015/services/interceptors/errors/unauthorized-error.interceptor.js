/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Inject, Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse, HttpEvent, HttpRequest } from '@angular/common/http';
import { IAuthenticationService, IEventService } from '../../../interfaces';
import { Deferred, HttpUtils, PromiseUtils } from '../../../utils';
import { EVENT_SERVICE, REAUTH_STARTED, WHO_AM_I_RESOURCE_URI_TOKEN } from '../../../constants';
// map used by HttpAuthInterceptor to avoid replay identical requests being held because of 401
export const GET_REQUESTS_ON_HOLD_MAP = {};
/**
 * @ngdoc service
 * @name @smartutils.services:unauthorizedErrorInterceptor
 * @description
 * Used for HTTP error code 401 (Forbidden). It will display the login modal.
 */
let UnauthorizedErrorInterceptor = class UnauthorizedErrorInterceptor {
    constructor(httpClient, authenticationService, promiseUtils, httpUtils, WHO_AM_I_RESOURCE_URI, eventService) {
        this.httpClient = httpClient;
        this.authenticationService = authenticationService;
        this.promiseUtils = promiseUtils;
        this.httpUtils = httpUtils;
        this.eventService = eventService;
        this.promisesToResolve = {}; // key: auth entry point, value: array of deferred
        this.rejectedUrls = [/authenticate/];
        this.rejectedUrls.push(WHO_AM_I_RESOURCE_URI);
    }
    predicate(request, response) {
        return (response.status === 401 &&
            (request.url
                ? this.httpUtils.isCRUDRequest(request, response) &&
                    this.isUrlNotRejected(request.url)
                : true));
    }
    responseError(request, response) {
        const deferred = this.promiseUtils.defer();
        const deferredPromise = deferred.promise.then(() => {
            return this.httpClient.request(request).toPromise();
        });
        this.authenticationService.isAuthEntryPoint(request.url).then((isAuthEntryPoint) => {
            if (!isAuthEntryPoint) {
                this.authenticationService
                    .filterEntryPoints(request.url)
                    .then((entryPoints) => {
                    const entryPoint = entryPoints[0];
                    this.promisesToResolve[entryPoint] =
                        this.promisesToResolve[entryPoint] || [];
                    this.promisesToResolve[entryPoint].push({
                        requestIdentifier: request.url,
                        deferred
                    });
                    if (this.httpUtils.isGET(request)) {
                        GET_REQUESTS_ON_HOLD_MAP[request.url] = deferredPromise;
                    }
                    this.authenticationService
                        .isReAuthInProgress(entryPoint)
                        .then((isReAuthInProgress) => {
                        if (!isReAuthInProgress) {
                            this.authenticationService
                                .setReAuthInProgress(entryPoint)
                                .then(() => {
                                const promisesToResolve = this.promisesToResolve;
                                this.eventService.publish(REAUTH_STARTED);
                                this.authenticationService
                                    .authenticate(request.url)
                                    .then(function () {
                                    promisesToResolve[this].forEach((record) => {
                                        delete GET_REQUESTS_ON_HOLD_MAP[record.requestIdentifier];
                                        record.deferred.resolve();
                                    });
                                    promisesToResolve[this] = [];
                                }.bind(entryPoint), function () {
                                    promisesToResolve[this].forEach((record) => {
                                        delete GET_REQUESTS_ON_HOLD_MAP[record.requestIdentifier];
                                        record.deferred.reject();
                                    });
                                    promisesToResolve[this] = [];
                                }.bind(entryPoint));
                            });
                        }
                    });
                });
            }
            else {
                deferred.reject(response);
            }
        });
        return deferredPromise;
    }
    isUrlNotRejected(url) {
        return !this.rejectedUrls.some((rejectedUrl) => {
            return typeof rejectedUrl === 'string'
                ? url.indexOf(rejectedUrl) === 0
                : rejectedUrl.test(url);
        });
    }
};
UnauthorizedErrorInterceptor.ctorParameters = () => [
    { type: HttpClient },
    { type: IAuthenticationService },
    { type: PromiseUtils },
    { type: HttpUtils },
    { type: String, decorators: [{ type: Inject, args: [WHO_AM_I_RESOURCE_URI_TOKEN,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [EVENT_SERVICE,] }] }
];
UnauthorizedErrorInterceptor = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(4, Inject(WHO_AM_I_RESOURCE_URI_TOKEN)),
    tslib_1.__param(5, Inject(EVENT_SERVICE)),
    tslib_1.__metadata("design:paramtypes", [HttpClient,
        IAuthenticationService,
        PromiseUtils,
        HttpUtils, String, Object])
], UnauthorizedErrorInterceptor);
export { UnauthorizedErrorInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5hdXRob3JpemVkLWVycm9yLmludGVyY2VwdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNtYXJ0L3V0aWxzLyIsInNvdXJjZXMiOlsic2VydmljZXMvaW50ZXJjZXB0b3JzL2Vycm9ycy91bmF1dGhvcml6ZWQtZXJyb3IuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRztBQUNILE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzdGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxhQUFhLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM1RSxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUduRSxPQUFPLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSwyQkFBMkIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRWhHLCtGQUErRjtBQUMvRixNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBc0MsRUFBRSxDQUFDO0FBRTlFOzs7OztHQUtHO0FBRUgsSUFBYSw0QkFBNEIsR0FBekMsTUFBYSw0QkFBNEI7SUFNckMsWUFDWSxVQUFzQixFQUN0QixxQkFBNkMsRUFDN0MsWUFBMEIsRUFDMUIsU0FBb0IsRUFDUyxxQkFBNkIsRUFDbkMsWUFBMkI7UUFMbEQsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QiwwQkFBcUIsR0FBckIscUJBQXFCLENBQXdCO1FBQzdDLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFFRyxpQkFBWSxHQUFaLFlBQVksQ0FBZTtRQVh0RCxzQkFBaUIsR0FFckIsRUFBRSxDQUFDLENBQUMsa0RBQWtEO1FBQ2xELGlCQUFZLEdBQXdCLENBQUMsY0FB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QkFBQSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUE7NkNBTEYsVUFBVTtRQUNDLHNCQUFzQjtRQUMvQixZQUFZO1FBQ2YsU0FBUztHQVZ2Qiw0QkFBNEIsQ0FzR3hDO1NBdEdZLDRCQUE0QiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFNBUCBTRSBvciBhbiBTQVAgYWZmaWxpYXRlIGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbW9kdWxlIHNtYXJ0dXRpbHNcbiAqL1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEVycm9yUmVzcG9uc2UsIEh0dHBFdmVudCwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJQXV0aGVudGljYXRpb25TZXJ2aWNlLCBJRXZlbnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBEZWZlcnJlZCwgSHR0cFV0aWxzLCBQcm9taXNlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi91dGlscyc7XG5pbXBvcnQgeyBUeXBlZE1hcCB9IGZyb20gJy4uLy4uLy4uL2R0b3MnO1xuaW1wb3J0IHsgSUh0dHBFcnJvckludGVyY2VwdG9yIH0gZnJvbSAnLi4vaS1odHRwLWVycm9yLmludGVyY2VwdG9yJztcbmltcG9ydCB7IEVWRU5UX1NFUlZJQ0UsIFJFQVVUSF9TVEFSVEVELCBXSE9fQU1fSV9SRVNPVVJDRV9VUklfVE9LRU4gfSBmcm9tICcuLi8uLi8uLi9jb25zdGFudHMnO1xuXG4vLyBtYXAgdXNlZCBieSBIdHRwQXV0aEludGVyY2VwdG9yIHRvIGF2b2lkIHJlcGxheSBpZGVudGljYWwgcmVxdWVzdHMgYmVpbmcgaGVsZCBiZWNhdXNlIG9mIDQwMVxuZXhwb3J0IGNvbnN0IEdFVF9SRVFVRVNUU19PTl9IT0xEX01BUDogVHlwZWRNYXA8UHJvbWlzZTxIdHRwRXZlbnQ8YW55Pj4+ID0ge307XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lIEBzbWFydHV0aWxzLnNlcnZpY2VzOnVuYXV0aG9yaXplZEVycm9ySW50ZXJjZXB0b3JcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlZCBmb3IgSFRUUCBlcnJvciBjb2RlIDQwMSAoRm9yYmlkZGVuKS4gSXQgd2lsbCBkaXNwbGF5IHRoZSBsb2dpbiBtb2RhbC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFVuYXV0aG9yaXplZEVycm9ySW50ZXJjZXB0b3I8VCA9IGFueT4gaW1wbGVtZW50cyBJSHR0cEVycm9ySW50ZXJjZXB0b3I8VD4ge1xuICAgIHByaXZhdGUgcHJvbWlzZXNUb1Jlc29sdmU6IFR5cGVkTWFwPFxuICAgICAgICB7IHJlcXVlc3RJZGVudGlmaWVyOiBzdHJpbmc7IGRlZmVycmVkOiBEZWZlcnJlZDxUPiB9W11cbiAgICA+ID0ge307IC8vIGtleTogYXV0aCBlbnRyeSBwb2ludCwgdmFsdWU6IGFycmF5IG9mIGRlZmVycmVkXG4gICAgcHJpdmF0ZSByZWplY3RlZFVybHM6IChzdHJpbmcgfCBSZWdFeHApW10gPSBbL2F1dGhlbnRpY2F0ZS9dO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCxcbiAgICAgICAgcHJpdmF0ZSBhdXRoZW50aWNhdGlvblNlcnZpY2U6IElBdXRoZW50aWNhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcHJvbWlzZVV0aWxzOiBQcm9taXNlVXRpbHMsXG4gICAgICAgIHByaXZhdGUgaHR0cFV0aWxzOiBIdHRwVXRpbHMsXG4gICAgICAgIEBJbmplY3QoV0hPX0FNX0lfUkVTT1VSQ0VfVVJJX1RPS0VOKSBXSE9fQU1fSV9SRVNPVVJDRV9VUkk6IHN0cmluZyxcbiAgICAgICAgQEluamVjdChFVkVOVF9TRVJWSUNFKSBwcml2YXRlIGV2ZW50U2VydmljZTogSUV2ZW50U2VydmljZVxuICAgICkge1xuICAgICAgICB0aGlzLnJlamVjdGVkVXJscy5wdXNoKFdIT19BTV9JX1JFU09VUkNFX1VSSSk7XG4gICAgfVxuXG4gICAgcHJlZGljYXRlKHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PFQ+LCByZXNwb25zZTogSHR0cEVycm9yUmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxICYmXG4gICAgICAgICAgICAocmVxdWVzdC51cmxcbiAgICAgICAgICAgICAgICA/IHRoaXMuaHR0cFV0aWxzLmlzQ1JVRFJlcXVlc3QocmVxdWVzdCwgcmVzcG9uc2UpICYmXG4gICAgICAgICAgICAgICAgICB0aGlzLmlzVXJsTm90UmVqZWN0ZWQocmVxdWVzdC51cmwpXG4gICAgICAgICAgICAgICAgOiB0cnVlKVxuICAgICAgICApO1xuICAgIH1cbiAgICByZXNwb25zZUVycm9yKHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PFQ+LCByZXNwb25zZTogSHR0cEVycm9yUmVzcG9uc2UpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCBkZWZlcnJlZCA9IHRoaXMucHJvbWlzZVV0aWxzLmRlZmVyPFQ+KCk7XG5cbiAgICAgICAgY29uc3QgZGVmZXJyZWRQcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdChyZXF1ZXN0KS50b1Byb21pc2UoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hdXRoZW50aWNhdGlvblNlcnZpY2UuaXNBdXRoRW50cnlQb2ludChyZXF1ZXN0LnVybCkudGhlbigoaXNBdXRoRW50cnlQb2ludCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFpc0F1dGhFbnRyeVBvaW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hdXRoZW50aWNhdGlvblNlcnZpY2VcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlckVudHJ5UG9pbnRzKHJlcXVlc3QudXJsKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoZW50cnlQb2ludHM6IHN0cmluZ1tdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbnRyeVBvaW50ID0gZW50cnlQb2ludHNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb21pc2VzVG9SZXNvbHZlW2VudHJ5UG9pbnRdID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb21pc2VzVG9SZXNvbHZlW2VudHJ5UG9pbnRdIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9taXNlc1RvUmVzb2x2ZVtlbnRyeVBvaW50XS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWRlbnRpZmllcjogcmVxdWVzdC51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaHR0cFV0aWxzLmlzR0VUKHJlcXVlc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgR0VUX1JFUVVFU1RTX09OX0hPTERfTUFQW3JlcXVlc3QudXJsXSA9IGRlZmVycmVkUHJvbWlzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0aGVudGljYXRpb25TZXJ2aWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmlzUmVBdXRoSW5Qcm9ncmVzcyhlbnRyeVBvaW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChpc1JlQXV0aEluUHJvZ3Jlc3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1JlQXV0aEluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0aGVudGljYXRpb25TZXJ2aWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNldFJlQXV0aEluUHJvZ3Jlc3MoZW50cnlQb2ludClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb21pc2VzVG9SZXNvbHZlID0gdGhpcy5wcm9taXNlc1RvUmVzb2x2ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudFNlcnZpY2UucHVibGlzaChSRUFVVEhfU1RBUlRFRCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0aGVudGljYXRpb25TZXJ2aWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXV0aGVudGljYXRlKHJlcXVlc3QudXJsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2VzVG9SZXNvbHZlW3RoaXNdLmZvckVhY2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocmVjb3JkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIEdFVF9SRVFVRVNUU19PTl9IT0xEX01BUFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkLnJlcXVlc3RJZGVudGlmaWVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNvcmQuZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlc1RvUmVzb2x2ZVt0aGlzXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0uYmluZChlbnRyeVBvaW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXNUb1Jlc29sdmVbdGhpc10uZm9yRWFjaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChyZWNvcmQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgR0VUX1JFUVVFU1RTX09OX0hPTERfTUFQW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNvcmQucmVxdWVzdElkZW50aWZpZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZC5kZWZlcnJlZC5yZWplY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXNUb1Jlc29sdmVbdGhpc10gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LmJpbmQoZW50cnlQb2ludClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBkZWZlcnJlZFByb21pc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc1VybE5vdFJlamVjdGVkKHVybDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhdGhpcy5yZWplY3RlZFVybHMuc29tZSgocmVqZWN0ZWRVcmwpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgcmVqZWN0ZWRVcmwgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgPyB1cmwuaW5kZXhPZihyZWplY3RlZFVybCkgPT09IDBcbiAgICAgICAgICAgICAgICA6IHJlamVjdGVkVXJsLnRlc3QodXJsKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19