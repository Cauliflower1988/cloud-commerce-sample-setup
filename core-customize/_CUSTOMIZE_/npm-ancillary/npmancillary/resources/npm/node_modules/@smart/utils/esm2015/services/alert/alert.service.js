/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Injectable } from '@angular/core';
import { AlertFactory } from './alert-factory';
/**
 * @ngdoc service
 * @name @smartutils.services:AlertService
 */
let AlertService = class AlertService {
    constructor(alertFactory) {
        this.alertFactory = alertFactory;
    }
    /**
     * @ngdoc method
     * @name @smartutils.services:AlertService#showAlert
     * @methodOf @smartutils.services:AlertService
     * @param {string | Object} alertConf The alert's configuration {@link @smartutils.interfaces:IAlertConfig IAlertConfig}
     * @description
     * Displays an alert to the user. <br />
     * Convenience method to create an alert and call.show() on it immediately.
     */
    showAlert(alertConf) {
        const alert = this.alertFactory.createAlert(alertConf);
        alert.show();
    }
    /**
     * @ngdoc method
     * @name @smartutils.services:AlertService#showInfo
     * @methodOf @smartutils.services:AlertService
     * @param {string | Object} alertConf The alert's configuration {@link @smartutils.interfaces:IAlertConfig IAlertConfig}
     * @description
     * Displays an alert to the user. <br />
     * Convenience method to create an alert and call.show() on it immediately.
     */
    showInfo(alertConf) {
        const alert = this.alertFactory.createInfo(alertConf);
        alert.show();
    }
    /**
     * @ngdoc method
     * @name @smartutils.services:AlertService#showDanger
     * @methodOf @smartutils.services:AlertService
     * @param {string | Object} alertConf The alert's configuration {@link @smartutils.interfaces:IAlertConfig IAlertConfig}
     * @description
     * Displays an alert to the user. <br />
     * Convenience method to create an alert and call.show() on it immediately.
     */
    showDanger(alertConf) {
        const alert = this.alertFactory.createDanger(alertConf);
        alert.show();
    }
    /**
     * @ngdoc method
     * @name @smartutils.services:AlertService#showWarning
     * @methodOf @smartutils.services:AlertService
     * @param {string | Object} alertConf The alert's configuration {@link @smartutils.interfaces:IAlertConfig IAlertConfig}
     * @description
     * Displays an alert to the user. <br />
     * Convenience method to create an alert and call.show() on it immediately.
     */
    showWarning(alertConf) {
        const alert = this.alertFactory.createWarning(alertConf);
        alert.show();
    }
    /**
     * @ngdoc method
     * @name @smartutils.services:AlertService#showSuccess
     * @methodOf @smartutils.services:AlertService
     * @param {string | Object} alertConf The alert's configuration {@link @smartutils.interfaces:IAlertConfig IAlertConfig}
     * @description
     * Displays an alert to the user. <br />
     * Convenience method to create an alert and call.show() on it immediately.
     */
    showSuccess(alertConf) {
        const alert = this.alertFactory.createSuccess(alertConf);
        alert.show();
    }
};
AlertService.ctorParameters = () => [
    { type: AlertFactory }
];
AlertService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [AlertFactory])
], AlertService);
export { AlertService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2FsZXJ0L2FsZXJ0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRztBQUNILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DOzs7R0FHRztBQUVILElBQWEsWUFBWSxHQUF6QixNQUFhLFlBQVk7SUFDckIsWUFBb0IsWUFBMEI7UUFBMUIsaUJBQVksR0FBWixZQUFZLENBQWM7SUFBRyxDQUFDO0lBRWxEOzs7Ozs7OztPQVFHO0lBQ0ksU0FBUyxDQUFDLFNBQWdDO1FBQzdDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZELEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSSxRQUFRLENBQUMsU0FBZ0M7UUFDNUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdEQsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNJLFVBQVUsQ0FBQyxTQUFnQztRQUM5QyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN4RCxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0ksV0FBVyxDQUFDLFNBQWdDO1FBQy9DLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3pELEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSSxXQUFXLENBQUMsU0FBZ0M7UUFDL0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDekQsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2pCLENBQUM7Q0FDSixDQUFBOztZQXZFcUMsWUFBWTs7QUFEckMsWUFBWTtJQUR4QixVQUFVLEVBQUU7NkNBRXlCLFlBQVk7R0FEckMsWUFBWSxDQXdFeEI7U0F4RVksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFNBUCBTRSBvciBhbiBTQVAgYWZmaWxpYXRlIGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbW9kdWxlIHNtYXJ0dXRpbHNcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUFsZXJ0Q29uZmlnIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBBbGVydEZhY3RvcnkgfSBmcm9tICcuL2FsZXJ0LWZhY3RvcnknO1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSBAc21hcnR1dGlscy5zZXJ2aWNlczpBbGVydFNlcnZpY2VcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFsZXJ0U2VydmljZSB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhbGVydEZhY3Rvcnk6IEFsZXJ0RmFjdG9yeSkge31cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBAc21hcnR1dGlscy5zZXJ2aWNlczpBbGVydFNlcnZpY2Ujc2hvd0FsZXJ0XG4gICAgICogQG1ldGhvZE9mIEBzbWFydHV0aWxzLnNlcnZpY2VzOkFsZXJ0U2VydmljZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgT2JqZWN0fSBhbGVydENvbmYgVGhlIGFsZXJ0J3MgY29uZmlndXJhdGlvbiB7QGxpbmsgQHNtYXJ0dXRpbHMuaW50ZXJmYWNlczpJQWxlcnRDb25maWcgSUFsZXJ0Q29uZmlnfVxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIERpc3BsYXlzIGFuIGFsZXJ0IHRvIHRoZSB1c2VyLiA8YnIgLz5cbiAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgdG8gY3JlYXRlIGFuIGFsZXJ0IGFuZCBjYWxsLnNob3coKSBvbiBpdCBpbW1lZGlhdGVseS5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2hvd0FsZXJ0KGFsZXJ0Q29uZjogc3RyaW5nIHwgSUFsZXJ0Q29uZmlnKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGFsZXJ0ID0gdGhpcy5hbGVydEZhY3RvcnkuY3JlYXRlQWxlcnQoYWxlcnRDb25mKTtcbiAgICAgICAgYWxlcnQuc2hvdygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBAc21hcnR1dGlscy5zZXJ2aWNlczpBbGVydFNlcnZpY2Ujc2hvd0luZm9cbiAgICAgKiBAbWV0aG9kT2YgQHNtYXJ0dXRpbHMuc2VydmljZXM6QWxlcnRTZXJ2aWNlXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCBPYmplY3R9IGFsZXJ0Q29uZiBUaGUgYWxlcnQncyBjb25maWd1cmF0aW9uIHtAbGluayBAc21hcnR1dGlscy5pbnRlcmZhY2VzOklBbGVydENvbmZpZyBJQWxlcnRDb25maWd9XG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogRGlzcGxheXMgYW4gYWxlcnQgdG8gdGhlIHVzZXIuIDxiciAvPlxuICAgICAqIENvbnZlbmllbmNlIG1ldGhvZCB0byBjcmVhdGUgYW4gYWxlcnQgYW5kIGNhbGwuc2hvdygpIG9uIGl0IGltbWVkaWF0ZWx5LlxuICAgICAqL1xuICAgIHB1YmxpYyBzaG93SW5mbyhhbGVydENvbmY6IHN0cmluZyB8IElBbGVydENvbmZpZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBhbGVydCA9IHRoaXMuYWxlcnRGYWN0b3J5LmNyZWF0ZUluZm8oYWxlcnRDb25mKTtcbiAgICAgICAgYWxlcnQuc2hvdygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBAc21hcnR1dGlscy5zZXJ2aWNlczpBbGVydFNlcnZpY2Ujc2hvd0RhbmdlclxuICAgICAqIEBtZXRob2RPZiBAc21hcnR1dGlscy5zZXJ2aWNlczpBbGVydFNlcnZpY2VcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8IE9iamVjdH0gYWxlcnRDb25mIFRoZSBhbGVydCdzIGNvbmZpZ3VyYXRpb24ge0BsaW5rIEBzbWFydHV0aWxzLmludGVyZmFjZXM6SUFsZXJ0Q29uZmlnIElBbGVydENvbmZpZ31cbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBEaXNwbGF5cyBhbiBhbGVydCB0byB0aGUgdXNlci4gPGJyIC8+XG4gICAgICogQ29udmVuaWVuY2UgbWV0aG9kIHRvIGNyZWF0ZSBhbiBhbGVydCBhbmQgY2FsbC5zaG93KCkgb24gaXQgaW1tZWRpYXRlbHkuXG4gICAgICovXG4gICAgcHVibGljIHNob3dEYW5nZXIoYWxlcnRDb25mOiBzdHJpbmcgfCBJQWxlcnRDb25maWcpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgYWxlcnQgPSB0aGlzLmFsZXJ0RmFjdG9yeS5jcmVhdGVEYW5nZXIoYWxlcnRDb25mKTtcbiAgICAgICAgYWxlcnQuc2hvdygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBAc21hcnR1dGlscy5zZXJ2aWNlczpBbGVydFNlcnZpY2Ujc2hvd1dhcm5pbmdcbiAgICAgKiBAbWV0aG9kT2YgQHNtYXJ0dXRpbHMuc2VydmljZXM6QWxlcnRTZXJ2aWNlXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCBPYmplY3R9IGFsZXJ0Q29uZiBUaGUgYWxlcnQncyBjb25maWd1cmF0aW9uIHtAbGluayBAc21hcnR1dGlscy5pbnRlcmZhY2VzOklBbGVydENvbmZpZyBJQWxlcnRDb25maWd9XG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogRGlzcGxheXMgYW4gYWxlcnQgdG8gdGhlIHVzZXIuIDxiciAvPlxuICAgICAqIENvbnZlbmllbmNlIG1ldGhvZCB0byBjcmVhdGUgYW4gYWxlcnQgYW5kIGNhbGwuc2hvdygpIG9uIGl0IGltbWVkaWF0ZWx5LlxuICAgICAqL1xuICAgIHB1YmxpYyBzaG93V2FybmluZyhhbGVydENvbmY6IHN0cmluZyB8IElBbGVydENvbmZpZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBhbGVydCA9IHRoaXMuYWxlcnRGYWN0b3J5LmNyZWF0ZVdhcm5pbmcoYWxlcnRDb25mKTtcbiAgICAgICAgYWxlcnQuc2hvdygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBAc21hcnR1dGlscy5zZXJ2aWNlczpBbGVydFNlcnZpY2Ujc2hvd1N1Y2Nlc3NcbiAgICAgKiBAbWV0aG9kT2YgQHNtYXJ0dXRpbHMuc2VydmljZXM6QWxlcnRTZXJ2aWNlXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCBPYmplY3R9IGFsZXJ0Q29uZiBUaGUgYWxlcnQncyBjb25maWd1cmF0aW9uIHtAbGluayBAc21hcnR1dGlscy5pbnRlcmZhY2VzOklBbGVydENvbmZpZyBJQWxlcnRDb25maWd9XG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogRGlzcGxheXMgYW4gYWxlcnQgdG8gdGhlIHVzZXIuIDxiciAvPlxuICAgICAqIENvbnZlbmllbmNlIG1ldGhvZCB0byBjcmVhdGUgYW4gYWxlcnQgYW5kIGNhbGwuc2hvdygpIG9uIGl0IGltbWVkaWF0ZWx5LlxuICAgICAqL1xuICAgIHB1YmxpYyBzaG93U3VjY2VzcyhhbGVydENvbmY6IHN0cmluZyB8IElBbGVydENvbmZpZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBhbGVydCA9IHRoaXMuYWxlcnRGYWN0b3J5LmNyZWF0ZVN1Y2Nlc3MoYWxlcnRDb25mKTtcbiAgICAgICAgYWxlcnQuc2hvdygpO1xuICAgIH1cbn1cbiJdfQ==