/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChild, Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { CdkDrag } from '@angular/cdk/drag-drop';
export class DndContainerDirective {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
        /**
         * Class added to element, when it's dragged.
         */
        this.CLASS_WHEN_ELEMENT_DRAGGED = 'fd-dnd-on-drag';
        /**
         * Event thrown when the element is moved by 1px
         */
        this.moved = new EventEmitter();
        /**
         * Event thrown when the element is released
         */
        this.released = new EventEmitter();
        /**
         * Event thrown when the element is started to be dragged
         */
        this.started = new EventEmitter();
    }
    /**
     * @hidden
     * @param {?} isBefore
     * @param {?} listMode
     * @return {?}
     */
    getElementChord(isBefore, listMode) {
        /**
         * Takes distance from the beginning of window page
         * @type {?}
         */
        const rect = (/** @type {?} */ (this.element.nativeElement.getBoundingClientRect()));
        /** @type {?} */
        const position = isBefore ? 'before' : 'after';
        /**
         * Depending on the position, gets the left or right side of element
         * @type {?}
         */
        const x = rect.x + (isBefore || listMode ? 0 : this.element.nativeElement.offsetWidth);
        /** Vertically distance is counted by distance from top of the side + half of the element height */
        return {
            x: x,
            position: position,
            y: rect.y + (this.element.nativeElement.offsetHeight / 2)
        };
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterContentInit() {
        this.cdkDrag.moved.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.onCdkMove(event);
        }));
        this.cdkDrag.released.subscribe((/**
         * @return {?}
         */
        () => {
            this.onCdkDragReleased();
        }));
        this.cdkDrag.started.subscribe((/**
         * @return {?}
         */
        () => {
            this.onCdkDragStart();
        }));
    }
    /**
     * @hidden
     * @param {?} cdkMovedEvent
     * @return {?}
     */
    onCdkMove(cdkMovedEvent) {
        this.moved.emit(cdkMovedEvent);
    }
    /**
     * @hidden
     * @return {?}
     */
    onCdkDragReleased() {
        /** Remove class which is added, when element is dragged */
        this.element.nativeElement.classList.remove(this.CLASS_WHEN_ELEMENT_DRAGGED);
        this.released.emit();
        /** Resets the position of element. */
        this.cdkDrag.reset();
        /** Removes placeholder element */
        this.removePlaceholder();
    }
    /**
     * @hidden
     * @return {?}
     */
    onCdkDragStart() {
        /** Adds class */
        this.element.nativeElement.classList.add(this.CLASS_WHEN_ELEMENT_DRAGGED);
        if (!this.placeholderElement) {
            this.createPlaceHolder();
        }
        this.started.emit();
    }
    /**
     * @hidden
     * @return {?}
     */
    removePlaceholder() {
        if (this.placeholderElement) {
            this.placeholderElement.remove();
            this.placeholderElement = null;
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    removeLine() {
        if (this.lineElement) {
            this.lineElement.remove();
            this.lineElement = null;
        }
    }
    /**
     * @hidden
     * @param {?} position
     * @param {?} listMode
     * @return {?}
     */
    createLine(position, listMode) {
        /** Creating of line element */
        this.lineElement = document.createElement('DIV');
        if (listMode) {
            this.lineElement.classList.add('drop-area__line');
            this.lineElement.classList.add('drop-area__line--horizontal');
        }
        else {
            this.lineElement.classList.add('drop-area__line');
            this.lineElement.classList.add('drop-area__line--vertical');
        }
        if (position === 'after') {
            this.lineElement.classList.add('after');
        }
        if (position === 'before') {
            this.lineElement.classList.add('before');
        }
        /** Putting element to the container */
        this.element.nativeElement.appendChild(this.lineElement);
    }
    /**
     * @hidden
     * @private
     * @return {?}
     */
    createPlaceHolder() {
        /**
         * Cloning container element
         * @type {?}
         */
        const clone = this.cdkDrag.element.nativeElement.cloneNode(true);
        /** Taking cloned element reference */
        this.placeholderElement = clone.firstChild.parentElement;
        this.placeholderElement.classList.add('fd-dnd-placeholder');
        /** Including element to the container */
        this.element.nativeElement.appendChild(clone);
    }
}
DndContainerDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-dnd-container]',
                host: {
                    'class': 'fd-dnd-container'
                }
            },] }
];
/** @nocollapse */
DndContainerDirective.ctorParameters = () => [
    { type: ElementRef }
];
DndContainerDirective.propDecorators = {
    cdkDrag: [{ type: ContentChild, args: [CdkDrag, { static: false },] }],
    moved: [{ type: Output }],
    released: [{ type: Output }],
    started: [{ type: Output }]
};
if (false) {
    /**
     * Class added to element, when it's dragged.
     * @type {?}
     */
    DndContainerDirective.prototype.CLASS_WHEN_ELEMENT_DRAGGED;
    /**
     * @type {?}
     * @private
     */
    DndContainerDirective.prototype.placeholderElement;
    /**
     * @type {?}
     * @private
     */
    DndContainerDirective.prototype.lineElement;
    /**
     * @hidden
     * @type {?}
     */
    DndContainerDirective.prototype.cdkDrag;
    /**
     * Event thrown when the element is moved by 1px
     * @type {?}
     */
    DndContainerDirective.prototype.moved;
    /**
     * Event thrown when the element is released
     * @type {?}
     */
    DndContainerDirective.prototype.released;
    /**
     * Event thrown when the element is started to be dragged
     * @type {?}
     */
    DndContainerDirective.prototype.started;
    /** @type {?} */
    DndContainerDirective.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,