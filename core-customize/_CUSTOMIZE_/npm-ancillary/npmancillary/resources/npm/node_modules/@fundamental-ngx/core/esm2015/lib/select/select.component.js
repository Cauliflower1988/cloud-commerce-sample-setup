/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChildren, EventEmitter, forwardRef, HostBinding, HostListener, Input, Output, QueryList, TemplateRef, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { OptionComponent } from './option/option.component';
import { defer, merge, Subject } from 'rxjs';
import { startWith, switchMap, takeUntil } from 'rxjs/operators';
/**
 * Select component intended to mimic the behaviour of the native select element.
 */
export class SelectComponent {
    constructor() {
        /**
         * @hidden
         */
        this.fdDropdownClass = true;
        /**
         * Whether the select component is disabled.
         */
        this.disabled = false;
        /**
         * Open state of the select.
         */
        this.isOpen = false;
        /**
         * Whether the select is in compact mode.
         */
        this.compact = false;
        /**
         * Popper.js options of the popover.
         */
        this.popperOptions = {
            placement: 'bottom-start',
            modifiers: {
                preventOverflow: {
                    enabled: true,
                    escapeWithReference: true,
                    boundariesElement: 'scrollParent'
                }
            }
        };
        /**
         * Preset options for the popover body width.
         * * `at-least` will apply a minimum width to the body equivalent to the width of the control.
         * * `equal` will apply a width to the body equivalent to the width of the control.
         * * Leave blank for no effect.
         */
        this.fillControlMode = 'at-least';
        /**
         * Event emitted when the popover open state changes.
         */
        this.isOpenChange = new EventEmitter();
        /**
         * Event emitted when the selected value of the select changes.
         */
        this.valueChange = new EventEmitter();
        /**
         * Subject triggered when the component is destroyed.
         */
        this.destroy$ = new Subject();
        /**
         * Observable triggered when an option has its selectedChange event fire.
         */
        this.optionsStatusChanges = (/** @type {?} */ (defer((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const options = this.options;
            if (options) {
                return options.changes.pipe(startWith(options), switchMap((/**
                 * @return {?}
                 */
                () => merge(...options.map((/**
                 * @param {?} option
                 * @return {?}
                 */
                option => option.selectedChange))))));
            }
        }))));
        /**
         * @hidden
         */
        this.onChange = (/**
         * @return {?}
         */
        () => { });
        /**
         * @hidden
         */
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @hidden
     * @param {?} isOpen
     * @return {?}
     */
    isOpenChangeHandle(isOpen) {
        this.isOpen = isOpen;
        this.isOpenChange.emit(isOpen);
        this.resizeScrollHandler();
    }
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.value) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                if (this.value) {
                    this.selectValue(this.value, false);
                }
            }));
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterContentInit() {
        // If the observable state changes, reset the options and initialize selection.
        this.options.changes.pipe(startWith(null), takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        () => {
            this.resetOptions();
            this.initSelection();
        }));
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * Toggles the open state of the select.
     * @return {?}
     */
    toggle() {
        if (this.isOpen && !this.disabled) {
            this.close();
        }
        else {
            this.open();
        }
    }
    /**
     * Opens the select popover body.
     * @return {?}
     */
    open() {
        if (!this.isOpen && !this.disabled) {
            this.isOpen = true;
            this.isOpenChange.emit(this.isOpen);
        }
    }
    /**
     * Closes the select popover body.
     * @return {?}
     */
    close() {
        if (this.isOpen && !this.disabled) {
            this.isOpen = false;
            this.isOpenChange.emit(this.isOpen);
        }
    }
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (this.options) {
            this.selectValue(value, false);
        }
        else {
            // Defer the selection of the value to support forms
            Promise.resolve().then((/**
             * @return {?}
             */
            () => {
                if (this.options) {
                    this.selectValue(value, false);
                }
            }));
        }
    }
    /**
     * Returns the current trigger value if there is a selected option. Otherwise, returns the placeholder.
     * @return {?}
     */
    get triggerValue() {
        return this.selected ? this.selected.viewValueText : this.placeholder;
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    keydownHandler(event) {
        switch (event.code) {
            case ('ArrowUp'): {
                event.preventDefault();
                this.decrementFocused();
                break;
            }
            case ('ArrowDown'): {
                event.preventDefault();
                this.incrementFocused();
                break;
            }
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    resizeScrollHandler() {
        this.calculatedMaxHeight = window.innerHeight * 0.45;
    }
    /**
     * Selects an option by option component reference. Preferred method of selection.
     * @private
     * @param {?} option The option component to search for.
     * @param {?=} fireEvents Whether to fire change events.
     * @return {?}
     */
    selectOption(option, fireEvents = true) {
        if (!this.isOptionActive(option)) {
            if (this.selected) {
                this.selected.setSelected(false, false);
            }
            option.setSelected(true, false);
            this.selected = option;
            this.updateValue(fireEvents);
            this.close();
            return option;
        }
        return;
    }
    /**
     * Selects an option by value. If two components have the same value, the first one found is selected.
     * Recommend using selectOption generally.
     * @private
     * @param {?} value Value to search for.
     * @param {?=} fireEvents Whether to fire change events.
     * @return {?}
     */
    selectValue(value, fireEvents = true) {
        /** @type {?} */
        const matchOption = this.options.find((/**
         * @param {?} option
         * @return {?}
         */
        (option) => {
            return option.value != null && option.value === value;
        }));
        // If not match is found, set everything to null
        // This is mostly only for cases where a user removes an active option
        if (!matchOption) {
            this.unselectOptions();
            return;
        }
        // If match is found, select the new value
        if (matchOption && !this.isOptionActive(matchOption)) {
            if (this.selected) {
                this.selected.setSelected(false, false);
            }
            matchOption.setSelected(true, false);
            this.selected = matchOption;
            this.updateValue(fireEvents);
            this.close();
        }
        return matchOption;
    }
    /**
     * Updates the value parameter with optional events.
     * @private
     * @param {?=} fireEvents If true, function fires valueChange, onChange and onTouched events.
     * @return {?}
     */
    updateValue(fireEvents = true) {
        this.value = this.selected.value;
        if (fireEvents) {
            this.valueChange.emit(this.value);
            this.onChange(this.value);
            this.onTouched();
        }
    }
    /**
     * Function used to reset the options state.
     * @private
     * @return {?}
     */
    resetOptions() {
        // Create observable that fires when the options change or the component is destroyed.
        /** @type {?} */
        const destroyCurrentObs = merge(this.options.changes, this.destroy$);
        // Subscribe to observable defined in component properties which fires when an option is clicked.
        // Destroy if the observable defined above triggers.
        this.optionsStatusChanges.pipe(takeUntil(destroyCurrentObs)).subscribe((/**
         * @param {?} instance
         * @return {?}
         */
        (instance) => {
            this.selectOption(instance);
        }));
    }
    /**
     * Selection initialization when a change occurs in options.
     * @private
     * @return {?}
     */
    initSelection() {
        if (this.value) {
            this.selected = undefined;
            this.selectValue(this.value, false);
        }
    }
    /**
     * Function that tests whether the tested option is currently selected.
     * @private
     * @param {?} option Option to test against the selected option.
     * @return {?}
     */
    isOptionActive(option) {
        return option && this.selected && option === this.selected;
    }
    /**
     * Method that focuses the next option in the list, or the first one if the last one is currently focused.
     * @private
     * @return {?}
     */
    incrementFocused() {
        // Get active focused element
        /** @type {?} */
        const activeElement = document.activeElement;
        // Get corresponding option element to the above
        /** @type {?} */
        const correspondingOption = this.options.find((/**
         * @param {?} option
         * @return {?}
         */
        option => {
            return option.getHtmlElement() === activeElement;
        }));
        if (correspondingOption) {
            /** @type {?} */
            const arrayOptions = this.options.toArray();
            /** @type {?} */
            const index = arrayOptions.indexOf(correspondingOption);
            // If active option is the last option, focus the first one
            // Otherwise, focus the next option.
            if (index === this.options.length - 1) {
                arrayOptions[0].focus();
            }
            else {
                arrayOptions[index + 1].focus();
            }
        }
        else if (this.options) {
            this.options.first.focus();
        }
    }
    /**
     * Method that focuses the previous option in the list, or the last one if the last one is currently focused.
     * @private
     * @return {?}
     */
    decrementFocused() {
        // Get active focused element
        /** @type {?} */
        const activeElement = document.activeElement;
        // Get corresponding option element to the above
        /** @type {?} */
        const correspondingOption = this.options.find((/**
         * @param {?} option
         * @return {?}
         */
        option => {
            return option.getHtmlElement() === activeElement;
        }));
        // If active option is the first option, focus the last one
        // Otherwise, focus the previous option.
        if (correspondingOption) {
            /** @type {?} */
            const arrayOptions = this.options.toArray();
            /** @type {?} */
            const index = arrayOptions.indexOf(correspondingOption);
            if (index === 0) {
                arrayOptions[this.options.length - 1].focus();
            }
            else {
                arrayOptions[index - 1].focus();
            }
        }
        else if (this.options) {
            this.options.first.focus();
        }
    }
    /**
     * Method used to handle cases where a user removes the currently active option.
     * The timeout is required because this can happen after the view has been checked.
     * @private
     * @return {?}
     */
    unselectOptions() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.selected) {
                this.selected.setSelected(false, false);
            }
            this.selected = undefined;
            this.value = undefined;
            this.valueChange.emit(undefined);
            this.onChange(undefined);
        }));
    }
}
SelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'fd-select',
                template: "<fd-popover [(isOpen)]=\"isOpen\"\n            (isOpenChange)=\"isOpenChangeHandle($event)\"\n            [options]=\"popperOptions\"\n            [fillControlMode]=\"fillControlMode\"\n            [appendTo]=\"appendTo\"\n            class=\"fd-select-popover-custom\">\n    <fd-popover-control>\n        <ng-container *ngIf=\"triggerTemplate\">\n            <ng-container *ngTemplateOutlet=\"triggerTemplate; context: {$implicit: this}\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!triggerTemplate\">\n            <button class=\"fd-select-button-custom\"\n                    fd-button\n                    aria-haspopup=\"true\"\n                    [ngClass]=\"{'fd-button--compact': compact}\"\n                    [attr.aria-expanded]=\"isOpen\"\n                    [disabled]=\"disabled\">\n                <span class=\"fd-select-text-custom\">{{triggerValue}}</span>\n            </button>\n        </ng-container>\n    </fd-popover-control>\n    <fd-popover-body\n        class=\"fd-select-popover-body-custom\"\n        [style.maxHeight]=\"maxHeight || (calculatedMaxHeight + 'px')\">\n        <fd-menu>\n            <ul fd-menu-list>\n                <ng-content></ng-content>\n            </ul>\n        </fd-menu>\n    </fd-popover-body>\n</fd-popover>\n",
                encapsulation: ViewEncapsulation.None,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => SelectComponent)),
                        multi: true
                    }
                ],
                host: {
                    '[class.fd-select-custom]': 'true',
                    'role': 'listbox',
                },
                styles: ["@charset \"UTF-8\";.fd-select-custom{display:inline-block;width:100%}.fd-select-custom .fd-select-popover-custom{display:block}.fd-select-custom .fd-select-popover-custom fd-popover-container{min-width:100%;overflow:auto}.fd-select-custom .fd-select-button-custom{padding-right:0;display:flex;justify-content:space-between;align-items:stretch;width:100%;border-color:var(--sapUiFieldBorderColor,#89919a);color:var(--sapUiFieldTextColor,#32363a);border-radius:.125rem}.fd-select-custom .fd-select-button-custom::after{font-family:SAP-icons;content:\"\uE1E2\";color:var(--sapUiContentIconColor,#0854a0);font-style:normal;font-weight:400;font-size:12px;text-decoration:inherit;text-transform:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;speak:none;width:36px;display:flex;justify-content:center;align-items:center}.fd-select-custom .fd-select-button-custom:hover{border-color:var(--sapUiFieldHoverBorderColor,#0854a0);background-color:var(--sapUiFieldBackground,#fff);color:var(--sapUiFieldTextColor,#32363a)}.fd-select-custom .fd-select-button-custom:hover::after{background-color:var(--sapUiButtonLiteHoverBackground,#ebf5fe)}.fd-select-custom .fd-select-button-custom.is-active,.fd-select-custom .fd-select-button-custom:active,.fd-select-custom .fd-select-button-custom[aria-expanded=true]{border-color:var(--sapUiFieldActiveBorderColor,#0854a0)}.fd-select-custom .fd-select-button-custom.is-active::after,.fd-select-custom .fd-select-button-custom:active::after,.fd-select-custom .fd-select-button-custom[aria-expanded=true]::after{color:var(--sapUiButtonActiveTextColor,#fff);background-color:var(--sapButton_Lite_Active_Background,#0854a0)}.fd-select-custom .fd-select-button-custom[dir=rtl],[dir=rtl] .fd-select-custom .fd-select-button-custom{padding-left:0;padding-right:12px}.fd-select-custom .fd-select-button-custom.is-disabled,.fd-select-custom .fd-select-button-custom:disabled,.fd-select-custom .fd-select-button-custom[aria-disabled=true]{cursor:not-allowed}.fd-select-custom .fd-select-button-custom.is-disabled:hover,.fd-select-custom .fd-select-button-custom:disabled:hover,.fd-select-custom .fd-select-button-custom[aria-disabled=true]:hover{border-color:var(--sapUiFieldBorderColor,#89919a);background-color:var(--sapUiFieldBackground,#fff);color:var(--sapUiFieldTextColor,#32363a)}.fd-select-custom .fd-select-button-custom.is-disabled:hover::after,.fd-select-custom .fd-select-button-custom:disabled:hover::after,.fd-select-custom .fd-select-button-custom[aria-disabled=true]:hover::after{background-color:var(--sapUiFieldBackground,#fff)}.fd-select-custom .fd-select-text-custom{text-overflow:ellipsis;white-space:nowrap;overflow-x:hidden;pointer-events:none}.fd-select-custom .fd-select-popover-body-custom{display:block}"]
            }] }
];
SelectComponent.propDecorators = {
    fdDropdownClass: [{ type: HostBinding, args: ['class.fd-dropdown',] }],
    options: [{ type: ContentChildren, args: [OptionComponent, { descendants: true },] }],
    disabled: [{ type: Input }],
    placeholder: [{ type: Input }],
    isOpen: [{ type: Input }],
    value: [{ type: Input }],
    compact: [{ type: Input }],
    maxHeight: [{ type: Input }],
    popperOptions: [{ type: Input }],
    fillControlMode: [{ type: Input }],
    triggerTemplate: [{ type: Input }],
    appendTo: [{ type: Input }],
    isOpenChange: [{ type: Output }],
    valueChange: [{ type: Output }],
    keydownHandler: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    resizeScrollHandler: [{ type: HostListener, args: ['window:resize',] }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    SelectComponent.prototype.fdDropdownClass;
    /**
     * @hidden
     * @type {?}
     */
    SelectComponent.prototype.options;
    /**
     * Whether the select component is disabled.
     * @type {?}
     */
    SelectComponent.prototype.disabled;
    /**
     * Placeholder for the select. Appears in the triggerbox if no option is selected.
     * @type {?}
     */
    SelectComponent.prototype.placeholder;
    /**
     * Open state of the select.
     * @type {?}
     */
    SelectComponent.prototype.isOpen;
    /**
     * Current value of the selected option.
     * @type {?}
     */
    SelectComponent.prototype.value;
    /**
     * Whether the select is in compact mode.
     * @type {?}
     */
    SelectComponent.prototype.compact;
    /**
     * Max height of the popover. Any overflowing elements will be accessible through scrolling.
     * @type {?}
     */
    SelectComponent.prototype.maxHeight;
    /**
     * Popper.js options of the popover.
     * @type {?}
     */
    SelectComponent.prototype.popperOptions;
    /**
     * Preset options for the popover body width.
     * * `at-least` will apply a minimum width to the body equivalent to the width of the control.
     * * `equal` will apply a width to the body equivalent to the width of the control.
     * * Leave blank for no effect.
     * @type {?}
     */
    SelectComponent.prototype.fillControlMode;
    /**
     * Template with which to display the trigger box.
     * @type {?}
     */
    SelectComponent.prototype.triggerTemplate;
    /**
     * The element to which the popover should be appended.
     * @type {?}
     */
    SelectComponent.prototype.appendTo;
    /**
     * Event emitted when the popover open state changes.
     * @type {?}
     */
    SelectComponent.prototype.isOpenChange;
    /**
     * Event emitted when the selected value of the select changes.
     * @type {?}
     */
    SelectComponent.prototype.valueChange;
    /**
     * @hidden
     * @type {?}
     */
    SelectComponent.prototype.calculatedMaxHeight;
    /**
     * Current selected option component reference.
     * @type {?}
     * @private
     */
    SelectComponent.prototype.selected;
    /**
     * Subject triggered when the component is destroyed.
     * @type {?}
     * @private
     */
    SelectComponent.prototype.destroy$;
    /**
     * Observable triggered when an option has its selectedChange event fire.
     * @type {?}
     * @private
     */
    SelectComponent.prototype.optionsStatusChanges;
    /**
     * @hidden
     * @type {?}
     */
    SelectComponent.prototype.onChange;
    /**
     * @hidden
     * @type {?}
     */
    SelectComponent.prototype.onTouched;
}
//# sourceMappingURL=data:application/json;base64,