/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation } from '@angular/core';
import { TimeObject } from './time-object';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { TimeI18nLabels } from './i18n/time-i18n-labels';
import { TimeI18n } from './i18n/time-i18n';
export class TimeComponent {
    /**
     * @param {?} timeI18nLabels
     * @param {?} timeI18n
     */
    constructor(timeI18nLabels, timeI18n) {
        this.timeI18nLabels = timeI18nLabels;
        this.timeI18n = timeI18n;
        /**
         * \@Input When set to false, uses the 24 hour clock (hours ranging from 0 to 23)
         * and does not display a period control.
         */
        this.meridian = false;
        /**
         * \@Input When set to false, does not set the input field to invalid state on invalid entry.
         */
        this.validate = true;
        /**
         * \@Input When set to false, hides the buttons that increment and decrement the corresponding input.
         */
        this.spinners = true;
        /**
         * \@Input When set to false, hides the input for seconds.
         */
        this.displaySeconds = true;
        /**
         * \@Input When set to false, hides the input for minutes.
         */
        this.displayMinutes = true;
        /**
         * When set to false, hides the input for hours
         */
        this.displayHours = true;
        /**
         * \@Input An object that contains three integer properties: 'hour' (ranging from 0 to 23),
         * 'minute' (ranging from 0 to 59), and 'second' (ranging from 0 to 59). This is the model the component consumes. Example:
         *
         * ```json
         * { hour: 12, minute: 0, second: 0 }
         * ```
         */
        this.time = { hour: 0, minute: 0, second: 0 };
        /**
         * @hidden
         */
        this.focusArrowLeft = new EventEmitter();
        /**
         * @hidden
         * Variable that is displayed as an hour.
         * For meridian mode ranging from 0 to 12,
         * For non-meridian mode ranging from 0 to 23, and reflects the hour value
         */
        this.displayedHour = 0;
        /**
         * @hidden
         */
        this.onChange = (/**
         * @param {?} time
         * @return {?}
         */
        (time) => {
        });
        /**
         * @hidden
         */
        this.onTouched = (/**
         * @return {?}
         */
        () => {
        });
    }
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @hidden
     * @param {?} time
     * @return {?}
     */
    writeValue(time) {
        if (!time) {
            return;
        }
        this.time = Object.assign({}, time);
        this.setDisplayedHour();
    }
    /**
     * @hidden
     * Reacts only when there is meridian or time input change
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.meridian || changes.time) {
            this.setDisplayedHour();
        }
    }
    /**
     * @hidden
     * Changes displayed hour value, used mostly when the model hour is changed
     * @return {?}
     */
    setDisplayedHour() {
        if (!this.meridian) {
            this.displayedHour = this.time.hour;
        }
        else if (this.time.hour === 0) {
            this.displayedHour = 12;
            this.period = this.timeI18n.meridianAm;
        }
        else if (this.time.hour > 12) {
            this.displayedHour = this.time.hour - 12;
            this.period = this.timeI18n.meridianPm;
        }
        else if (this.time.hour === 12) {
            this.displayedHour = 12;
            this.period = this.timeI18n.meridianPm;
        }
        else {
            this.displayedHour = this.time.hour;
            this.period = this.timeI18n.meridianAm;
        }
    }
    /**
     * @hidden
     * Handles changes of displayed hour value from template.
     * @return {?}
     */
    displayedHourChanged() {
        if (!this.meridian) {
            this.time.hour = this.displayedHour;
        }
        else {
            if (this.period === this.timeI18n.meridianAm) {
                if (this.displayedHour === 12) {
                    this.time.hour = 0;
                }
                else {
                    this.time.hour = this.displayedHour;
                }
            }
            else if (this.period === this.timeI18n.meridianPm) {
                if (this.displayedHour === 12) {
                    this.time.hour = this.displayedHour;
                }
                else {
                    this.time.hour = this.displayedHour + 12;
                }
            }
        }
        this.onChange(this.time);
    }
    /**
     * @hidden
     * Handles the blur events from inputs. Also rewrite values if they are incorrect, prevents from negative or too big
     * values. Also changes period if it's on meridian type and hour is bigger than 12.
     * @param {?} inputType
     * @return {?}
     */
    inputBlur(inputType) {
        switch (inputType) {
            case 'hour': {
                this.displayedHour = Math.round(Math.abs(this.displayedHour)) % 24;
                this.time.hour = this.displayedHour;
                if (this.meridian) {
                    if (this.displayedHour > 12) {
                        this.period = this.timeI18n.meridianPm;
                        this.displayedHour = this.displayedHour !== 12 ? this.displayedHour % 12 : this.displayedHour;
                    }
                    else if (this.displayedHour === 0) {
                        this.displayedHour = 12;
                        this.period = this.timeI18n.meridianAm;
                    }
                    else if (this.isAm(this.period) && this.displayedHour === 12) {
                        this.time.hour = 0;
                    }
                }
                break;
            }
            case 'minute': {
                this.time.minute = Math.abs(Math.round(this.time.minute) % 60);
                break;
            }
            case 'second': {
                this.time.second = Math.abs(Math.round(this.time.second) % 60);
                break;
            }
            case 'period': {
                /**
                 * When there is invalid period, function changes period to valid basing on actual hour
                 */
                if (!this.period ||
                    (!this.isPm(this.period) && !this.isAm(this.period))) {
                    this.setDisplayedHour();
                }
            }
        }
        this.onChange(this.time);
    }
    /**
     * Increases the hour value by one.
     * @return {?}
     */
    increaseHour() {
        if (this.time.hour === null) {
            this.time.hour = 0;
        }
        else if (this.time.hour === 23) {
            this.time.hour = 0;
        }
        else {
            this.time.hour = this.time.hour + 1;
        }
        this.setDisplayedHour();
        this.onChange(this.time);
    }
    /**
     * Decreases the hour value by one.
     * @return {?}
     */
    decreaseHour() {
        if (this.time.hour === null) {
            this.time.hour = 0;
        }
        else if (this.time.hour === 0) {
            this.time.hour = 23;
        }
        else {
            this.time.hour = this.time.hour - 1;
        }
        this.setDisplayedHour();
        this.onChange(this.time);
    }
    /**
     * Increases the minute value by one.
     * @return {?}
     */
    increaseMinute() {
        if (this.time.minute === null) {
            this.time.minute = 0;
        }
        else if (this.time.minute === 59) {
            this.time.minute = 0;
            this.increaseHour();
        }
        else {
            this.time.minute = this.time.minute + 1;
        }
        this.onChange(this.time);
    }
    /**
     * Decreases the minute value by one.
     * @return {?}
     */
    decreaseMinute() {
        if (this.time.minute === null) {
            this.time.minute = 0;
        }
        else if (this.time.minute === 0) {
            this.time.minute = 59;
            this.decreaseHour();
        }
        else {
            this.time.minute = this.time.minute - 1;
        }
        this.onChange(this.time);
    }
    /**
     * Increases the second value by one.
     * @return {?}
     */
    increaseSecond() {
        if (this.displaySeconds) {
            if (this.time.second === null) {
                this.time.second = 0;
            }
            else if (this.time.second === 59) {
                this.time.second = 0;
                this.increaseMinute();
            }
            else {
                this.time.second = this.time.second + 1;
            }
        }
        this.onChange(this.time);
    }
    /**
     * Decreases the second value by one.
     * @return {?}
     */
    decreaseSecond() {
        if (this.displaySeconds) {
            if (this.time.second === null) {
                this.time.second = 0;
            }
            else if (this.time.second === 0) {
                this.time.second = 59;
                this.decreaseMinute();
            }
            else {
                this.time.second = this.time.second - 1;
            }
        }
        this.onChange(this.time);
    }
    /**
     * Toggles the period (am/pm).
     * @return {?}
     */
    togglePeriod() {
        if (this.time.hour < 24 && this.time.hour >= 0) {
            if (this.isAm(this.period)) {
                this.period = this.timeI18n.meridianPm;
                this.periodModelChange();
            }
            else if (this.isPm(this.period)) {
                this.period = this.timeI18n.meridianAm;
                this.periodModelChange();
            }
        }
    }
    /**
     * @hidden
     * Handles minutes model change from template
     *
     * @return {?}
     */
    minuteModelChange() {
        if (!(this.time.minute > 59 || this.time.minute < 0) || !this.validate) {
            this.onChange(this.time);
        }
    }
    /**
     * @hidden
     * Handles seconds model change from template
     *
     * @return {?}
     */
    secondModelChange() {
        if (!(this.time.second > 59 || this.time.second < 0) || !this.validate) {
            this.onChange(this.time);
        }
    }
    /**
     * @hidden
     * Handles period model change. depending on current hour and new period changes hours by +/- 12
     * @return {?}
     */
    periodModelChange() {
        if (this.time && !this.time.hour) {
            this.time.hour = 0;
        }
        if (this.time.hour < 24 && this.time.hour >= 0) {
            if (this.isPm(this.period) && this.time.hour < 12) {
                this.time.hour = this.time.hour + 12;
            }
            else if (this.time.hour >= 12 && this.isAm(this.period)) {
                this.time.hour = this.time.hour - 12;
            }
            this.onChange(this.time);
        }
    }
    /**
     * @hidden
     * Handles last button keyboard events
     * @param {?} event
     * @return {?}
     */
    lastButtonKeydown(event) {
        if (event.code === 'Tab' && !event.shiftKey) {
            event.preventDefault();
            this.focusArrowLeft.emit();
        }
    }
    /**
     * @hidden
     * Defines if period is PM, Considers the fact that period should be case sensitive
     * @private
     * @param {?} period
     * @return {?}
     */
    isPm(period) {
        /** @type {?} */
        const pmMeridian = this.timeI18n.meridianCaseSensitive ? this.timeI18n.meridianPm : this.timeI18n.meridianPm.toLocaleUpperCase();
        period = this.timeI18n.meridianCaseSensitive ? period : period.toLocaleUpperCase();
        return period === pmMeridian;
    }
    /**
     * @hidden
     * Defines if period is AM, Considers the fact that period should be case sensitive
     * @private
     * @param {?} period
     * @return {?}
     */
    isAm(period) {
        /** @type {?} */
        const amMeridian = this.timeI18n.meridianCaseSensitive ? this.timeI18n.meridianAm : this.timeI18n.meridianAm.toLocaleUpperCase();
        period = this.timeI18n.meridianCaseSensitive ? period : period.toLocaleUpperCase();
        return period === amMeridian;
    }
}
TimeComponent.decorators = [
    { type: Component, args: [{
                selector: 'fd-time',
                template: "<div *ngIf=\"displayHours\"\n    class=\"fd-time__item\">\n    <div class=\"fd-time__control\">\n        <button *ngIf=\"spinners\"\n                (click)=\"increaseHour()\"\n                type=\"button\"\n                fd-button\n                [disabled]=\"disabled\"\n                [glyph]=\"'navigation-up-arrow'\"\n                [options]=\"'light'\"\n                [size]=\"'xs'\"\n                [attr.aria-label]=\"timeI18nLabels?.increaseHoursLabel\"></button>\n    </div>\n    <input [(ngModel)]=\"displayedHour\"\n            fd-only-digits\n            [ngClass]=\"{\n            'is-disabled': disabled,\n            'is-invalid': ((displayedHour > 24 || displayedHour < 0) && validate)\n            }\"\n            (ngModelChange)=\"displayedHourChanged()\"\n            (blur)=\"inputBlur('hour')\"\n            class=\"fd-input fd-time__input\"\n            type=\"number\"\n            placeholder=\"{{timeI18n?.hoursPlaceholder}}\"\n            [attr.aria-label]=\"timeI18nLabels?.hoursLabel\"/>\n    <div class=\"fd-time__control\">\n        <button *ngIf=\"spinners\"\n                (click)=\"decreaseHour()\"\n                type=\"button\"\n                fd-button\n                [disabled]=\"disabled\"\n                [glyph]=\"'navigation-down-arrow'\"\n                [options]=\"'light'\"\n                [size]=\"'xs'\"\n                [attr.aria-label]=\"timeI18nLabels?.decreaseHoursLabel\"></button>\n    </div>\n</div>\n\n<div *ngIf=\"displayMinutes\"\n    class=\"fd-time__item\">\n    <div class=\"fd-time__control\">\n        <button *ngIf=\"spinners\"\n                [disabled]=\"disabled\"\n                (click)=\"increaseMinute()\"\n                fd-button\n                [size]=\"'xs'\"\n                [glyph]=\"'navigation-up-arrow'\"\n                [options]=\"'light'\"\n                type=\"button\"\n                [attr.aria-label]=\"timeI18nLabels?.increaseMinutesLabel\"></button>\n    </div>\n    <input [(ngModel)]=\"time.minute\"\n            fd-only-digits\n            (ngModelChange)=\"minuteModelChange()\"\n            (blur)=\"inputBlur('minute')\"\n            [ngClass]=\"{'is-disabled': disabled, 'is-invalid': ((time.minute > 59 || time.minute < 0) && validate)}\"\n            class=\"fd-input fd-time__input\"\n            type=\"number\"\n            placeholder=\"{{timeI18n?.minutesPlaceholder}}\"\n            [attr.aria-label]=\"timeI18nLabels?.minutesLabel\"/>\n    <div class=\"fd-time__control\">\n        <button *ngIf=\"spinners\"\n                [disabled]=\"disabled\"\n                (click)=\"decreaseMinute()\"\n                fd-button\n                [size]=\"'xs'\"\n                [glyph]=\"'navigation-down-arrow'\"\n                [options]=\"'light'\"\n                type=\"button\"\n                [attr.aria-label]=\"timeI18nLabels?.decreaseMinutesLabel\"></button>\n    </div>\n</div>\n<div *ngIf=\"displaySeconds\"\n     class=\"fd-time__item\">\n    <div class=\"fd-time__control\">\n        <button *ngIf=\"spinners\"\n                [disabled]=\"disabled\"\n                (click)=\"increaseSecond()\"\n                fd-button\n                [size]=\"'xs'\"\n                [glyph]=\"'navigation-up-arrow'\"\n                [options]=\"'light'\"\n                type=\"button\"\n                [attr.aria-label]=\"timeI18nLabels?.increaseSecondsLabel\"></button>\n    </div>\n    <input [(ngModel)]=\"time.second\"\n            fd-only-digits\n            (ngModelChange)=\"secondModelChange()\"\n            (blur)=\"inputBlur('second')\"\n            [ngClass]=\"{'is-disabled': disabled, 'is-invalid': ((time.second > 59 || time.second < 0) && validate)}\"\n            class=\"fd-input fd-time__input\"\n            type=\"number\"\n            placeholder=\"{{timeI18n?.secondsPlaceholder}}\"\n            (keydown)=\"!meridian && !spinners ? lastButtonKeydown($event) : ''\"\n            [attr.aria-label]=\"timeI18nLabels?.secondsLabel\"/>\n    <div class=\"fd-time__control\">\n        <button *ngIf=\"spinners\"\n                [disabled]=\"disabled\"\n                (click)=\"decreaseSecond()\"\n                fd-button\n                [size]=\"'xs'\"\n                [glyph]=\"'navigation-down-arrow'\"\n                [options]=\"'light'\"\n                type=\"button\"\n                [attr.aria-label]=\"timeI18nLabels?.decreaseSecondsLabel\"\n                (keydown)=\"!meridian ? lastButtonKeydown($event) : ''\"></button>\n    </div>\n</div>\n<div *ngIf=\"meridian\"\n     class=\"fd-time__item\">\n    <div class=\"fd-time__control\">\n        <button *ngIf=\"spinners\"\n                [disabled]=\"disabled\"\n                (click)=\"togglePeriod()\"\n                fd-button\n                [size]=\"'xs'\"\n                [glyph]=\"'navigation-up-arrow'\"\n                [options]=\"'light'\"\n                type=\"button\"\n                [attr.aria-label]=\"timeI18nLabels?.increasePeriodLabel\"></button>\n    </div>\n    <input [(ngModel)]=\"period\"\n            [ngClass]=\"{'is-disabled': disabled}\"\n            class=\"fd-input fd-time__input\"\n            (blur)=\"inputBlur('period')\"\n            (ngModelChange)=\"periodModelChange()\"\n            type=\"text\"\n            placeholder=\"{{timeI18n?.meridianPlaceholder}}\"\n            [attr.aria-label]=\"timeI18nLabels?.periodLabel\"/>\n    <div class=\"fd-time__control\">\n        <button *ngIf=\"spinners\"\n                [disabled]=\"disabled\"\n                (click)=\"togglePeriod()\"\n                fd-button\n                [size]=\"'xs'\"\n                [glyph]=\"'navigation-down-arrow'\"\n                [options]=\"'light'\"\n                type=\"button\"\n                [attr.aria-label]=\"timeI18nLabels?.decreasePeriodLabel\"\n                (keydown)=\"lastButtonKeydown($event)\"></button>\n    </div>\n</div>\n",
                host: {
                    '(blur)': 'onTouched()',
                    class: 'fd-time fd-has-display-block'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TimeComponent)),
                        multi: true
                    }
                ],
                encapsulation: ViewEncapsulation.None,
                styles: ["/*!\n * Fundamental Styles v0.3.0\n * Copyright (c) 2019 SAP SE or an SAP affiliate company.\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/master/LICENSE)\n *//*!\n.fd-input\n*/.fd-input{color:#32363a;color:var(--fd-color-text-1,#32363a);font-family:\"72\",-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;-webkit-font-smoothing:antialiased;-webkit-box-sizing:border-box;padding:0 12px;margin:0;border:1px solid #89919a;font-size:14px;line-height:1.42857;font-weight:400;appearance:none;-webkit-appearance:textfield;-moz-appearance:textfield;box-sizing:border-box;outline:0;border-color:var(--fd-forms-border-color,#89919a);background-color:#fff;background-color:var(--fd-forms-background-color,#fff);border-radius:4px;transition:border-color 125ms;height:36px;height:var(--fd-forms-height,36px);width:100%}.fd-input:after,.fd-input:before{box-sizing:inherit;font-size:inherit}.fd-input .is-hover,.fd-input:hover{border-color:#085caf;border-color:var(--fd-color-action-hover,#085caf)}.fd-input.is-focus,.fd-input:focus{box-shadow:0 0 0 1px #085caf;box-shadow:0 0 0 1px var(--fd-color-action-focus,#085caf);z-index:5;border-color:#085caf;border-color:var(--fd-color-action-focus,#085caf)}.fd-input.is-invalid{border-color:#b00;border-color:var(--fd-color-negative,#b00);border-width:2px}.fd-input.is-valid{border-color:#0a7e3e;border-color:var(--fd-color-positive,#0a7e3e);border-width:2px}.fd-input.is-alert,.fd-input.is-warning{border-color:#e9730c;border-color:var(--fd-color-alert,#e9730c);border-width:2px}.fd-input.is-disabled,.fd-input:disabled,.fd-input[aria-disabled=true]{cursor:not-allowed;color:#6a6d70;color:var(--fd-color-text-3,#6a6d70);border-color:#eeeeef;border-color:var(--fd-color-neutral-2,#eeeeef);background-color:#fafafa;background-color:var(--fd-color-neutral-1,#fafafa)}.fd-input.is-readonly,.fd-input[readonly]{color:#32363a;color:var(--fd-forms-color,#32363a);border-color:#eeeeef;border-color:var(--fd-color-neutral-2,#eeeeef);border-width:0 0 1px;border-radius:0}.fd-input::-webkit-input-placeholder{font-size:14px;line-height:1.42857;color:var(--fd-color-text-1,#32363a);font-family:\"72\",-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0;color:#8d9194;color:var(--fd-color-neutral-4,#8d9194)}.fd-input::-moz-placeholder{font-size:14px;line-height:1.42857;color:var(--fd-color-text-1,#32363a);font-family:\"72\",-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0;color:#8d9194;color:var(--fd-color-neutral-4,#8d9194)}.fd-input:-ms-input-placeholder{font-size:14px;line-height:1.42857;color:var(--fd-color-text-1,#32363a);font-family:\"72\",-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0;color:#8d9194;color:var(--fd-color-neutral-4,#8d9194)}.fd-input::-ms-input-placeholder{font-size:14px;line-height:1.42857;color:var(--fd-color-text-1,#32363a);font-family:\"72\",-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0;color:#8d9194;color:var(--fd-color-neutral-4,#8d9194)}.fd-input::placeholder{font-size:14px;line-height:1.42857;color:var(--fd-color-text-1,#32363a);font-family:\"72\",-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0;color:#8d9194;color:var(--fd-color-neutral-4,#8d9194)}.fd-input::-webkit-input-placeholder:after,.fd-input::-webkit-input-placeholder:before{box-sizing:inherit;font-size:inherit}.fd-input::-moz-placeholder:after,.fd-input::-moz-placeholder:before{box-sizing:inherit;font-size:inherit}.fd-input:-ms-input-placeholder:after,.fd-input:-ms-input-placeholder:before{box-sizing:inherit;font-size:inherit}.fd-input::-ms-input-placeholder:after,.fd-input::-ms-input-placeholder:before{box-sizing:inherit;font-size:inherit}.fd-input::placeholder:after,.fd-input::placeholder:before{box-sizing:inherit;font-size:inherit}.fd-input--compact{height:28px;height:var(--fd-forms-height-compact,28px)}.fd-input--no-number-spinner{-moz-appearance:textfield}.fd-input--no-number-spinner::-webkit-inner-spin-button,.fd-input--no-number-spinner::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}/*!\n * Fundamental Styles v0.3.0\n * Copyright (c) 2019 SAP SE or an SAP affiliate company.\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/master/LICENSE)\n */.fd-time{font-size:14px;line-height:1.42857;color:#32363a;color:var(--fd-color-text-1,#32363a);font-family:\"72\",-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0;width:184px}.fd-time:after,.fd-time:before{box-sizing:inherit;font-size:inherit}.fd-time__item{font-size:14px;line-height:1.42857;color:#32363a;color:var(--fd-color-text-1,#32363a);font-family:\"72\",-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0 4px 0 0;border:0;display:inline-block;max-width:40px;text-align:center}.fd-time__item:after,.fd-time__item:before{box-sizing:inherit;font-size:inherit}.fd-time__item:last-child{margin-right:0}.fd-time__item .fd-time__input{margin:8px 0;padding-left:8px;padding-right:8px;text-align:center}.fd-time__control{font-size:14px;line-height:1.42857;color:#32363a;color:var(--fd-color-text-1,#32363a);font-family:\"72\",-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0}.fd-time__control:after,.fd-time__control:before{box-sizing:inherit;font-size:inherit}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}"]
            }] }
];
/** @nocollapse */
TimeComponent.ctorParameters = () => [
    { type: TimeI18nLabels },
    { type: TimeI18n }
];
TimeComponent.propDecorators = {
    meridian: [{ type: Input }],
    validate: [{ type: Input }],
    disabled: [{ type: Input }],
    spinners: [{ type: Input }],
    displaySeconds: [{ type: Input }],
    displayMinutes: [{ type: Input }],
    displayHours: [{ type: Input }],
    time: [{ type: Input }],
    focusArrowLeft: [{ type: Output }]
};
if (false) {
    /**
     * \@Input When set to false, uses the 24 hour clock (hours ranging from 0 to 23)
     * and does not display a period control.
     * @type {?}
     */
    TimeComponent.prototype.meridian;
    /**
     * \@Input When set to false, does not set the input field to invalid state on invalid entry.
     * @type {?}
     */
    TimeComponent.prototype.validate;
    /**
     * \@Input Disables the component.
     * @type {?}
     */
    TimeComponent.prototype.disabled;
    /**
     * \@Input When set to false, hides the buttons that increment and decrement the corresponding input.
     * @type {?}
     */
    TimeComponent.prototype.spinners;
    /**
     * \@Input When set to false, hides the input for seconds.
     * @type {?}
     */
    TimeComponent.prototype.displaySeconds;
    /**
     * \@Input When set to false, hides the input for minutes.
     * @type {?}
     */
    TimeComponent.prototype.displayMinutes;
    /**
     * When set to false, hides the input for hours
     * @type {?}
     */
    TimeComponent.prototype.displayHours;
    /**
     * \@Input An object that contains three integer properties: 'hour' (ranging from 0 to 23),
     * 'minute' (ranging from 0 to 59), and 'second' (ranging from 0 to 59). This is the model the component consumes. Example:
     *
     * ```json
     * { hour: 12, minute: 0, second: 0 }
     * ```
     * @type {?}
     */
    TimeComponent.prototype.time;
    /**
     * @hidden
     * @type {?}
     */
    TimeComponent.prototype.focusArrowLeft;
    /**
     * @hidden
     * Used only in meridian mode. Stores information the current am/pm state.
     * @type {?}
     */
    TimeComponent.prototype.period;
    /**
     * @hidden
     * Variable that is displayed as an hour.
     * For meridian mode ranging from 0 to 12,
     * For non-meridian mode ranging from 0 to 23, and reflects the hour value
     * @type {?}
     */
    TimeComponent.prototype.displayedHour;
    /**
     * @hidden
     * @type {?}
     */
    TimeComponent.prototype.onChange;
    /**
     * @hidden
     * @type {?}
     */
    TimeComponent.prototype.onTouched;
    /** @type {?} */
    TimeComponent.prototype.timeI18nLabels;
    /** @type {?} */
    TimeComponent.prototype.timeI18n;
}
//# sourceMappingURL=data:application/json;base64,