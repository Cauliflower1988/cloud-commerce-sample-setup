/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';
/**
 * A directive designed to help navigation elements determine the element currently in view of the user.
 */
export class ScrollSpyDirective {
    /**
     * @hidden
     * @param {?} elRef
     */
    constructor(elRef) {
        this.elRef = elRef;
        /**
         * An array of tags to track.
         */
        this.trackedTags = [];
        /**
         * Whether events are still fired if there is no tag present on the user's screen.
         */
        this.fireEmpty = false;
        /**
         * A number that represent at what location in the container the event is fired.
         * 0.5 would fire the events in the middle of the container,
         * 0 for the top and 1 for the bottom.
         */
        this.targetPercent = 0;
        /**
         * Number that represents the offset in pixels for fired target. `100` value means that the event will be fired for
         * target that is 100 pixels below the spy container.
         */
        this.targetOffset = 0;
        /**
         * Event fired on the scroll element when a new item becomes activated by the scrollspy .
         * The returned value is the HTMLElement itself.
         */
        this.spyChange = new EventEmitter();
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onScroll(event) {
        /** @type {?} */
        let spiedTag;
        /** @type {?} */
        const children = this.elRef.nativeElement.children;
        /** @type {?} */
        const targetScrollTop = event.target.scrollTop;
        /** @type {?} */
        const targetOffsetTop = event.target.offsetTop + this.targetOffset;
        for (let i = 0; i < children.length; i++) {
            /** @type {?} */
            const element = children[i];
            if (this.trackedTags.some((/**
             * @param {?} tag
             * @return {?}
             */
            tag => tag.toLocaleUpperCase() === element.tagName.toLocaleUpperCase()))) {
                if ((element.offsetTop - targetOffsetTop) <= targetScrollTop + event.target.offsetHeight * this.targetPercent) {
                    spiedTag = element;
                }
            }
        }
        if ((spiedTag || this.fireEmpty) && spiedTag !== this.currentActive) {
            this.currentActive = spiedTag;
            this.spyChange.emit(this.currentActive);
        }
    }
}
ScrollSpyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fdScrollSpy]'
            },] }
];
/** @nocollapse */
ScrollSpyDirective.ctorParameters = () => [
    { type: ElementRef }
];
ScrollSpyDirective.propDecorators = {
    trackedTags: [{ type: Input }],
    fireEmpty: [{ type: Input }],
    targetPercent: [{ type: Input }],
    targetOffset: [{ type: Input }],
    spyChange: [{ type: Output }],
    onScroll: [{ type: HostListener, args: ['scroll', ['$event'],] }]
};
if (false) {
    /**
     * An array of tags to track.
     * @type {?}
     */
    ScrollSpyDirective.prototype.trackedTags;
    /**
     * Whether events are still fired if there is no tag present on the user's screen.
     * @type {?}
     */
    ScrollSpyDirective.prototype.fireEmpty;
    /**
     * A number that represent at what location in the container the event is fired.
     * 0.5 would fire the events in the middle of the container,
     * 0 for the top and 1 for the bottom.
     * @type {?}
     */
    ScrollSpyDirective.prototype.targetPercent;
    /**
     * Number that represents the offset in pixels for fired target. `100` value means that the event will be fired for
     * target that is 100 pixels below the spy container.
     * @type {?}
     */
    ScrollSpyDirective.prototype.targetOffset;
    /**
     * Event fired on the scroll element when a new item becomes activated by the scrollspy .
     * The returned value is the HTMLElement itself.
     * @type {?}
     */
    ScrollSpyDirective.prototype.spyChange;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    ScrollSpyDirective.prototype.currentActive;
    /**
     * @type {?}
     * @private
     */
    ScrollSpyDirective.prototype.elRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXNweS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZnVuZGFtZW50YWwtbmd4L2NvcmUvIiwic291cmNlcyI6WyJsaWIvc2Nyb2xsLXNweS9zY3JvbGwtc3B5LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBUWpHLE1BQU0sT0FBTyxrQkFBa0I7Ozs7O0lBdUMzQixZQUFvQixLQUFpQjtRQUFqQixVQUFLLEdBQUwsS0FBSyxDQUFZOzs7O1FBbEM5QixnQkFBVyxHQUFhLEVBQUUsQ0FBQzs7OztRQU0zQixjQUFTLEdBQVksS0FBSyxDQUFDOzs7Ozs7UUFRM0Isa0JBQWEsR0FBVyxDQUFDLENBQUM7Ozs7O1FBTzFCLGlCQUFZLEdBQVcsQ0FBQyxDQUFDOzs7OztRQU9oQixjQUFTLEdBQThCLElBQUksWUFBWSxFQUFlLENBQUM7SUFNL0MsQ0FBQzs7Ozs7O0lBSXpDLFFBQVEsQ0FBQyxLQUFVOztZQUNYLFFBQXFCOztjQUNuQixRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsUUFBUTs7Y0FDNUMsZUFBZSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUzs7Y0FDeEMsZUFBZSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZO1FBRWxFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOztrQkFDaEMsT0FBTyxHQUFnQixRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJOzs7O1lBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxPQUFPLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEVBQUMsRUFBRTtnQkFDL0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsZUFBZSxDQUFDLElBQUksZUFBZSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUU7b0JBQzNHLFFBQVEsR0FBRyxPQUFPLENBQUM7aUJBQ3RCO2FBQ0o7U0FDSjtRQUVELElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLFFBQVEsS0FBSyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2pFLElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDO1lBQzlCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUMzQztJQUNMLENBQUM7OztZQWpFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGVBQWU7YUFDNUI7Ozs7WUFQbUIsVUFBVTs7OzBCQVl6QixLQUFLO3dCQU1MLEtBQUs7NEJBUUwsS0FBSzsyQkFPTCxLQUFLO3dCQU9MLE1BQU07dUJBVU4sWUFBWSxTQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7Ozs7OztJQXRDbEMseUNBQ2tDOzs7OztJQUtsQyx1Q0FDa0M7Ozs7Ozs7SUFPbEMsMkNBQ2lDOzs7Ozs7SUFNakMsMENBQ2dDOzs7Ozs7SUFNaEMsdUNBQ3VGOzs7Ozs7SUFHdkYsMkNBQW1DOzs7OztJQUd2QixtQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQSBkaXJlY3RpdmUgZGVzaWduZWQgdG8gaGVscCBuYXZpZ2F0aW9uIGVsZW1lbnRzIGRldGVybWluZSB0aGUgZWxlbWVudCBjdXJyZW50bHkgaW4gdmlldyBvZiB0aGUgdXNlci5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbZmRTY3JvbGxTcHldJ1xufSlcbmV4cG9ydCBjbGFzcyBTY3JvbGxTcHlEaXJlY3RpdmUge1xuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIHRhZ3MgdG8gdHJhY2suXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgdHJhY2tlZFRhZ3M6IHN0cmluZ1tdID0gW107XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIGV2ZW50cyBhcmUgc3RpbGwgZmlyZWQgaWYgdGhlcmUgaXMgbm8gdGFnIHByZXNlbnQgb24gdGhlIHVzZXIncyBzY3JlZW4uXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZmlyZUVtcHR5OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBBIG51bWJlciB0aGF0IHJlcHJlc2VudCBhdCB3aGF0IGxvY2F0aW9uIGluIHRoZSBjb250YWluZXIgdGhlIGV2ZW50IGlzIGZpcmVkLlxuICAgICAqIDAuNSB3b3VsZCBmaXJlIHRoZSBldmVudHMgaW4gdGhlIG1pZGRsZSBvZiB0aGUgY29udGFpbmVyLFxuICAgICAqIDAgZm9yIHRoZSB0b3AgYW5kIDEgZm9yIHRoZSBib3R0b20uXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgdGFyZ2V0UGVyY2VudDogbnVtYmVyID0gMDtcblxuICAgIC8qKlxuICAgICAqIE51bWJlciB0aGF0IHJlcHJlc2VudHMgdGhlIG9mZnNldCBpbiBwaXhlbHMgZm9yIGZpcmVkIHRhcmdldC4gYDEwMGAgdmFsdWUgbWVhbnMgdGhhdCB0aGUgZXZlbnQgd2lsbCBiZSBmaXJlZCBmb3JcbiAgICAgKiB0YXJnZXQgdGhhdCBpcyAxMDAgcGl4ZWxzIGJlbG93IHRoZSBzcHkgY29udGFpbmVyLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHRhcmdldE9mZnNldDogbnVtYmVyID0gMDtcblxuICAgIC8qKlxuICAgICAqIEV2ZW50IGZpcmVkIG9uIHRoZSBzY3JvbGwgZWxlbWVudCB3aGVuIGEgbmV3IGl0ZW0gYmVjb21lcyBhY3RpdmF0ZWQgYnkgdGhlIHNjcm9sbHNweSAuXG4gICAgICogVGhlIHJldHVybmVkIHZhbHVlIGlzIHRoZSBIVE1MRWxlbWVudCBpdHNlbGYuXG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIHJlYWRvbmx5IHNweUNoYW5nZTogRXZlbnRFbWl0dGVyPEhUTUxFbGVtZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8SFRNTEVsZW1lbnQ+KCk7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHByaXZhdGUgY3VycmVudEFjdGl2ZTogSFRNTEVsZW1lbnQ7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxSZWY6IEVsZW1lbnRSZWYpIHt9XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIEBIb3N0TGlzdGVuZXIoJ3Njcm9sbCcsIFsnJGV2ZW50J10pXG4gICAgb25TY3JvbGwoZXZlbnQ6IGFueSkge1xuICAgICAgICBsZXQgc3BpZWRUYWc6IEhUTUxFbGVtZW50O1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudC5jaGlsZHJlbjtcbiAgICAgICAgY29uc3QgdGFyZ2V0U2Nyb2xsVG9wID0gZXZlbnQudGFyZ2V0LnNjcm9sbFRvcDtcbiAgICAgICAgY29uc3QgdGFyZ2V0T2Zmc2V0VG9wID0gZXZlbnQudGFyZ2V0Lm9mZnNldFRvcCArIHRoaXMudGFyZ2V0T2Zmc2V0O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQ6IEhUTUxFbGVtZW50ID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgICBpZiAodGhpcy50cmFja2VkVGFncy5zb21lKHRhZyA9PiB0YWcudG9Mb2NhbGVVcHBlckNhc2UoKSA9PT0gZWxlbWVudC50YWdOYW1lLnRvTG9jYWxlVXBwZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKChlbGVtZW50Lm9mZnNldFRvcCAtIHRhcmdldE9mZnNldFRvcCkgPD0gdGFyZ2V0U2Nyb2xsVG9wICsgZXZlbnQudGFyZ2V0Lm9mZnNldEhlaWdodCAqIHRoaXMudGFyZ2V0UGVyY2VudCkge1xuICAgICAgICAgICAgICAgICAgICBzcGllZFRhZyA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChzcGllZFRhZyB8fCB0aGlzLmZpcmVFbXB0eSkgJiYgc3BpZWRUYWcgIT09IHRoaXMuY3VycmVudEFjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50QWN0aXZlID0gc3BpZWRUYWc7XG4gICAgICAgICAgICB0aGlzLnNweUNoYW5nZS5lbWl0KHRoaXMuY3VycmVudEFjdGl2ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiJdfQ==