/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, forwardRef, Input, Output, QueryList, TemplateRef, ViewChild, ViewChildren, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { MenuItemDirective } from '../menu/menu-item.directive';
import { MenuKeyboardService } from '../menu/menu-keyboard.service';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import focusTrap from 'focus-trap';
/**
 * Allows users to filter through results and select a value.
 *
 * Supports Angular Forms.
 * ```html
 * <fd-combobox
 *      [(ngModel)]="searchTerm"
 *      [dropdownValues]="dropdownValues"
 *      [placeholder]="'Type some text...'">
 * </fd-combobox>
 * ```
 */
var ComboboxComponent = /** @class */ (function () {
    function ComboboxComponent(elRef, menuKeyboardService) {
        this.elRef = elRef;
        this.menuKeyboardService = menuKeyboardService;
        /**
         * Values to be filtered in the search input.
         */
        this.dropdownValues = [];
        /**
         * Filter function. Accepts an array of objects and a search term as arguments
         * and returns a string. See search input examples for details.
         */
        this.filterFn = this.defaultFilter;
        /**
         * Whether the combobox is opened.
         */
        this.open = false;
        /**
         * Icon to display in the right-side button.
         */
        this.glyph = 'navigation-down-arrow';
        /**
         *  The trigger events that will open/close the options popover, by default it is click, so if user click on
         *  input field, the popover with options will open or close
         *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp).
         */
        this.triggers = ['click'];
        /**
         * Whether the combobox should close, when a click is performed outside its boundaries. True by default
         */
        this.closeOnOutsideClick = true;
        /**
         * Whether the combobox should open, when any key is pressed in input (except Escape, Space, Enter). True by default
         */
        this.openOnKeyboardEvent = true;
        /**
         * Max height of the popover. Any overflowing elements will be accessible through scrolling.
         */
        this.maxHeight = '200px';
        /**
         * Whether the search input should be displayed in compact mode.
         */
        this.compact = false;
        /**
         * Whether the matching string should be highlighted during filtration.
         */
        this.highlighting = true;
        /**
         * Whether the popover should close when a user selects a result.
         */
        this.closeOnSelect = true;
        /**
         * Whether the input field should be populated with the result picked by the user.
         */
        this.fillOnSelect = true;
        /**
         * Defines if combobox should behave same as dropdown. When it's enabled writing inside text input won't
         * trigger onChange function, until it matches one of displayed dropdown values. Also communicating with combobox
         * can be achieved only by objects with same type as dropdownValue
         */
        this.communicateByObject = false;
        /**
         * Display function. Accepts an object of the same type as the
         * items passed to dropdownValues as argument, and outputs a string.
         * An arrow function can be used to access the *this* keyword in the calling component.
         * See search input examples for details.
         */
        this.displayFn = this.defaultDisplay;
        /**
         * Event emitted when an item is clicked. Use *$event* to retrieve it.
         */
        this.itemClicked = new EventEmitter();
        /**
         * Event emitted, when the combobox's popover body is opened or closed
         */
        this.openChange = new EventEmitter();
        /**
         * @hidden
         */
        this.displayedValues = [];
        /**
         * @hidden
         */
        this.onDestroy$ = new Subject();
        /**
         * @hidden
         */
        this.onChange = (/**
         * @return {?}
         */
        function () { });
        /**
         * @hidden
         */
        this.onTouched = (/**
         * @return {?}
         */
        function () { });
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    ComboboxComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.dropdownValues) {
            this.displayedValues = this.dropdownValues;
        }
        this.setupFocusTrap();
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    ComboboxComponent.prototype.ngOnChanges = /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.dropdownValues && (changes.dropdownValues || changes.searchTerm)) {
            if (this.inputText) {
                this.displayedValues = this.filterFn(this.dropdownValues, this.inputText);
            }
            else {
                this.displayedValues = this.dropdownValues;
            }
        }
    };
    /**
     * @return {?}
     */
    ComboboxComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.onDestroy$.next();
        this.onDestroy$.complete();
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    ComboboxComponent.prototype.ngAfterViewInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        this.menuKeyboardService.itemClicked
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} index
         * @return {?}
         */
        function (index) { return _this.onMenuClickHandler(index); }));
        this.menuKeyboardService.focusEscapeBeforeList = (/**
         * @return {?}
         */
        function () { return _this.searchInputElement.nativeElement.focus(); });
        this.menuKeyboardService.focusEscapeAfterList = (/**
         * @return {?}
         */
        function () { });
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    ComboboxComponent.prototype.onInputKeydownHandler = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.code === 'Enter' && this.searchFunction) {
            this.searchFunction();
        }
        else if (event.code === 'ArrowDown') {
            event.preventDefault();
            if (this.menuItems && this.menuItems.first) {
                this.menuItems.first.focus();
            }
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    ComboboxComponent.prototype.onInputKeyupHandler = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.openOnKeyboardEvent &&
            this.inputText &&
            this.inputText.length &&
            event.code !== 'Escape' &&
            event.code !== 'Space' &&
            event.code !== 'Enter') {
            this.isOpenChangeHandle(true);
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    ComboboxComponent.prototype.onMenuKeydownHandler = /**
     * @hidden
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    function (event, index) {
        this.menuKeyboardService.keyDownHandler(event, index, this.menuItems.toArray());
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} index
     * @return {?}
     */
    ComboboxComponent.prototype.onMenuClickHandler = /**
     * @hidden
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var selectedItem = this.displayedValues[index];
        if (selectedItem) {
            this.handleClickActions(selectedItem);
            this.itemClicked.emit({ item: selectedItem, index: index });
        }
    };
    Object.defineProperty(ComboboxComponent.prototype, "inputText", {
        /** Get the input text of the input. */
        get: /**
         * Get the input text of the input.
         * @return {?}
         */
        function () {
            return this.inputTextValue;
        },
        /** Set the input text of the input. */
        set: /**
         * Set the input text of the input.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.inputTextValue = value;
            if (this.communicateByObject) {
                this.onChange(this.getOptionObjectByDisplayedValue(value));
            }
            else {
                this.onChange(value);
            }
            this.onTouched();
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden */
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    ComboboxComponent.prototype.writeValue = /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.communicateByObject) {
            this.inputTextValue = this.displayFn(value);
        }
        else {
            this.inputTextValue = value;
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    ComboboxComponent.prototype.registerOnChange = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    ComboboxComponent.prototype.registerOnTouched = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    ComboboxComponent.prototype.handleSearchTermChange = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.displayedValues = this.filterFn(this.dropdownValues, this.inputText);
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    ComboboxComponent.prototype.onPrimaryButtonClick = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.searchFunction) {
            this.searchFunction();
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} isOpen
     * @return {?}
     */
    ComboboxComponent.prototype.isOpenChangeHandle = /**
     * @hidden
     * @param {?} isOpen
     * @return {?}
     */
    function (isOpen) {
        this.open = isOpen;
        this.openChange.emit(this.open);
        this.onTouched();
        if (open) {
            this.focusTrap.activate();
        }
        else {
            this.focusTrap.deactivate();
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    ComboboxComponent.prototype.setDisabledState = /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    ComboboxComponent.prototype.defaultDisplay = /**
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str;
    };
    /**
     * @private
     * @param {?} contentArray
     * @param {?} searchTerm
     * @return {?}
     */
    ComboboxComponent.prototype.defaultFilter = /**
     * @private
     * @param {?} contentArray
     * @param {?} searchTerm
     * @return {?}
     */
    function (contentArray, searchTerm) {
        var _this = this;
        /** @type {?} */
        var searchLower = searchTerm.toLocaleLowerCase();
        return contentArray.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item) {
                return _this.displayFn(item).toLocaleLowerCase().includes(searchLower);
            }
        }));
    };
    /**
     * @private
     * @param {?} term
     * @return {?}
     */
    ComboboxComponent.prototype.handleClickActions = /**
     * @private
     * @param {?} term
     * @return {?}
     */
    function (term) {
        if (this.closeOnSelect) {
            this.isOpenChangeHandle(false);
        }
        if (this.fillOnSelect) {
            this.inputText = this.displayFn(term);
            this.handleSearchTermChange();
        }
    };
    /**
     * @private
     * @param {?} displayValue
     * @return {?}
     */
    ComboboxComponent.prototype.getOptionObjectByDisplayedValue = /**
     * @private
     * @param {?} displayValue
     * @return {?}
     */
    function (displayValue) {
        var _this = this;
        return this.dropdownValues.find((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return _this.displayFn(value) === displayValue; }));
    };
    /**
     * @private
     * @return {?}
     */
    ComboboxComponent.prototype.setupFocusTrap = /**
     * @private
     * @return {?}
     */
    function () {
        try {
            this.focusTrap = focusTrap(this.elRef.nativeElement, {
                clickOutsideDeactivates: true,
                returnFocusOnDeactivate: true,
                escapeDeactivates: false
            });
        }
        catch (e) {
            console.warn('Unsuccessful attempting to focus trap the Combobox.');
        }
    };
    ComboboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fd-combobox',
                    template: "<fd-popover [isOpen]=\"open\"\n            (isOpenChange)=\"isOpenChangeHandle($event)\"\n            [fillControlMode]=\"'at-least'\"\n            [triggers]=\"triggers\"\n            [disabled]=\"disabled\"\n            [closeOnOutsideClick]=\"closeOnOutsideClick\"\n            class=\"fd-combobox-popover-custom\"\n            [ngClass]=\"{'fd-popover-body--display-none': displayedValues && !displayedValues.length}\">\n    <fd-popover-control>\n        <div class=\"fd-combobox-control\">\n            <fd-input-group [glyph]=\"glyph\" [compact]=\"compact\" [button]=\"true\"\n                            (addOnButtonClicked)=\"onPrimaryButtonClick()\" [buttonFocusable]=\"false\">\n                <input #searchInputElement type=\"text\" class=\"fd-input\" fd-input-group-input\n                       [ngClass]=\"{'fd-input--compact': compact}\"\n                       (keydown)=\"onInputKeydownHandler($event)\"\n                       (keyup)=\"onInputKeyupHandler($event)\"\n                       [disabled]=\"disabled\"\n                       [(ngModel)]=\"inputText\"\n                       (ngModelChange)=\"handleSearchTermChange()\"\n                       placeholder=\"{{placeholder}}\">\n            </fd-input-group>\n        </div>\n    </fd-popover-control>\n    <fd-popover-body *ngIf=\"displayedValues && displayedValues.length\">\n        <fd-menu class=\"fd-combobox-input-menu-overflow\"\n                 [style.maxHeight]=\"maxHeight\">\n            <ng-content></ng-content>\n            <ul fd-menu-list>\n                <li *ngFor=\"let term of displayedValues; let index = index;\"\n                    (click)=\"onMenuClickHandler(index)\"\n                    (keydown)=\"onMenuKeydownHandler($event, index)\"\n                    fd-menu-item\n                    tabindex=\"0\">\n                    <span *ngIf=\"!itemTemplate\"\n                          [innerHTML]=\"term | displayFnPipe:displayFn | highlight:inputText:highlighting\"\n                    ></span>\n                    <ng-container *ngIf=\"itemTemplate\">\n                        <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: term}\"></ng-container>\n                    </ng-container>\n                </li>\n            </ul>\n        </fd-menu>\n    </fd-popover-body>\n</fd-popover>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ComboboxComponent; })),
                            multi: true
                        },
                        MenuKeyboardService
                    ],
                    host: {
                        '[class.fd-combobox-custom-class]': 'true',
                        '[class.fd-combobox-input]': 'true'
                    },
                    encapsulation: ViewEncapsulation.None,
                    styles: [".fd-combobox-custom-class,.fd-combobox-custom-class .fd-combobox-popover-custom{display:block}.fd-combobox-custom-class .fd-combobox-shellbar-custom{display:inline-block}.fd-combobox-input-menu-overflow{overflow:auto}"]
                }] }
    ];
    /** @nocollapse */
    ComboboxComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: MenuKeyboardService }
    ]; };
    ComboboxComponent.propDecorators = {
        dropdownValues: [{ type: Input }],
        filterFn: [{ type: Input }],
        disabled: [{ type: Input }],
        placeholder: [{ type: Input }],
        open: [{ type: Input }],
        glyph: [{ type: Input }],
        triggers: [{ type: Input }],
        closeOnOutsideClick: [{ type: Input }],
        openOnKeyboardEvent: [{ type: Input }],
        itemTemplate: [{ type: Input }],
        maxHeight: [{ type: Input }],
        searchFunction: [{ type: Input }],
        compact: [{ type: Input }],
        highlighting: [{ type: Input }],
        closeOnSelect: [{ type: Input }],
        fillOnSelect: [{ type: Input }],
        communicateByObject: [{ type: Input }],
        displayFn: [{ type: Input }],
        itemClicked: [{ type: Output }],
        openChange: [{ type: Output }],
        menuItems: [{ type: ViewChildren, args: [MenuItemDirective,] }],
        searchInputElement: [{ type: ViewChild, args: ['searchInputElement', { static: false },] }]
    };
    return ComboboxComponent;
}());
export { ComboboxComponent };
if (false) {
    /**
     * Values to be filtered in the search input.
     * @type {?}
     */
    ComboboxComponent.prototype.dropdownValues;
    /**
     * Filter function. Accepts an array of objects and a search term as arguments
     * and returns a string. See search input examples for details.
     * @type {?}
     */
    ComboboxComponent.prototype.filterFn;
    /**
     * Whether the search input is disabled. *
     * @type {?}
     */
    ComboboxComponent.prototype.disabled;
    /**
     * Placeholder of the search input. *
     * @type {?}
     */
    ComboboxComponent.prototype.placeholder;
    /**
     * Whether the combobox is opened.
     * @type {?}
     */
    ComboboxComponent.prototype.open;
    /**
     * Icon to display in the right-side button.
     * @type {?}
     */
    ComboboxComponent.prototype.glyph;
    /**
     *  The trigger events that will open/close the options popover, by default it is click, so if user click on
     *  input field, the popover with options will open or close
     *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp).
     * @type {?}
     */
    ComboboxComponent.prototype.triggers;
    /**
     * Whether the combobox should close, when a click is performed outside its boundaries. True by default
     * @type {?}
     */
    ComboboxComponent.prototype.closeOnOutsideClick;
    /**
     * Whether the combobox should open, when any key is pressed in input (except Escape, Space, Enter). True by default
     * @type {?}
     */
    ComboboxComponent.prototype.openOnKeyboardEvent;
    /**
     * The template with which to display the individual listed items.
     * Use it by passing an ng-template with implicit content. See examples for more info.
     * @type {?}
     */
    ComboboxComponent.prototype.itemTemplate;
    /**
     * Max height of the popover. Any overflowing elements will be accessible through scrolling.
     * @type {?}
     */
    ComboboxComponent.prototype.maxHeight;
    /**
     * Search function to execute when the Enter key is pressed on the main input.
     * @type {?}
     */
    ComboboxComponent.prototype.searchFunction;
    /**
     * Whether the search input should be displayed in compact mode.
     * @type {?}
     */
    ComboboxComponent.prototype.compact;
    /**
     * Whether the matching string should be highlighted during filtration.
     * @type {?}
     */
    ComboboxComponent.prototype.highlighting;
    /**
     * Whether the popover should close when a user selects a result.
     * @type {?}
     */
    ComboboxComponent.prototype.closeOnSelect;
    /**
     * Whether the input field should be populated with the result picked by the user.
     * @type {?}
     */
    ComboboxComponent.prototype.fillOnSelect;
    /**
     * Defines if combobox should behave same as dropdown. When it's enabled writing inside text input won't
     * trigger onChange function, until it matches one of displayed dropdown values. Also communicating with combobox
     * can be achieved only by objects with same type as dropdownValue
     * @type {?}
     */
    ComboboxComponent.prototype.communicateByObject;
    /**
     * Display function. Accepts an object of the same type as the
     * items passed to dropdownValues as argument, and outputs a string.
     * An arrow function can be used to access the *this* keyword in the calling component.
     * See search input examples for details.
     * @type {?}
     */
    ComboboxComponent.prototype.displayFn;
    /**
     * Event emitted when an item is clicked. Use *$event* to retrieve it.
     * @type {?}
     */
    ComboboxComponent.prototype.itemClicked;
    /**
     * Event emitted, when the combobox's popover body is opened or closed
     * @type {?}
     */
    ComboboxComponent.prototype.openChange;
    /**
     * @hidden
     * @type {?}
     */
    ComboboxComponent.prototype.menuItems;
    /**
     * @hidden
     * @type {?}
     */
    ComboboxComponent.prototype.searchInputElement;
    /**
     * @hidden
     * @type {?}
     */
    ComboboxComponent.prototype.displayedValues;
    /**
     * @hidden
     * @type {?}
     */
    ComboboxComponent.prototype.inputTextValue;
    /**
     * @hidden
     * @type {?}
     */
    ComboboxComponent.prototype.focusTrap;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    ComboboxComponent.prototype.onDestroy$;
    /**
     * @hidden
     * @type {?}
     */
    ComboboxComponent.prototype.onChange;
    /**
     * @hidden
     * @type {?}
     */
    ComboboxComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    ComboboxComponent.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    ComboboxComponent.prototype.menuKeyboardService;
}
//# sourceMappingURL=data:application/json;base64,