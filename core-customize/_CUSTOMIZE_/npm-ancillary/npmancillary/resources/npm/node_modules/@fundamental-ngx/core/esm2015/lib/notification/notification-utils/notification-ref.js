/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
/**
 * Reference to a notification component generated via the NotificationService.
 * It can be injected into the content component through the constructor.
 * For a template, it is declared as part of the implicit context, see examples.
 */
export class NotificationRef {
    constructor() {
        this._afterClosed = new Subject();
        this._afterClosedGroup = new Subject();
        /**
         * Observable that is triggered when the notification is closed.
         * On close a *result* is passed back. On dismiss, an *error* is returned instead.
         */
        this.afterClosed = this._afterClosed.asObservable();
        /**
         * Observable that is triggered when the notification is closed.
         * On close a *result* is passed back. On dismiss, an *error* is returned instead.
         */
        this.afterClosedGroup = this._afterClosedGroup.asObservable();
    }
    /**
     * Closes the notification and passes the argument to the afterClosed observable.
     * @param {?=} result Value passed back to the observable as a result.
     * @return {?}
     */
    close(result) {
        this._afterClosed.next(result);
    }
    /**
     * Dismisses the notification and passes the argument to the afterClosed observable as an error.
     * @param {?=} reason Value passed back to the observable as an error.
     * @return {?}
     */
    dismiss(reason) {
        this._afterClosed.error(reason);
    }
    /**
     * Closes the notification group and passes the argument to the afterClosed observable
     * as an error.
     * @param {?=} reason Value passed back to the observable as an error.
     * @return {?}
     */
    closeWholeGroup(reason) {
        this._afterClosedGroup.next(reason);
    }
    /**
     * Dismisses the notification group and passes the argument to the afterClosed observable
     * as an error.
     * @param {?=} reason Value passed back to the observable as an error.
     * @return {?}
     */
    dismissWholeGroup(reason) {
        this._afterClosedGroup.error(reason);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    NotificationRef.prototype._afterClosed;
    /**
     * @type {?}
     * @private
     */
    NotificationRef.prototype._afterClosedGroup;
    /**
     * Observable that is triggered when the notification is closed.
     * On close a *result* is passed back. On dismiss, an *error* is returned instead.
     * @type {?}
     */
    NotificationRef.prototype.afterClosed;
    /**
     * Observable that is triggered when the notification is closed.
     * On close a *result* is passed back. On dismiss, an *error* is returned instead.
     * @type {?}
     */
    NotificationRef.prototype.afterClosedGroup;
    /**
     * Data passed from the calling component to the content.
     * @type {?}
     */
    NotificationRef.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLXJlZi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmdW5kYW1lbnRhbC1uZ3gvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9ub3RpZmljYXRpb24vbm90aWZpY2F0aW9uLXV0aWxzL25vdGlmaWNhdGlvbi1yZWYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7OztBQU8zQyxNQUFNLE9BQU8sZUFBZTtJQUE1QjtRQUNxQixpQkFBWSxHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7UUFDbEMsc0JBQWlCLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQzs7Ozs7UUFNakQsZ0JBQVcsR0FBb0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs7Ozs7UUFNaEUscUJBQWdCLEdBQW9CLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQXNDckYsQ0FBQzs7Ozs7O0lBN0JHLEtBQUssQ0FBQyxNQUFZO1FBQ2QsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7Ozs7O0lBTUQsT0FBTyxDQUFDLE1BQVk7UUFDaEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEMsQ0FBQzs7Ozs7OztJQU9ELGVBQWUsQ0FBQyxNQUFZO1FBQ3hCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7Ozs7OztJQU9ELGlCQUFpQixDQUFDLE1BQVk7UUFDMUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6QyxDQUFDO0NBQ0o7Ozs7OztJQW5ERyx1Q0FBbUQ7Ozs7O0lBQ25ELDRDQUF3RDs7Ozs7O0lBTXhELHNDQUF1RTs7Ozs7O0lBTXZFLDJDQUFpRjs7Ozs7SUFHakYsK0JBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIFJlZmVyZW5jZSB0byBhIG5vdGlmaWNhdGlvbiBjb21wb25lbnQgZ2VuZXJhdGVkIHZpYSB0aGUgTm90aWZpY2F0aW9uU2VydmljZS5cbiAqIEl0IGNhbiBiZSBpbmplY3RlZCBpbnRvIHRoZSBjb250ZW50IGNvbXBvbmVudCB0aHJvdWdoIHRoZSBjb25zdHJ1Y3Rvci5cbiAqIEZvciBhIHRlbXBsYXRlLCBpdCBpcyBkZWNsYXJlZCBhcyBwYXJ0IG9mIHRoZSBpbXBsaWNpdCBjb250ZXh0LCBzZWUgZXhhbXBsZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25SZWYge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2FmdGVyQ2xvc2VkID0gbmV3IFN1YmplY3Q8YW55PigpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2FmdGVyQ2xvc2VkR3JvdXAgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG5cbiAgICAvKipcbiAgICAgKiBPYnNlcnZhYmxlIHRoYXQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIG5vdGlmaWNhdGlvbiBpcyBjbG9zZWQuXG4gICAgICogT24gY2xvc2UgYSAqcmVzdWx0KiBpcyBwYXNzZWQgYmFjay4gT24gZGlzbWlzcywgYW4gKmVycm9yKiBpcyByZXR1cm5lZCBpbnN0ZWFkLlxuICAgICAqL1xuICAgIHB1YmxpYyBhZnRlckNsb3NlZDogT2JzZXJ2YWJsZTxhbnk+ID0gdGhpcy5fYWZ0ZXJDbG9zZWQuYXNPYnNlcnZhYmxlKCk7XG5cbiAgICAvKipcbiAgICAgKiBPYnNlcnZhYmxlIHRoYXQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIG5vdGlmaWNhdGlvbiBpcyBjbG9zZWQuXG4gICAgICogT24gY2xvc2UgYSAqcmVzdWx0KiBpcyBwYXNzZWQgYmFjay4gT24gZGlzbWlzcywgYW4gKmVycm9yKiBpcyByZXR1cm5lZCBpbnN0ZWFkLlxuICAgICAqL1xuICAgIHB1YmxpYyBhZnRlckNsb3NlZEdyb3VwOiBPYnNlcnZhYmxlPGFueT4gPSB0aGlzLl9hZnRlckNsb3NlZEdyb3VwLmFzT2JzZXJ2YWJsZSgpO1xuXG4gICAgLyoqIERhdGEgcGFzc2VkIGZyb20gdGhlIGNhbGxpbmcgY29tcG9uZW50IHRvIHRoZSBjb250ZW50LiovXG4gICAgcHVibGljIGRhdGE6IGFueTtcblxuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgbm90aWZpY2F0aW9uIGFuZCBwYXNzZXMgdGhlIGFyZ3VtZW50IHRvIHRoZSBhZnRlckNsb3NlZCBvYnNlcnZhYmxlLlxuICAgICAqIEBwYXJhbSByZXN1bHQgVmFsdWUgcGFzc2VkIGJhY2sgdG8gdGhlIG9ic2VydmFibGUgYXMgYSByZXN1bHQuXG4gICAgICovXG4gICAgY2xvc2UocmVzdWx0PzogYW55KTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2FmdGVyQ2xvc2VkLm5leHQocmVzdWx0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNtaXNzZXMgdGhlIG5vdGlmaWNhdGlvbiBhbmQgcGFzc2VzIHRoZSBhcmd1bWVudCB0byB0aGUgYWZ0ZXJDbG9zZWQgb2JzZXJ2YWJsZSBhcyBhbiBlcnJvci5cbiAgICAgKiBAcGFyYW0gcmVhc29uIFZhbHVlIHBhc3NlZCBiYWNrIHRvIHRoZSBvYnNlcnZhYmxlIGFzIGFuIGVycm9yLlxuICAgICAqL1xuICAgIGRpc21pc3MocmVhc29uPzogYW55KTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2FmdGVyQ2xvc2VkLmVycm9yKHJlYXNvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBub3RpZmljYXRpb24gZ3JvdXAgYW5kIHBhc3NlcyB0aGUgYXJndW1lbnQgdG8gdGhlIGFmdGVyQ2xvc2VkIG9ic2VydmFibGVcbiAgICAgKiBhcyBhbiBlcnJvci5cbiAgICAgKiBAcGFyYW0gcmVhc29uIFZhbHVlIHBhc3NlZCBiYWNrIHRvIHRoZSBvYnNlcnZhYmxlIGFzIGFuIGVycm9yLlxuICAgICAqL1xuICAgIGNsb3NlV2hvbGVHcm91cChyZWFzb24/OiBhbnkpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fYWZ0ZXJDbG9zZWRHcm91cC5uZXh0KHJlYXNvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzbWlzc2VzIHRoZSBub3RpZmljYXRpb24gZ3JvdXAgYW5kIHBhc3NlcyB0aGUgYXJndW1lbnQgdG8gdGhlIGFmdGVyQ2xvc2VkIG9ic2VydmFibGVcbiAgICAgKiBhcyBhbiBlcnJvci5cbiAgICAgKiBAcGFyYW0gcmVhc29uIFZhbHVlIHBhc3NlZCBiYWNrIHRvIHRoZSBvYnNlcnZhYmxlIGFzIGFuIGVycm9yLlxuICAgICAqL1xuICAgIGRpc21pc3NXaG9sZUdyb3VwKHJlYXNvbj86IGFueSk6IHZvaWQge1xuICAgICAgICB0aGlzLl9hZnRlckNsb3NlZEdyb3VwLmVycm9yKHJlYXNvbik7XG4gICAgfVxufVxuIl19