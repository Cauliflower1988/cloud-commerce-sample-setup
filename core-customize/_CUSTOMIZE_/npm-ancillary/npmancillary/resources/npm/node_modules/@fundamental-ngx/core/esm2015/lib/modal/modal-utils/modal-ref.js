/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
/**
 * Reference to a modal component generated via the ModalService.
 * It can be injected into the content component through the constructor.
 * For a template, it is declared as part of the implicit context, see examples.
 */
export class ModalRef {
    constructor() {
        this._afterClosed = new Subject();
        /**
         * Observable that is triggered when the modal is closed.
         * On close a *result* is passed back. On dismiss, an *error* is returned instead.
         */
        this.afterClosed = this._afterClosed.asObservable();
    }
    /**
     * Closes the modal and passes the argument to the afterClosed observable.
     * @param {?=} result Value passed back to the observable as a result.
     * @return {?}
     */
    close(result) {
        this._afterClosed.next(result);
        this._afterClosed.complete();
    }
    /**
     * Dismisses the modal and passes the argument to the afterClosed observable as an error.
     * @param {?=} reason Value passed back to the observable as an error.
     * @return {?}
     */
    dismiss(reason) {
        this._afterClosed.error(reason);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ModalRef.prototype._afterClosed;
    /**
     * Observable that is triggered when the modal is closed.
     * On close a *result* is passed back. On dismiss, an *error* is returned instead.
     * @type {?}
     */
    ModalRef.prototype.afterClosed;
    /**
     * Data passed from the calling component to the content.
     * @type {?}
     */
    ModalRef.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtcmVmLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL21vZGFsL21vZGFsLXV0aWxzL21vZGFsLXJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7Ozs7O0FBTzNDLE1BQU0sT0FBTyxRQUFRO0lBQXJCO1FBQ3FCLGlCQUFZLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQzs7Ozs7UUFNNUMsZ0JBQVcsR0FBb0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQXFCM0UsQ0FBQzs7Ozs7O0lBWkcsS0FBSyxDQUFDLE1BQVk7UUFDZCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pDLENBQUM7Ozs7OztJQU1ELE9BQU8sQ0FBQyxNQUFZO1FBQ2hCLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Q0FDSjs7Ozs7O0lBM0JHLGdDQUFtRDs7Ozs7O0lBTW5ELCtCQUF1RTs7Ozs7SUFHdkUsd0JBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIFJlZmVyZW5jZSB0byBhIG1vZGFsIGNvbXBvbmVudCBnZW5lcmF0ZWQgdmlhIHRoZSBNb2RhbFNlcnZpY2UuXG4gKiBJdCBjYW4gYmUgaW5qZWN0ZWQgaW50byB0aGUgY29udGVudCBjb21wb25lbnQgdGhyb3VnaCB0aGUgY29uc3RydWN0b3IuXG4gKiBGb3IgYSB0ZW1wbGF0ZSwgaXQgaXMgZGVjbGFyZWQgYXMgcGFydCBvZiB0aGUgaW1wbGljaXQgY29udGV4dCwgc2VlIGV4YW1wbGVzLlxuICovXG5leHBvcnQgY2xhc3MgTW9kYWxSZWYge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2FmdGVyQ2xvc2VkID0gbmV3IFN1YmplY3Q8YW55PigpO1xuXG4gICAgLyoqXG4gICAgICogT2JzZXJ2YWJsZSB0aGF0IGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBtb2RhbCBpcyBjbG9zZWQuXG4gICAgICogT24gY2xvc2UgYSAqcmVzdWx0KiBpcyBwYXNzZWQgYmFjay4gT24gZGlzbWlzcywgYW4gKmVycm9yKiBpcyByZXR1cm5lZCBpbnN0ZWFkLlxuICAgICAqL1xuICAgIHB1YmxpYyBhZnRlckNsb3NlZDogT2JzZXJ2YWJsZTxhbnk+ID0gdGhpcy5fYWZ0ZXJDbG9zZWQuYXNPYnNlcnZhYmxlKCk7XG5cbiAgICAvKiogRGF0YSBwYXNzZWQgZnJvbSB0aGUgY2FsbGluZyBjb21wb25lbnQgdG8gdGhlIGNvbnRlbnQuKi9cbiAgICBwdWJsaWMgZGF0YTogYW55O1xuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBtb2RhbCBhbmQgcGFzc2VzIHRoZSBhcmd1bWVudCB0byB0aGUgYWZ0ZXJDbG9zZWQgb2JzZXJ2YWJsZS5cbiAgICAgKiBAcGFyYW0gcmVzdWx0IFZhbHVlIHBhc3NlZCBiYWNrIHRvIHRoZSBvYnNlcnZhYmxlIGFzIGEgcmVzdWx0LlxuICAgICAqL1xuICAgIGNsb3NlKHJlc3VsdD86IGFueSk6IHZvaWQge1xuICAgICAgICB0aGlzLl9hZnRlckNsb3NlZC5uZXh0KHJlc3VsdCk7XG4gICAgICAgIHRoaXMuX2FmdGVyQ2xvc2VkLmNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzbWlzc2VzIHRoZSBtb2RhbCBhbmQgcGFzc2VzIHRoZSBhcmd1bWVudCB0byB0aGUgYWZ0ZXJDbG9zZWQgb2JzZXJ2YWJsZSBhcyBhbiBlcnJvci5cbiAgICAgKiBAcGFyYW0gcmVhc29uIFZhbHVlIHBhc3NlZCBiYWNrIHRvIHRoZSBvYnNlcnZhYmxlIGFzIGFuIGVycm9yLlxuICAgICAqL1xuICAgIGRpc21pc3MocmVhc29uPzogYW55KTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2FmdGVyQ2xvc2VkLmVycm9yKHJlYXNvbik7XG4gICAgfVxufVxuIl19