/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, HostListener, Output, TemplateRef, ViewChild, ViewContainerRef, ViewEncapsulation } from '@angular/core';
import focusTrap from 'focus-trap';
/**
 * Not intended for external use.
 */
var PopoverContainer = /** @class */ (function () {
    function PopoverContainer(elRef, cdRef) {
        this.elRef = elRef;
        this.cdRef = cdRef;
        this.noArrow = true;
        this.isSetup = new EventEmitter();
    }
    /**
     * @return {?}
     */
    PopoverContainer.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.content instanceof TemplateRef) {
            this.loadFromTemplate(this.content);
        }
        else {
            this.contentString = this.content;
        }
        this.setupFocusTrap();
        this.isSetup.emit();
        this.cdRef.detectChanges();
    };
    /**
     * @return {?}
     */
    PopoverContainer.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.focusTrap) {
            this.focusTrap.deactivate();
        }
    };
    /**
     * @private
     * @param {?} content
     * @return {?}
     */
    PopoverContainer.prototype.loadFromTemplate = /**
     * @private
     * @param {?} content
     * @return {?}
     */
    function (content) {
        this.containerRef.clear();
        /** @type {?} */
        var context = {
            $implicit: this.context
        };
        this.componentRef = this.containerRef.createEmbeddedView(content, context);
    };
    /**
     * @private
     * @return {?}
     */
    PopoverContainer.prototype.setupFocusTrap = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.focusTrapped) {
            try {
                this.focusTrap = focusTrap(this.elRef.nativeElement, {
                    clickOutsideDeactivates: true,
                    escapeDeactivates: false,
                    initialFocus: this.elRef.nativeElement
                });
                this.focusTrap.activate();
            }
            catch (e) {
                console.warn('Attempted to focus trap the popover, but no tabbable elements were found.');
            }
        }
    };
    /**
     * @return {?}
     */
    PopoverContainer.prototype.escapeHandler = /**
     * @return {?}
     */
    function () {
        if (this.containerRef && this.context.isOpen && this.closeOnEscapeKey) {
            this.context.close();
        }
    };
    PopoverContainer.decorators = [
        { type: Component, args: [{
                    selector: 'fd-popover-container',
                    template: "\n        <span class=\"fd-popover__arrow\" x-arrow></span>\n        <ng-container #vc>\n            {{contentString}}\n        </ng-container>\n    ",
                    host: {
                        class: 'fd-popover__popper fd-popover-container-custom',
                        'tabindex': '-1'
                    },
                    encapsulation: ViewEncapsulation.None,
                    styles: [".fd-popover-container-custom{z-index:1000;transition:none;background-color:#fff}.fd-popover-container-custom:focus{outline:0}"]
                }] }
    ];
    /** @nocollapse */
    PopoverContainer.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    PopoverContainer.propDecorators = {
        containerRef: [{ type: ViewChild, args: ['vc', { read: ViewContainerRef, static: false },] }],
        noArrow: [{ type: HostBinding, args: ['class.fd-popover__popper--no-arrow',] }],
        isSetup: [{ type: Output }],
        escapeHandler: [{ type: HostListener, args: ['keydown.escape',] }]
    };
    return PopoverContainer;
}());
export { PopoverContainer };
if (false) {
    /** @type {?} */
    PopoverContainer.prototype.containerRef;
    /** @type {?} */
    PopoverContainer.prototype.noArrow;
    /** @type {?} */
    PopoverContainer.prototype.isSetup;
    /** @type {?} */
    PopoverContainer.prototype.content;
    /** @type {?} */
    PopoverContainer.prototype.contentString;
    /** @type {?} */
    PopoverContainer.prototype.context;
    /** @type {?} */
    PopoverContainer.prototype.placement;
    /** @type {?} */
    PopoverContainer.prototype.focusTrapped;
    /** @type {?} */
    PopoverContainer.prototype.closeOnEscapeKey;
    /**
     * @type {?}
     * @private
     */
    PopoverContainer.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    PopoverContainer.prototype.focusTrap;
    /**
     * @type {?}
     * @private
     */
    PopoverContainer.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    PopoverContainer.prototype.cdRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1jb250YWluZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZnVuZGFtZW50YWwtbmd4L2NvcmUvIiwic291cmNlcyI6WyJsaWIvcG9wb3Zlci9wb3BvdmVyLWRpcmVjdGl2ZS9wb3BvdmVyLWNvbnRhaW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUVILGlCQUFpQixFQUNqQixTQUFTLEVBQUUsVUFBVSxFQUNyQixZQUFZLEVBQUUsV0FBVyxFQUN6QixZQUFZLEVBQ1osTUFBTSxFQUNOLFdBQVcsRUFDWCxTQUFTLEVBQ1QsZ0JBQWdCLEVBQ2hCLGlCQUFpQixFQUNwQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLFNBQVMsTUFBTSxZQUFZLENBQUM7Ozs7QUFLbkM7SUF5Q0ksMEJBQW9CLEtBQWlCLEVBQ2pCLEtBQXdCO1FBRHhCLFVBQUssR0FBTCxLQUFLLENBQVk7UUFDakIsVUFBSyxHQUFMLEtBQUssQ0FBbUI7UUFyQjVDLFlBQU8sR0FBWSxJQUFJLENBQUM7UUFHeEIsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFhLENBQUM7SUFtQnhDLENBQUM7Ozs7SUFFRCwwQ0FBZTs7O0lBQWY7UUFDSSxJQUFJLElBQUksQ0FBQyxPQUFPLFlBQVksV0FBVyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDdkM7YUFBTTtZQUNILElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUNyQztRQUNELElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7OztJQUVELHNDQUFXOzs7SUFBWDtRQUNJLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQy9CO0lBQ0wsQ0FBQzs7Ozs7O0lBRU8sMkNBQWdCOzs7OztJQUF4QixVQUF5QixPQUF5QjtRQUM5QyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDOztZQUNwQixPQUFPLEdBQUc7WUFDWixTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU87U0FDMUI7UUFDRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9FLENBQUM7Ozs7O0lBRU8seUNBQWM7Ozs7SUFBdEI7UUFDSSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbkIsSUFBSTtnQkFDQSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRTtvQkFDakQsdUJBQXVCLEVBQUUsSUFBSTtvQkFDN0IsaUJBQWlCLEVBQUUsS0FBSztvQkFDeEIsWUFBWSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYTtpQkFDekMsQ0FBQyxDQUFDO2dCQUNILElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDN0I7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDUixPQUFPLENBQUMsSUFBSSxDQUFDLDJFQUEyRSxDQUFDLENBQUM7YUFDN0Y7U0FDSjtJQUNMLENBQUM7Ozs7SUFHRCx3Q0FBYTs7O0lBRGI7UUFFSSxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ25FLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDeEI7SUFDTCxDQUFDOztnQkExRkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxzQkFBc0I7b0JBQ2hDLFFBQVEsRUFBRSx1SkFLVDtvQkFFRCxJQUFJLEVBQUU7d0JBQ0YsS0FBSyxFQUFFLGdEQUFnRDt3QkFDdkQsVUFBVSxFQUFFLElBQUk7cUJBQ25CO29CQUNELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOztpQkFDeEM7Ozs7Z0JBNUJjLFVBQVU7Z0JBRHJCLGlCQUFpQjs7OytCQWdDaEIsU0FBUyxTQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFOzBCQUd6RCxXQUFXLFNBQUMsb0NBQW9DOzBCQUdoRCxNQUFNO2dDQThETixZQUFZLFNBQUMsZ0JBQWdCOztJQU1sQyx1QkFBQztDQUFBLEFBM0ZELElBMkZDO1NBNUVZLGdCQUFnQjs7O0lBRXpCLHdDQUMrQjs7SUFFL0IsbUNBQ3dCOztJQUV4QixtQ0FDd0M7O0lBRXhDLG1DQUFtQzs7SUFFbkMseUNBQXNCOztJQUV0QixtQ0FBYTs7SUFFYixxQ0FBa0I7O0lBRWxCLHdDQUFzQjs7SUFFdEIsNENBQTBCOzs7OztJQUUxQix3Q0FBMkM7Ozs7O0lBQzNDLHFDQUF1Qjs7Ozs7SUFFWCxpQ0FBeUI7Ozs7O0lBQ3pCLGlDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQWZ0ZXJWaWV3SW5pdCxcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEVtYmVkZGVkVmlld1JlZixcbiAgICBFdmVudEVtaXR0ZXIsIEhvc3RCaW5kaW5nLFxuICAgIEhvc3RMaXN0ZW5lciwgT25EZXN0cm95LFxuICAgIE91dHB1dCxcbiAgICBUZW1wbGF0ZVJlZixcbiAgICBWaWV3Q2hpbGQsXG4gICAgVmlld0NvbnRhaW5lclJlZixcbiAgICBWaWV3RW5jYXBzdWxhdGlvblxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBmb2N1c1RyYXAgZnJvbSAnZm9jdXMtdHJhcCc7XG5cbi8qKlxuICogTm90IGludGVuZGVkIGZvciBleHRlcm5hbCB1c2UuXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnZmQtcG9wb3Zlci1jb250YWluZXInLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxzcGFuIGNsYXNzPVwiZmQtcG9wb3Zlcl9fYXJyb3dcIiB4LWFycm93Pjwvc3Bhbj5cbiAgICAgICAgPG5nLWNvbnRhaW5lciAjdmM+XG4gICAgICAgICAgICB7e2NvbnRlbnRTdHJpbmd9fVxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICBgLFxuICAgIHN0eWxlVXJsczogWycuL3BvcG92ZXItY29udGFpbmVyLnNjc3MnXSxcbiAgICBob3N0OiB7XG4gICAgICAgIGNsYXNzOiAnZmQtcG9wb3Zlcl9fcG9wcGVyIGZkLXBvcG92ZXItY29udGFpbmVyLWN1c3RvbScsXG4gICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICB9LFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgUG9wb3ZlckNvbnRhaW5lciBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG5cbiAgICBAVmlld0NoaWxkKCd2YycsIHsgcmVhZDogVmlld0NvbnRhaW5lclJlZiwgc3RhdGljOiBmYWxzZSB9KVxuICAgIGNvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZjtcblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmQtcG9wb3Zlcl9fcG9wcGVyLS1uby1hcnJvdycpXG4gICAgbm9BcnJvdzogYm9vbGVhbiA9IHRydWU7XG5cbiAgICBAT3V0cHV0KClcbiAgICBpc1NldHVwID0gbmV3IEV2ZW50RW1pdHRlcjx1bmRlZmluZWQ+KCk7XG5cbiAgICBjb250ZW50OiBUZW1wbGF0ZVJlZjxhbnk+IHwgc3RyaW5nO1xuXG4gICAgY29udGVudFN0cmluZzogc3RyaW5nO1xuXG4gICAgY29udGV4dDogYW55O1xuXG4gICAgcGxhY2VtZW50OiBzdHJpbmc7XG5cbiAgICBmb2N1c1RyYXBwZWQ6IGJvb2xlYW47XG5cbiAgICBjbG9zZU9uRXNjYXBlS2V5OiBib29sZWFuO1xuXG4gICAgcHJpdmF0ZSBjb21wb25lbnRSZWY6IEVtYmVkZGVkVmlld1JlZjxhbnk+O1xuICAgIHByaXZhdGUgZm9jdXNUcmFwOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsUmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgY2RSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5jb250ZW50IGluc3RhbmNlb2YgVGVtcGxhdGVSZWYpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZEZyb21UZW1wbGF0ZSh0aGlzLmNvbnRlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50U3RyaW5nID0gdGhpcy5jb250ZW50O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0dXBGb2N1c1RyYXAoKTtcbiAgICAgICAgdGhpcy5pc1NldHVwLmVtaXQoKTtcbiAgICAgICAgdGhpcy5jZFJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmZvY3VzVHJhcCkge1xuICAgICAgICAgICAgdGhpcy5mb2N1c1RyYXAuZGVhY3RpdmF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsb2FkRnJvbVRlbXBsYXRlKGNvbnRlbnQ6IFRlbXBsYXRlUmVmPGFueT4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jb250YWluZXJSZWYuY2xlYXIoKTtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgICAgICAgICRpbXBsaWNpdDogdGhpcy5jb250ZXh0XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY29tcG9uZW50UmVmID0gdGhpcy5jb250YWluZXJSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KGNvbnRlbnQsIGNvbnRleHQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0dXBGb2N1c1RyYXAoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmZvY3VzVHJhcHBlZCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzVHJhcCA9IGZvY3VzVHJhcCh0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2tPdXRzaWRlRGVhY3RpdmF0ZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGVzY2FwZURlYWN0aXZhdGVzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbEZvY3VzOiB0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzVHJhcC5hY3RpdmF0ZSgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignQXR0ZW1wdGVkIHRvIGZvY3VzIHRyYXAgdGhlIHBvcG92ZXIsIGJ1dCBubyB0YWJiYWJsZSBlbGVtZW50cyB3ZXJlIGZvdW5kLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5lc2NhcGUnKVxuICAgIGVzY2FwZUhhbmRsZXIoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRhaW5lclJlZiAmJiB0aGlzLmNvbnRleHQuaXNPcGVuICYmIHRoaXMuY2xvc2VPbkVzY2FwZUtleSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=