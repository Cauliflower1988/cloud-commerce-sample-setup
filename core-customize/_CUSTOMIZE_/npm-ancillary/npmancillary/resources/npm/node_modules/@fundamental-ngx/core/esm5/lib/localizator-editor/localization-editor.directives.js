/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { InputGroupInputDirective } from '../input-group/input-group-directives';
/**
 * Directive which is used along with input elements, inside the localization editor item or main.
 *  ```html
 *  <fd-localization-editor-item>
 *      <input fd-localization-editor-input type="text" placeholder="EN">
 *  </fd-localization-editor-item>
 *  ```
 */
var LocalizationEditorInputDirective = /** @class */ (function () {
    function LocalizationEditorInputDirective() {
        /**
         * @hidden
         */
        this.inputGroupDirective = new InputGroupInputDirective();
    }
    LocalizationEditorInputDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[fd-localization-editor-input]'
                },] }
    ];
    LocalizationEditorInputDirective.propDecorators = {
        inputGroupDirective: [{ type: HostBinding, args: ['attr.fd-input-group-input',] }],
        compact: [{ type: HostBinding, args: ['class.fd-input--compact',] }]
    };
    return LocalizationEditorInputDirective;
}());
export { LocalizationEditorInputDirective };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    LocalizationEditorInputDirective.prototype.inputGroupDirective;
    /**
     * @hidden
     *  Variable is controlled by parent component and define if there should be used compact mode
     *
     * @type {?}
     */
    LocalizationEditorInputDirective.prototype.compact;
}
/**
 * Directive which is used along with textarea elements, inside the localization editor item or main.
 *  ```html
 *  <fd-localization-editor-item>
 *      <textarea fd-localization-editor-input placeholder="EN">
 *  </fd-localization-editor-item>
 *  ```
 */
var LocalizationEditorTextareaDirective = /** @class */ (function () {
    function LocalizationEditorTextareaDirective() {
        /**
         * @hidden
         */
        this.inputGroupDirective = new InputGroupInputDirective();
        /**
         * @hidden
         */
        this.fdLocalizationEditorTextareaClass = true;
    }
    LocalizationEditorTextareaDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[fd-localization-editor-textarea]',
                },] }
    ];
    LocalizationEditorTextareaDirective.propDecorators = {
        inputGroupDirective: [{ type: HostBinding, args: ['attr.fd-input-group-input',] }],
        compact: [{ type: HostBinding, args: ['class.fd-input--compact',] }],
        fdLocalizationEditorTextareaClass: [{ type: HostBinding, args: ['class.fd-localization-editor-textarea',] }]
    };
    return LocalizationEditorTextareaDirective;
}());
export { LocalizationEditorTextareaDirective };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    LocalizationEditorTextareaDirective.prototype.inputGroupDirective;
    /**
     * @hidden
     *  Variable is controlled by parent component and define if there should be used compact mode
     *
     * @type {?}
     */
    LocalizationEditorTextareaDirective.prototype.compact;
    /**
     * @hidden
     * @type {?}
     */
    LocalizationEditorTextareaDirective.prototype.fdLocalizationEditorTextareaClass;
}
/**
 * Directive which is used to add complex content, which will be displayed in the add-on space.
 *  ```html
 *  <fd-localization-editor-item>
 *      <ng-template fd-localization-editor-label>
 *          <fd-icon [glyph]="field.glyph"></fd-icon>
 *      </ng-template>
 *      <textarea fd-localization-editor-input placeholder="EN">
 *  </fd-localization-editor-item>
 *  ```
 *
 */
var LocalizationEditorLabel = /** @class */ (function () {
    function LocalizationEditorLabel() {
    }
    LocalizationEditorLabel.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[fd-localization-editor-label]',
                },] }
    ];
    return LocalizationEditorLabel;
}());
export { LocalizationEditorLabel };
/**
 * Directive that is used to wrap whole localization field inside li element.
 *  ```html
 *  <li fd-localization-editor-element>
 *      <fd-localization-editor-item>
 *          <textarea fd-localization-editor-input placeholder="EN">
 *      </fd-localization-editor-item>
 *  </li>
 *  ```
 *
 */
var LocalizationEditorElement = /** @class */ (function () {
    function LocalizationEditorElement() {
    }
    LocalizationEditorElement.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[fd-localization-editor-element]',
                },] }
    ];
    return LocalizationEditorElement;
}());
export { LocalizationEditorElement };
/**
 * Not for external use. Portal to render the complex title template.
 */
var LocalizationEditorLoadLabel = /** @class */ (function () {
    /** @hidden */
    function LocalizationEditorLoadLabel(viewRef) {
        this.viewRef = viewRef;
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    LocalizationEditorLoadLabel.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.viewRef.clear();
        this.contentRef = this.viewRef.createEmbeddedView(this.content);
    };
    LocalizationEditorLoadLabel.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[fd-localization-editor-load-label]'
                },] }
    ];
    /** @nocollapse */
    LocalizationEditorLoadLabel.ctorParameters = function () { return [
        { type: ViewContainerRef }
    ]; };
    LocalizationEditorLoadLabel.propDecorators = {
        content: [{ type: Input, args: ['fd-localization-editor-load-label',] }]
    };
    return LocalizationEditorLoadLabel;
}());
export { LocalizationEditorLoadLabel };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    LocalizationEditorLoadLabel.prototype.content;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    LocalizationEditorLoadLabel.prototype.contentRef;
    /**
     * @type {?}
     * @private
     */
    LocalizationEditorLoadLabel.prototype.viewRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxpemF0aW9uLWVkaXRvci5kaXJlY3RpdmVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL2xvY2FsaXphdG9yLWVkaXRvci9sb2NhbGl6YXRpb24tZWRpdG9yLmRpcmVjdGl2ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQW1CLFdBQVcsRUFBRSxLQUFLLEVBQVUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RILE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDOzs7Ozs7Ozs7QUFVakY7SUFBQTs7OztRQVFJLHdCQUFtQixHQUE2QixJQUFJLHdCQUF3QixFQUFFLENBQUM7SUFRbkYsQ0FBQzs7Z0JBaEJBLFNBQVMsU0FBQzs7b0JBRVAsUUFBUSxFQUFFLGdDQUFnQztpQkFDN0M7OztzQ0FJSSxXQUFXLFNBQUMsMkJBQTJCOzBCQU92QyxXQUFXLFNBQUMseUJBQXlCOztJQUUxQyx1Q0FBQztDQUFBLEFBaEJELElBZ0JDO1NBWlksZ0NBQWdDOzs7Ozs7SUFHekMsK0RBQytFOzs7Ozs7O0lBTS9FLG1EQUN3Qjs7Ozs7Ozs7OztBQVc1QjtJQUFBOzs7O1FBUUksd0JBQW1CLEdBQTZCLElBQUksd0JBQXdCLEVBQUUsQ0FBQzs7OztRQWF4RSxzQ0FBaUMsR0FBWSxJQUFJLENBQUM7SUFDN0QsQ0FBQzs7Z0JBdEJBLFNBQVMsU0FBQzs7b0JBRVAsUUFBUSxFQUFFLG1DQUFtQztpQkFDaEQ7OztzQ0FJSSxXQUFXLFNBQUMsMkJBQTJCOzBCQU92QyxXQUFXLFNBQUMseUJBQXlCO29EQU1yQyxXQUFXLFNBQUMsdUNBQXVDOztJQUV4RCwwQ0FBQztDQUFBLEFBdEJELElBc0JDO1NBbEJZLG1DQUFtQzs7Ozs7O0lBRzVDLGtFQUMrRTs7Ozs7OztJQU0vRSxzREFDd0I7Ozs7O0lBS3hCLGdGQUN5RDs7Ozs7Ozs7Ozs7Ozs7QUFjN0Q7SUFBQTtJQUlzQyxDQUFDOztnQkFKdEMsU0FBUyxTQUFDOztvQkFFUCxRQUFRLEVBQUUsZ0NBQWdDO2lCQUM3Qzs7SUFDcUMsOEJBQUM7Q0FBQSxBQUp2QyxJQUl1QztTQUExQix1QkFBdUI7Ozs7Ozs7Ozs7OztBQVlwQztJQUFBO0lBSXdDLENBQUM7O2dCQUp4QyxTQUFTLFNBQUM7O29CQUVQLFFBQVEsRUFBRSxrQ0FBa0M7aUJBQy9DOztJQUN1QyxnQ0FBQztDQUFBLEFBSnpDLElBSXlDO1NBQTVCLHlCQUF5Qjs7OztBQUt0QztJQVlJLGNBQWM7SUFDZCxxQ0FBb0IsT0FBeUI7UUFBekIsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7SUFBRyxDQUFDO0lBRWpELGNBQWM7Ozs7O0lBQ2QsOENBQVE7Ozs7SUFBUjtRQUNJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwRSxDQUFDOztnQkFuQkosU0FBUyxTQUFDOztvQkFFUCxRQUFRLEVBQUUscUNBQXFDO2lCQUNsRDs7OztnQkFwRzZFLGdCQUFnQjs7OzBCQXVHekYsS0FBSyxTQUFDLG1DQUFtQzs7SUFjOUMsa0NBQUM7Q0FBQSxBQXBCRCxJQW9CQztTQWhCWSwyQkFBMkI7Ozs7OztJQUVwQyw4Q0FDMEI7Ozs7OztJQUcxQixpREFBeUM7Ozs7O0lBRzdCLDhDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRW1iZWRkZWRWaWV3UmVmLCBIb3N0QmluZGluZywgSW5wdXQsIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElucHV0R3JvdXBJbnB1dERpcmVjdGl2ZSB9IGZyb20gJy4uL2lucHV0LWdyb3VwL2lucHV0LWdyb3VwLWRpcmVjdGl2ZXMnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSB3aGljaCBpcyB1c2VkIGFsb25nIHdpdGggaW5wdXQgZWxlbWVudHMsIGluc2lkZSB0aGUgbG9jYWxpemF0aW9uIGVkaXRvciBpdGVtIG9yIG1haW4uXG4gKiAgYGBgaHRtbFxuICogIDxmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWl0ZW0+XG4gKiAgICAgIDxpbnB1dCBmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJFTlwiPlxuICogIDwvZmQtbG9jYWxpemF0aW9uLWVkaXRvci1pdGVtPlxuICogIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdbZmQtbG9jYWxpemF0aW9uLWVkaXRvci1pbnB1dF0nXG59KVxuZXhwb3J0IGNsYXNzIExvY2FsaXphdGlvbkVkaXRvcklucHV0RGlyZWN0aXZlIHtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmZkLWlucHV0LWdyb3VwLWlucHV0JylcbiAgICBpbnB1dEdyb3VwRGlyZWN0aXZlOiBJbnB1dEdyb3VwSW5wdXREaXJlY3RpdmUgPSBuZXcgSW5wdXRHcm91cElucHV0RGlyZWN0aXZlKCk7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogIFZhcmlhYmxlIGlzIGNvbnRyb2xsZWQgYnkgcGFyZW50IGNvbXBvbmVudCBhbmQgZGVmaW5lIGlmIHRoZXJlIHNob3VsZCBiZSB1c2VkIGNvbXBhY3QgbW9kZVxuICAgICAqICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mZC1pbnB1dC0tY29tcGFjdCcpXG4gICAgcHVibGljIGNvbXBhY3Q6IGJvb2xlYW47XG59XG5cbi8qKlxuICogRGlyZWN0aXZlIHdoaWNoIGlzIHVzZWQgYWxvbmcgd2l0aCB0ZXh0YXJlYSBlbGVtZW50cywgaW5zaWRlIHRoZSBsb2NhbGl6YXRpb24gZWRpdG9yIGl0ZW0gb3IgbWFpbi5cbiAqICBgYGBodG1sXG4gKiAgPGZkLWxvY2FsaXphdGlvbi1lZGl0b3ItaXRlbT5cbiAqICAgICAgPHRleHRhcmVhIGZkLWxvY2FsaXphdGlvbi1lZGl0b3ItaW5wdXQgcGxhY2Vob2xkZXI9XCJFTlwiPlxuICogIDwvZmQtbG9jYWxpemF0aW9uLWVkaXRvci1pdGVtPlxuICogIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdbZmQtbG9jYWxpemF0aW9uLWVkaXRvci10ZXh0YXJlYV0nLFxufSlcbmV4cG9ydCBjbGFzcyBMb2NhbGl6YXRpb25FZGl0b3JUZXh0YXJlYURpcmVjdGl2ZSB7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIEBIb3N0QmluZGluZygnYXR0ci5mZC1pbnB1dC1ncm91cC1pbnB1dCcpXG4gICAgaW5wdXRHcm91cERpcmVjdGl2ZTogSW5wdXRHcm91cElucHV0RGlyZWN0aXZlID0gbmV3IElucHV0R3JvdXBJbnB1dERpcmVjdGl2ZSgpO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqICBWYXJpYWJsZSBpcyBjb250cm9sbGVkIGJ5IHBhcmVudCBjb21wb25lbnQgYW5kIGRlZmluZSBpZiB0aGVyZSBzaG91bGQgYmUgdXNlZCBjb21wYWN0IG1vZGVcbiAgICAgKiAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmQtaW5wdXQtLWNvbXBhY3QnKVxuICAgIHB1YmxpYyBjb21wYWN0OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmQtbG9jYWxpemF0aW9uLWVkaXRvci10ZXh0YXJlYScpXG4gICAgcHVibGljIGZkTG9jYWxpemF0aW9uRWRpdG9yVGV4dGFyZWFDbGFzczogYm9vbGVhbiA9IHRydWU7XG59XG5cbi8qKlxuICogRGlyZWN0aXZlIHdoaWNoIGlzIHVzZWQgdG8gYWRkIGNvbXBsZXggY29udGVudCwgd2hpY2ggd2lsbCBiZSBkaXNwbGF5ZWQgaW4gdGhlIGFkZC1vbiBzcGFjZS5cbiAqICBgYGBodG1sXG4gKiAgPGZkLWxvY2FsaXphdGlvbi1lZGl0b3ItaXRlbT5cbiAqICAgICAgPG5nLXRlbXBsYXRlIGZkLWxvY2FsaXphdGlvbi1lZGl0b3ItbGFiZWw+XG4gKiAgICAgICAgICA8ZmQtaWNvbiBbZ2x5cGhdPVwiZmllbGQuZ2x5cGhcIj48L2ZkLWljb24+XG4gKiAgICAgIDwvbmctdGVtcGxhdGU+XG4gKiAgICAgIDx0ZXh0YXJlYSBmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWlucHV0IHBsYWNlaG9sZGVyPVwiRU5cIj5cbiAqICA8L2ZkLWxvY2FsaXphdGlvbi1lZGl0b3ItaXRlbT5cbiAqICBgYGBcbiAqICovXG5ARGlyZWN0aXZlKHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdbZmQtbG9jYWxpemF0aW9uLWVkaXRvci1sYWJlbF0nLFxufSlcbmV4cG9ydCBjbGFzcyBMb2NhbGl6YXRpb25FZGl0b3JMYWJlbCB7fVxuXG4vKipcbiAqIERpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgdG8gd3JhcCB3aG9sZSBsb2NhbGl6YXRpb24gZmllbGQgaW5zaWRlIGxpIGVsZW1lbnQuXG4gKiAgYGBgaHRtbFxuICogIDxsaSBmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWVsZW1lbnQ+XG4gKiAgICAgIDxmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWl0ZW0+XG4gKiAgICAgICAgICA8dGV4dGFyZWEgZmQtbG9jYWxpemF0aW9uLWVkaXRvci1pbnB1dCBwbGFjZWhvbGRlcj1cIkVOXCI+XG4gKiAgICAgIDwvZmQtbG9jYWxpemF0aW9uLWVkaXRvci1pdGVtPlxuICogIDwvbGk+XG4gKiAgYGBgXG4gKiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnW2ZkLWxvY2FsaXphdGlvbi1lZGl0b3ItZWxlbWVudF0nLFxufSlcbmV4cG9ydCBjbGFzcyBMb2NhbGl6YXRpb25FZGl0b3JFbGVtZW50IHt9XG5cbi8qKlxuICogTm90IGZvciBleHRlcm5hbCB1c2UuIFBvcnRhbCB0byByZW5kZXIgdGhlIGNvbXBsZXggdGl0bGUgdGVtcGxhdGUuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcbiAgICBzZWxlY3RvcjogJ1tmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWxvYWQtbGFiZWxdJ1xufSlcbmV4cG9ydCBjbGFzcyBMb2NhbGl6YXRpb25FZGl0b3JMb2FkTGFiZWwgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQElucHV0KCdmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWxvYWQtbGFiZWwnKVxuICAgIGNvbnRlbnQ6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHByaXZhdGUgY29udGVudFJlZjogRW1iZWRkZWRWaWV3UmVmPGFueT47XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlld1JlZjogVmlld0NvbnRhaW5lclJlZikge31cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudmlld1JlZi5jbGVhcigpO1xuICAgICAgICB0aGlzLmNvbnRlbnRSZWYgPSB0aGlzLnZpZXdSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMuY29udGVudCk7XG4gICAgfVxufVxuIl19