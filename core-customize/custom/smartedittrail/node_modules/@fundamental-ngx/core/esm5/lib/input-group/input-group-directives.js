/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, forwardRef, HostBinding, Input } from '@angular/core';
import { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';
var InputGroupInputDirective = /** @class */ (function () {
    function InputGroupInputDirective() {
    }
    InputGroupInputDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[fd-input-group-input]',
                },] }
    ];
    return InputGroupInputDirective;
}());
export { InputGroupInputDirective };
var InputGroupTextareaDirective = /** @class */ (function (_super) {
    tslib_1.__extends(InputGroupTextareaDirective, _super);
    function InputGroupTextareaDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InputGroupTextareaDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[fd-textarea-group-input]',
                    providers: [{ provide: InputGroupInputDirective, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return InputGroupTextareaDirective; })) }]
                },] }
    ];
    return InputGroupTextareaDirective;
}(InputGroupInputDirective));
export { InputGroupTextareaDirective };
var InputGroupAddOnDirective = /** @class */ (function (_super) {
    tslib_1.__extends(InputGroupAddOnDirective, _super);
    /** @hidden */
    function InputGroupAddOnDirective(elementRef) {
        var _this = _super.call(this, elementRef) || this;
        _this.elementRef = elementRef;
        /**
         * @hidden
         */
        _this.fdInputGroupAddonClass = true;
        /**
         * The placement of the add-on. Options include *before* and *after*
         */
        _this.placement = 'after';
        /**
         * Whether the icon add-on or the text add-on is a button.
         */
        _this.button = false;
        return _this;
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    InputGroupAddOnDirective.prototype._setProperties = /**
     * @hidden
     * @return {?}
     */
    function () {
        this._addClassToElement('fd-input-group__addon');
        this._addClassToElement('fd-input-group__addon--' + this.placement);
        if (this.button) {
            this._addClassToElement('fd-input-group__addon--button');
        }
        if (this.type) {
            this._addClassToElement('fd-input-group__addon--' + this.type);
        }
    };
    InputGroupAddOnDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[fd-input-group-addon]'
                },] }
    ];
    /** @nocollapse */
    InputGroupAddOnDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    InputGroupAddOnDirective.propDecorators = {
        fdInputGroupAddonClass: [{ type: HostBinding, args: ['class.fd-input-group__addon',] }],
        placement: [{ type: Input }],
        type: [{ type: Input }],
        button: [{ type: Input }]
    };
    return InputGroupAddOnDirective;
}(AbstractFdNgxClass));
export { InputGroupAddOnDirective };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.fdInputGroupAddonClass;
    /**
     * The placement of the add-on. Options include *before* and *after*
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.placement;
    /**
     * The placement of the add-on. Options include *before* and *after*
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.type;
    /**
     * Whether the icon add-on or the text add-on is a button.
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.button;
    /**
     * @type {?}
     * @private
     */
    InputGroupAddOnDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZ3JvdXAtZGlyZWN0aXZlcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmdW5kYW1lbnRhbC1uZ3gvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9pbnB1dC1ncm91cC9pbnB1dC1ncm91cC1kaXJlY3RpdmVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFHcEU7SUFBQTtJQUl1QyxDQUFDOztnQkFKdkMsU0FBUyxTQUFDOztvQkFFUCxRQUFRLEVBQUUsd0JBQXdCO2lCQUNyQzs7SUFDc0MsK0JBQUM7Q0FBQSxBQUp4QyxJQUl3QztTQUEzQix3QkFBd0I7QUFHckM7SUFLaUQsdURBQXdCO0lBTHpFOztJQUsyRSxDQUFDOztnQkFMM0UsU0FBUyxTQUFDOztvQkFFUCxRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxXQUFXLEVBQUUsVUFBVTs7OzRCQUFDLGNBQU0sT0FBQSwyQkFBMkIsRUFBM0IsQ0FBMkIsRUFBQyxFQUFFLENBQUM7aUJBQ2pIOztJQUMwRSxrQ0FBQztDQUFBLEFBTDVFLENBS2lELHdCQUF3QixHQUFHO1NBQS9ELDJCQUEyQjtBQUd4QztJQUk4QyxvREFBa0I7SUFvQzVELGNBQWM7SUFDZCxrQ0FBb0IsVUFBc0I7UUFBMUMsWUFDSSxrQkFBTSxVQUFVLENBQUMsU0FDcEI7UUFGbUIsZ0JBQVUsR0FBVixVQUFVLENBQVk7Ozs7UUFqQzFDLDRCQUFzQixHQUFZLElBQUksQ0FBQzs7OztRQU12QyxlQUFTLEdBQXdCLE9BQU8sQ0FBQzs7OztRQVl6QyxZQUFNLEdBQVksS0FBSyxDQUFDOztJQWlCeEIsQ0FBQztJQWZELGNBQWM7Ozs7O0lBQ2QsaURBQWM7Ozs7SUFBZDtRQUNJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEUsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLCtCQUErQixDQUFDLENBQUM7U0FDNUQ7UUFDRCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDWCxJQUFJLENBQUMsa0JBQWtCLENBQUMseUJBQXlCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2xFO0lBQ0wsQ0FBQzs7Z0JBdENKLFNBQVMsU0FBQzs7b0JBRVAsUUFBUSxFQUFFLHdCQUF3QjtpQkFDckM7Ozs7Z0JBdEJtQixVQUFVOzs7eUNBMEJ6QixXQUFXLFNBQUMsNkJBQTZCOzRCQU16QyxLQUFLO3VCQU1MLEtBQUs7eUJBTUwsS0FBSzs7SUFvQlYsK0JBQUM7Q0FBQSxBQTdDRCxDQUk4QyxrQkFBa0IsR0F5Qy9EO1NBekNZLHdCQUF3Qjs7Ozs7O0lBR2pDLDBEQUN1Qzs7Ozs7SUFLdkMsNkNBQ3lDOzs7OztJQUt6Qyx3Q0FDYTs7Ozs7SUFLYiwwQ0FDd0I7Ozs7O0lBZVosOENBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBmb3J3YXJkUmVmLCBIb3N0QmluZGluZywgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFic3RyYWN0RmROZ3hDbGFzcyB9IGZyb20gJy4uL3V0aWxzL2Fic3RyYWN0LWZkLW5neC1jbGFzcyc7XG5pbXBvcnQgeyBJbnB1dEdyb3VwUGxhY2VtZW50IH0gZnJvbSAnLi9pbnB1dC1ncm91cC5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdbZmQtaW5wdXQtZ3JvdXAtaW5wdXRdJyxcbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRHcm91cElucHV0RGlyZWN0aXZlIHt9XG5cblxuQERpcmVjdGl2ZSh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnW2ZkLXRleHRhcmVhLWdyb3VwLWlucHV0XScsXG4gICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBJbnB1dEdyb3VwSW5wdXREaXJlY3RpdmUsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IElucHV0R3JvdXBUZXh0YXJlYURpcmVjdGl2ZSkgfV1cbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRHcm91cFRleHRhcmVhRGlyZWN0aXZlIGV4dGVuZHMgSW5wdXRHcm91cElucHV0RGlyZWN0aXZlIHt9XG5cblxuQERpcmVjdGl2ZSh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnW2ZkLWlucHV0LWdyb3VwLWFkZG9uXSdcbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRHcm91cEFkZE9uRGlyZWN0aXZlIGV4dGVuZHMgQWJzdHJhY3RGZE5neENsYXNzIHtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mZC1pbnB1dC1ncm91cF9fYWRkb24nKVxuICAgIGZkSW5wdXRHcm91cEFkZG9uQ2xhc3M6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHBsYWNlbWVudCBvZiB0aGUgYWRkLW9uLiBPcHRpb25zIGluY2x1ZGUgKmJlZm9yZSogYW5kICphZnRlcipcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHBsYWNlbWVudDogSW5wdXRHcm91cFBsYWNlbWVudCA9ICdhZnRlcic7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcGxhY2VtZW50IG9mIHRoZSBhZGQtb24uIE9wdGlvbnMgaW5jbHVkZSAqYmVmb3JlKiBhbmQgKmFmdGVyKlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgdHlwZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgaWNvbiBhZGQtb24gb3IgdGhlIHRleHQgYWRkLW9uIGlzIGEgYnV0dG9uLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgYnV0dG9uOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIF9zZXRQcm9wZXJ0aWVzKCkge1xuICAgICAgICB0aGlzLl9hZGRDbGFzc1RvRWxlbWVudCgnZmQtaW5wdXQtZ3JvdXBfX2FkZG9uJyk7XG4gICAgICAgIHRoaXMuX2FkZENsYXNzVG9FbGVtZW50KCdmZC1pbnB1dC1ncm91cF9fYWRkb24tLScgKyB0aGlzLnBsYWNlbWVudCk7XG4gICAgICAgIGlmICh0aGlzLmJ1dHRvbikge1xuICAgICAgICAgICAgdGhpcy5fYWRkQ2xhc3NUb0VsZW1lbnQoJ2ZkLWlucHV0LWdyb3VwX19hZGRvbi0tYnV0dG9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgdGhpcy5fYWRkQ2xhc3NUb0VsZW1lbnQoJ2ZkLWlucHV0LWdyb3VwX19hZGRvbi0tJyArIHRoaXMudHlwZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgICAgICBzdXBlcihlbGVtZW50UmVmKTtcbiAgICB9XG5cbn1cbiJdfQ==