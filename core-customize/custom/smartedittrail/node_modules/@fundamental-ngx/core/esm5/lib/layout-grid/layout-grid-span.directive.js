/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input } from '@angular/core';
import { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';
var LayoutGridSpanDirective = /** @class */ (function (_super) {
    tslib_1.__extends(LayoutGridSpanDirective, _super);
    /** @hidden */
    function LayoutGridSpanDirective(elementRef) {
        var _this = _super.call(this, elementRef) || this;
        _this.elementRef = elementRef;
        return _this;
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    LayoutGridSpanDirective.prototype._setProperties = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.columnSpan) {
            this._addClassToElement('fd-layout-grid__span-column-' + this.columnSpan);
        }
    };
    LayoutGridSpanDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fdLayoutGridSpan], [fd-layout-grid-span]'
                },] }
    ];
    /** @nocollapse */
    LayoutGridSpanDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    LayoutGridSpanDirective.propDecorators = {
        columnSpan: [{ type: Input }]
    };
    return LayoutGridSpanDirective;
}(AbstractFdNgxClass));
export { LayoutGridSpanDirective };
if (false) {
    /**
     * \@Input Column span for the grid system
     * @type {?}
     */
    LayoutGridSpanDirective.prototype.columnSpan;
    /**
     * @type {?}
     * @private
     */
    LayoutGridSpanDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LWdyaWQtc3Bhbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZnVuZGFtZW50YWwtbmd4L2NvcmUvIiwic291cmNlcyI6WyJsaWIvbGF5b3V0LWdyaWQvbGF5b3V0LWdyaWQtc3Bhbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFcEU7SUFHNkMsbURBQWtCO0lBYTNELGNBQWM7SUFDZCxpQ0FBb0IsVUFBc0I7UUFBMUMsWUFDSSxrQkFBTSxVQUFVLENBQUMsU0FDcEI7UUFGbUIsZ0JBQVUsR0FBVixVQUFVLENBQVk7O0lBRTFDLENBQUM7SUFWRCxjQUFjOzs7OztJQUNkLGdEQUFjOzs7O0lBQWQ7UUFDSSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDakIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLDhCQUE4QixHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUM3RTtJQUNMLENBQUM7O2dCQWRKLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsMkNBQTJDO2lCQUN0RDs7OztnQkFMbUIsVUFBVTs7OzZCQVN6QixLQUFLOztJQWNWLDhCQUFDO0NBQUEsQUFwQkQsQ0FHNkMsa0JBQWtCLEdBaUI5RDtTQWpCWSx1QkFBdUI7Ozs7OztJQUdoQyw2Q0FDbUI7Ozs7O0lBVVAsNkNBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWJzdHJhY3RGZE5neENsYXNzIH0gZnJvbSAnLi4vdXRpbHMvYWJzdHJhY3QtZmQtbmd4LWNsYXNzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2ZkTGF5b3V0R3JpZFNwYW5dLCBbZmQtbGF5b3V0LWdyaWQtc3Bhbl0nXG59KVxuZXhwb3J0IGNsYXNzIExheW91dEdyaWRTcGFuRGlyZWN0aXZlIGV4dGVuZHMgQWJzdHJhY3RGZE5neENsYXNzIHtcblxuICAgIC8qKiBASW5wdXQgQ29sdW1uIHNwYW4gZm9yIHRoZSBncmlkIHN5c3RlbSAqL1xuICAgIEBJbnB1dCgpXG4gICAgY29sdW1uU3BhbjogbnVtYmVyO1xuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBfc2V0UHJvcGVydGllcygpIHtcbiAgICAgICAgaWYgKHRoaXMuY29sdW1uU3Bhbikge1xuICAgICAgICAgICAgdGhpcy5fYWRkQ2xhc3NUb0VsZW1lbnQoJ2ZkLWxheW91dC1ncmlkX19zcGFuLWNvbHVtbi0nICsgdGhpcy5jb2x1bW5TcGFuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYpO1xuICAgIH1cbn1cbiJdfQ==