/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, forwardRef, HostBinding, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/**
 * Tool to facilitate the input of files from the user.
 * It supports drag and drop, multiple input, max file size and more.
 * The drag events make it very easy to create and style elements like a dropzone.
 */
var FileInputComponent = /** @class */ (function () {
    function FileInputComponent() {
        /**
         * @hidden
         */
        this.fdFileInputClass = true;
        /**
         * Whether the file input is disabled.
         */
        this.disabled = false;
        /**
         * Whether the file input should accept multiple files.
         */
        this.multiple = true;
        /**
         * Whether the file input accepts drag and dropped files.
         */
        this.dragndrop = true;
        /**
         * Event fired when files are selected. Passed object is the array of files selected.
         */
        this.onSelect = new EventEmitter();
        /**
         * Event fired when some invalid files are selected. Passed object is the array of invalid files.
         */
        this.onInvalidFiles = new EventEmitter();
        /**
         * Event fired when the dragged file enters the component boundaries.
         */
        this.onDragEnter = new EventEmitter();
        /**
         * Event fired when the dragged file exits the component boundaries.
         */
        this.onDragLeave = new EventEmitter();
        /**
         * @hidden
         */
        this.onChange = (/**
         * @return {?}
         */
        function () { });
        /**
         * @hidden
         */
        this.onTouched = (/**
         * @return {?}
         */
        function () { });
    }
    /** @hidden */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    FileInputComponent.prototype.registerOnChange = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    FileInputComponent.prototype.registerOnTouched = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    FileInputComponent.prototype.setDisabledState = /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} files
     * @return {?}
     */
    FileInputComponent.prototype.writeValue = /**
     * @hidden
     * @param {?} files
     * @return {?}
     */
    function (files) {
        // not needed - should be handled by user.
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    FileInputComponent.prototype.selectHandler = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (this.maxFileSize) {
            /** @type {?} */
            var valid_files_1 = [];
            /** @type {?} */
            var invalid_files_1 = [];
            event.forEach((/**
             * @param {?} file
             * @return {?}
             */
            function (file) {
                if (file.size < _this.maxFileSize) {
                    valid_files_1.push(file);
                }
                else {
                    invalid_files_1.push(file);
                }
            }));
            if (valid_files_1.length > 0) {
                this.onChange(valid_files_1);
                this.onSelect.emit(valid_files_1);
            }
            if (invalid_files_1.length > 0) {
                this.onInvalidFiles.emit(invalid_files_1);
            }
        }
        else {
            this.onChange(event);
            this.onSelect.emit(event);
        }
    };
    /**
     * Opens the file selector.
     */
    /**
     * Opens the file selector.
     * @return {?}
     */
    FileInputComponent.prototype.open = /**
     * Opens the file selector.
     * @return {?}
     */
    function () {
        this.inputRef.nativeElement.click();
    };
    /**
     * Clears the files from the input.
     */
    /**
     * Clears the files from the input.
     * @return {?}
     */
    FileInputComponent.prototype.clear = /**
     * Clears the files from the input.
     * @return {?}
     */
    function () {
        this.inputRef.nativeElement.value = '';
        this.onChange([]);
    };
    FileInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fd-file-input',
                    template: "<div style=\"display: block\"\n     fdFileDragnDrop\n     [accept]=\"accept\"\n     [dragndrop]=\"dragndrop\"\n     [disabled]=\"disabled\"\n     [multiple]=\"multiple\"\n     (onFileChange)=\"selectHandler($event)\"\n     (onInvalidFiles)=\"onInvalidFiles.emit($event)\"\n     (onDragEnter)=\"onDragEnter.emit()\"\n     (onDragLeave)=\"onDragLeave.emit()\">\n    <ng-content></ng-content>\n</div>\n<input #input\n       class=\"hidden-file-input\"\n       type=\"file\"\n       [attr.accept]=\"accept\"\n       (onFileSelect)=\"selectHandler($event)\"\n       [multiple]=\"multiple\"\n       [disabled]=\"disabled\"\n       fdFileSelect>\n\n",
                    host: {
                        '(blur)': 'onTouched()'
                    },
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return FileInputComponent; })),
                            multi: true,
                        }],
                    encapsulation: ViewEncapsulation.None,
                    styles: [".fd-file-input{display:inline-block}.fd-file-input input.hidden-file-input{display:none}"]
                }] }
    ];
    FileInputComponent.propDecorators = {
        fdFileInputClass: [{ type: HostBinding, args: ['class.fd-file-input',] }],
        inputRef: [{ type: ViewChild, args: ['input', { static: false },] }],
        disabled: [{ type: Input }],
        multiple: [{ type: Input }],
        accept: [{ type: Input }],
        dragndrop: [{ type: Input }],
        maxFileSize: [{ type: Input }],
        onSelect: [{ type: Output }],
        onInvalidFiles: [{ type: Output }],
        onDragEnter: [{ type: Output }],
        onDragLeave: [{ type: Output }]
    };
    return FileInputComponent;
}());
export { FileInputComponent };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    FileInputComponent.prototype.fdFileInputClass;
    /**
     * @hidden
     * @type {?}
     */
    FileInputComponent.prototype.inputRef;
    /**
     * Whether the file input is disabled.
     * @type {?}
     */
    FileInputComponent.prototype.disabled;
    /**
     * Whether the file input should accept multiple files.
     * @type {?}
     */
    FileInputComponent.prototype.multiple;
    /**
     * Accepted file extensions. Format: `'.png,.jpg'`.
     * @type {?}
     */
    FileInputComponent.prototype.accept;
    /**
     * Whether the file input accepts drag and dropped files.
     * @type {?}
     */
    FileInputComponent.prototype.dragndrop;
    /**
     * Max file size in bytes that the input will accept.
     * @type {?}
     */
    FileInputComponent.prototype.maxFileSize;
    /**
     * Event fired when files are selected. Passed object is the array of files selected.
     * @type {?}
     */
    FileInputComponent.prototype.onSelect;
    /**
     * Event fired when some invalid files are selected. Passed object is the array of invalid files.
     * @type {?}
     */
    FileInputComponent.prototype.onInvalidFiles;
    /**
     * Event fired when the dragged file enters the component boundaries.
     * @type {?}
     */
    FileInputComponent.prototype.onDragEnter;
    /**
     * Event fired when the dragged file exits the component boundaries.
     * @type {?}
     */
    FileInputComponent.prototype.onDragLeave;
    /**
     * @hidden
     * @type {?}
     */
    FileInputComponent.prototype.onChange;
    /**
     * @hidden
     * @type {?}
     */
    FileInputComponent.prototype.onTouched;
}
//# sourceMappingURL=data:application/json;base64,