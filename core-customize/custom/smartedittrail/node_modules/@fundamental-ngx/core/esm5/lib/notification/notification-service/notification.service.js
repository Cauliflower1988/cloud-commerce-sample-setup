/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NotificationComponent } from '../notification/notification.component';
import { NotificationContainer } from '../notification-utils/notification-container';
import { NotificationConfig } from '../notification-utils/notification-config';
import { NotificationRef } from '../notification-utils/notification-ref';
import { DynamicComponentService } from '../../utils/dynamic-component/dynamic-component.service';
import { NotificationGroupComponent } from '../notification-group/notification-group.component';
var NotificationService = /** @class */ (function () {
    function NotificationService(dynamicComponentService) {
        this.dynamicComponentService = dynamicComponentService;
        this.notifications = [];
    }
    /**
     * Opens an alert component with a content of type TemplateRef, Component Type or Configuration Object
     * @param content Content of the alert component, or NotificationDefault object.
     * @param notificationConfig Configuration of the notification component.
     * @param notificationGroup Configuration of the notification component.
     */
    /**
     * Opens an alert component with a content of type TemplateRef, Component Type or Configuration Object
     * @param {?} content Content of the alert component, or NotificationDefault object.
     * @param {?=} notificationConfig Configuration of the notification component.
     * @param {?=} notificationGroup Configuration of the notification component.
     * @return {?}
     */
    NotificationService.prototype.open = /**
     * Opens an alert component with a content of type TemplateRef, Component Type or Configuration Object
     * @param {?} content Content of the alert component, or NotificationDefault object.
     * @param {?=} notificationConfig Configuration of the notification component.
     * @param {?=} notificationGroup Configuration of the notification component.
     * @return {?}
     */
    function (content, notificationConfig, notificationGroup) {
        var _this = this;
        if (notificationConfig === void 0) { notificationConfig = new NotificationConfig(); }
        // Reassigning Object And Service
        /** @type {?} */
        var notificationService = new NotificationRef();
        notificationConfig = Object.assign(new NotificationConfig(), notificationConfig);
        notificationService.data = notificationConfig.data;
        if (notificationService.data) {
            notificationService.data.type = notificationConfig.type;
        }
        // Create Container if it doesn't exist
        if (!this.containerRef) {
            this.containerRef = this.dynamicComponentService.createDynamicComponent(content, NotificationContainer, notificationConfig);
        }
        // Pass Container reference to config
        notificationConfig.container = this.containerRef.location.nativeElement;
        /** @type {?} */
        var notificationComponentRef;
        if (notificationGroup) {
            // If there is group Pass group reference as a container
            notificationConfig.container = notificationGroup.location.nativeElement;
            // Create Notification Component
            notificationComponentRef = this.dynamicComponentService.createDynamicComponent(content, NotificationComponent, notificationConfig, [notificationService]);
            // Add To array
            this.notifications.push({
                notificationComponent: notificationComponentRef,
                notificationGroup: notificationGroup
            });
        }
        else {
            // Create Notification Component
            notificationComponentRef = this.dynamicComponentService.createDynamicComponent(content, NotificationComponent, notificationConfig, [notificationService]);
            // Add To array
            this.notifications.push({
                notificationComponent: notificationComponentRef,
            });
        }
        /** @type {?} */
        var defaultBehaviourOnClose = (/**
         * @return {?}
         */
        function () {
            _this.destroyNotificationComponent(notificationComponentRef);
            refSub.unsubscribe();
            refGroupSub.unsubscribe();
        });
        /** @type {?} */
        var defaultBehaviourOnGroupClose = (/**
         * @return {?}
         */
        function () {
            _this.destroyWholeGroup(notificationComponentRef);
            refGroupSub.unsubscribe();
            refSub.unsubscribe();
        });
        /** @type {?} */
        var refSub = notificationService.afterClosed
            .subscribe(defaultBehaviourOnClose, defaultBehaviourOnClose);
        /** @type {?} */
        var refGroupSub = notificationService.afterClosedGroup
            .subscribe(defaultBehaviourOnGroupClose, defaultBehaviourOnGroupClose);
        return notificationService;
    };
    /** Method to remove all of notifications from this service instance */
    /**
     * Method to remove all of notifications from this service instance
     * @return {?}
     */
    NotificationService.prototype.destroyAll = /**
     * Method to remove all of notifications from this service instance
     * @return {?}
     */
    function () {
        var _this = this;
        this.notifications.forEach((/**
         * @param {?} notification
         * @return {?}
         */
        function (notification) {
            _this.destroyNotificationComponent(notification.notificationComponent);
        }));
    };
    /** Method that informs if there is any notification opened in this service instance */
    /**
     * Method that informs if there is any notification opened in this service instance
     * @return {?}
     */
    NotificationService.prototype.isAnyOpened = /**
     * Method that informs if there is any notification opened in this service instance
     * @return {?}
     */
    function () {
        return this.notifications && this.notifications.length > 0;
    };
    /** Method to create Notification Group */
    /**
     * Method to create Notification Group
     * @param {?=} notificationConfig
     * @return {?}
     */
    NotificationService.prototype.createNotificationGroup = /**
     * Method to create Notification Group
     * @param {?=} notificationConfig
     * @return {?}
     */
    function (notificationConfig) {
        if (notificationConfig === void 0) { notificationConfig = new NotificationConfig(); }
        // Reassign Config Object
        notificationConfig = Object.assign(new NotificationConfig(), notificationConfig);
        if (!this.containerRef) {
            // Create Container Component
            this.containerRef = this.dynamicComponentService.createDynamicComponent(null, NotificationContainer, notificationConfig);
        }
        // Pass Container reference as a config container
        notificationConfig.container = this.containerRef.location.nativeElement;
        // Create and return notification Group component reference
        return this.dynamicComponentService.createDynamicComponent(null, NotificationGroupComponent, notificationConfig);
    };
    /**
     * @private
     * @param {?} notification
     * @return {?}
     */
    NotificationService.prototype.destroyWholeGroup = /**
     * @private
     * @param {?} notification
     * @return {?}
     */
    function (notification) {
        var _this = this;
        // Find Notification Group assigned to this Notification Component
        /** @type {?} */
        var arrayRef = this.notifications.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.notificationComponent === notification; }));
        if (arrayRef.notificationGroup) {
            // Find Any other Components, that are in this group
            /** @type {?} */
            var arrayToDelete = this.notifications
                .filter((/**
             * @param {?} _notification
             * @return {?}
             */
            function (_notification) { return _notification.notificationGroup === arrayRef.notificationGroup; }));
            // Destroy every single component, that are in the group
            arrayToDelete.forEach((/**
             * @param {?} _notification
             * @return {?}
             */
            function (_notification) { return _this.destroyNotificationComponent(_notification.notificationComponent); }));
        }
    };
    /**
     * @private
     * @param {?} notification
     * @return {?}
     */
    NotificationService.prototype.destroyNotificationComponent = /**
     * @private
     * @param {?} notification
     * @return {?}
     */
    function (notification) {
        // Find Notification component in the array.
        /** @type {?} */
        var arrayRef = this.notifications.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.notificationComponent === notification; }));
        /** @type {?} */
        var indexOf = this.notifications.indexOf(arrayRef);
        // Check the amount of component within the group
        /** @type {?} */
        var amountOfComponentsWithThisGroup = this.notifications.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return item.notificationGroup && item.notificationGroup === arrayRef.notificationGroup;
        }));
        // If it's the only one component that is in the group, remove group component.
        if (amountOfComponentsWithThisGroup.length === 1) {
            this.dynamicComponentService.destroyComponent(arrayRef.notificationGroup);
        }
        // Destroy Component
        this.dynamicComponentService.destroyComponent(arrayRef.notificationComponent);
        // Remove it from Array
        this.notifications[indexOf] = null;
        this.notifications = this.notifications.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item !== null && item !== undefined; }));
        // If there is no other notification Components, just remove container.
        if (this.notifications.length === 0) {
            this.dynamicComponentService.destroyComponent(this.containerRef);
            this.containerRef = null;
        }
    };
    NotificationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NotificationService.ctorParameters = function () { return [
        { type: DynamicComponentService }
    ]; };
    return NotificationService;
}());
export { NotificationService };
if (false) {
    /** @type {?} */
    NotificationService.prototype.notifications;
    /** @type {?} */
    NotificationService.prototype.containerRef;
    /**
     * @type {?}
     * @private
     */
    NotificationService.prototype.dynamicComponentService;
}
//# sourceMappingURL=data:application/json;base64,