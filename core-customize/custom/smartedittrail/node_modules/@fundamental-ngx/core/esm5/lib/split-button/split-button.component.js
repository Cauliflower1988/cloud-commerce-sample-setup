/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, EventEmitter, Input, Output, TemplateRef } from '@angular/core';
import { SplitButtonActionTitle } from './split-button-utils/split-button.directives';
/**
 * Split Button component, used to enhance standard HTML button and add possibility to put some dropdown with
 * additional options.
 *
 * ```html
 *    <fd-split-button>
 *        Action Button
 *        <div fd-split-button-menu>
 *            <fd-menu>
 *                <ul fd-menu-list>
 *                    <li fd-menu-item>
 *                       <a [routerLink]="'/'">option</a>
 *                    </li>
 *                    <li fd-menu-item>
 *                       <a [routerLink]="'/'">option2</a>
 *                    </li>
 *                </ul>
 *            </fd-menu>
 *        </div>
 *    </fd-split-button>
 * ```
 */
var SplitButtonComponent = /** @class */ (function () {
    function SplitButtonComponent() {
        /**
         * The trigger events that will open/close the popover.
         *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp).
         */
        this.triggers = ['click'];
        /**
         * Whether the popover should close when a click is made outside its boundaries.
         */
        this.closeOnOutsideClick = true;
        /**
         * Whether the popover should close when the escape key is pressed.
         */
        this.closeOnEscapeKey = true;
        /**
         * Whether the popover should be focusTrapped.
         */
        this.focusTrapped = false;
        /**
         * The icon to include in the button. See the icon page for the list of icons.
         */
        this.glyph = 'slim-arrow-down';
        /**
         * Preset options for the popover body width.
         * * `at-least` will apply a minimum width to the body equivalent to the width of the control.
         * * `equal` will apply a width to the body equivalent to the width of the control.
         * * Leave blank for no effect.
         */
        this.fillControlMode = 'at-least';
        /**
         * @hidden
         */
        this.isOpen = false;
        /**
         * Event sent when is open popover changed
         */
        this.isOpenChange = new EventEmitter();
        /**
         * Event sent when primary button is clicked
         */
        this.primaryButtonClicked = new EventEmitter();
    }
    /**
     *  Handles primary button click
     *  */
    /**
     *  Handles primary button click
     *
     * @param {?} $event
     * @return {?}
     */
    SplitButtonComponent.prototype.buttonClick = /**
     *  Handles primary button click
     *
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.primaryButtonClicked.emit();
        $event.stopPropagation();
    };
    /**
     * Toggles the popover open state.
     */
    /**
     * Toggles the popover open state.
     * @return {?}
     */
    SplitButtonComponent.prototype.toggle = /**
     * Toggles the popover open state.
     * @return {?}
     */
    function () {
        if (this.isOpen) {
            this.close();
        }
        else {
            this.open();
        }
    };
    /**
     * Closes the popover.
     */
    /**
     * Closes the popover.
     * @return {?}
     */
    SplitButtonComponent.prototype.close = /**
     * Closes the popover.
     * @return {?}
     */
    function () {
        if (this.isOpen) {
            this.isOpen = false;
            this.isOpenChange.emit(this.isOpen);
        }
    };
    /**
     * Opens the popover.
     */
    /**
     * Opens the popover.
     * @return {?}
     */
    SplitButtonComponent.prototype.open = /**
     * Opens the popover.
     * @return {?}
     */
    function () {
        if (!this.isOpen) {
            this.isOpen = true;
            this.isOpenChange.emit(this.isOpen);
        }
    };
    SplitButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fd-split-button',
                    template: "<fd-popover [(isOpen)]=\"isOpen\"\n            [focusTrapped]=\"focusTrapped\"\n            [closeOnEscapeKey]=\"closeOnEscapeKey\"\n            [closeOnOutsideClick]=\"closeOnOutsideClick\"\n            [disabled]=\"disabled\"\n            [triggers]=\"triggers\"\n            [fillControlMode]=\"fillControlMode\">\n    <fd-popover-control>\n        <div class=\"fd-button-split\">\n            <button fd-button\n                    [fdType]=\"fdType\"\n                    [options]=\"options\"\n                    [compact]=\"compact\"\n                    (click)=\"buttonClick($event)\"\n                    [disabled]=\"disabled\">\n                <ng-container *ngIf=\"titleTemplate\">\n                    <ng-container [fd-split-button-load-action-title]=\"titleTemplate\"></ng-container>\n                </ng-container>\n                <ng-container *ngIf=\"!titleTemplate\">\n                    {{mainActionTitle}}\n                </ng-container>\n            </button>\n            <button fd-button\n                    [attr.aria-expanded]=\"disabled ? false : isOpen\"\n                    [attr.aria-disabled]=\"disabled\"\n                    aria-haspopup=\"true\"\n                    [fdType]=\"fdType\"\n                    [options]=\"options\"\n                    [compact]=\"compact\"\n                    [glyph]=\"glyph\">\n            </button>\n        </div>\n    </fd-popover-control>\n    <fd-popover-body>\n        <ng-content select=\"[fd-split-button-menu]\"></ng-content>\n    </fd-popover-body>\n</fd-popover>\n",
                    styles: ["/*!\n * Fundamental Styles v0.3.0\n * Copyright (c) 2019 SAP SE or an SAP affiliate company.\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/master/LICENSE)\n *//*!\n.fd-button-split+()\n    .fd-button\n*/.fd-button-split{font-size:14px;line-height:1.42857;color:#32363a;color:var(--fd-color-text-1,#32363a);font-family:\"72\",-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0;display:inline-flex;vertical-align:middle;position:relative}.fd-button-split:after,.fd-button-split:before{box-sizing:inherit;font-size:inherit}.fd-button-split :first-child{margin:0;border-top-right-radius:0;border-bottom-right-radius:0}.fd-button-split :nth-child(2){margin:0;border-top-left-radius:0;border-bottom-left-radius:0;border-left-width:0}.fd-button-split[dir=rtl] :first-child,[dir=rtl] .fd-button-split :first-child{border-radius:0 4px 4px 0}.fd-button-split[dir=rtl] :nth-child(2),[dir=rtl] .fd-button-split :nth-child(2){border-left-width:1px;border-right-width:0;border-radius:4px 0 0 4px}.fd-button-split [class*=\"--emphasized\"]:first-child{margin-right:1px}.fd-button-split [class*=\"--emphasized\"][dir=rtl]:first-child,[dir=rtl] .fd-button-split [class*=\"--emphasized\"]:first-child{margin-right:0;margin-left:1px}"]
                }] }
    ];
    SplitButtonComponent.propDecorators = {
        titleTemplate: [{ type: ContentChild, args: [SplitButtonActionTitle, { read: TemplateRef, static: false },] }],
        triggers: [{ type: Input }],
        closeOnOutsideClick: [{ type: Input }],
        closeOnEscapeKey: [{ type: Input }],
        focusTrapped: [{ type: Input }],
        compact: [{ type: Input }],
        glyph: [{ type: Input }],
        disabled: [{ type: Input }],
        mainActionTitle: [{ type: Input }],
        fdType: [{ type: Input }],
        options: [{ type: Input }],
        fillControlMode: [{ type: Input }],
        isOpen: [{ type: Input }],
        isOpenChange: [{ type: Output }],
        primaryButtonClicked: [{ type: Output }]
    };
    return SplitButtonComponent;
}());
export { SplitButtonComponent };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    SplitButtonComponent.prototype.titleTemplate;
    /**
     * The trigger events that will open/close the popover.
     *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp).
     * @type {?}
     */
    SplitButtonComponent.prototype.triggers;
    /**
     * Whether the popover should close when a click is made outside its boundaries.
     * @type {?}
     */
    SplitButtonComponent.prototype.closeOnOutsideClick;
    /**
     * Whether the popover should close when the escape key is pressed.
     * @type {?}
     */
    SplitButtonComponent.prototype.closeOnEscapeKey;
    /**
     * Whether the popover should be focusTrapped.
     * @type {?}
     */
    SplitButtonComponent.prototype.focusTrapped;
    /**
     * Whether to apply compact mode to the button.
     * @type {?}
     */
    SplitButtonComponent.prototype.compact;
    /**
     * The icon to include in the button. See the icon page for the list of icons.
     * @type {?}
     */
    SplitButtonComponent.prototype.glyph;
    /**
     * The icon to include in the button. See the icon page for the list of icons.
     * @type {?}
     */
    SplitButtonComponent.prototype.disabled;
    /**
     * The Title for main  action button
     * @type {?}
     */
    SplitButtonComponent.prototype.mainActionTitle;
    /**
     * The type of the button. Types include 'standard', 'positive', 'medium', and 'negative'.
     * Leave empty for default (Action button).'
     * @type {?}
     */
    SplitButtonComponent.prototype.fdType;
    /**
     * Button options.  Options include 'emphasized' and 'light'. Leave empty for default.'
     * @type {?}
     */
    SplitButtonComponent.prototype.options;
    /**
     * Preset options for the popover body width.
     * * `at-least` will apply a minimum width to the body equivalent to the width of the control.
     * * `equal` will apply a width to the body equivalent to the width of the control.
     * * Leave blank for no effect.
     * @type {?}
     */
    SplitButtonComponent.prototype.fillControlMode;
    /**
     * @hidden
     * @type {?}
     */
    SplitButtonComponent.prototype.isOpen;
    /**
     * Event sent when is open popover changed
     * @type {?}
     */
    SplitButtonComponent.prototype.isOpenChange;
    /**
     * Event sent when primary button is clicked
     * @type {?}
     */
    SplitButtonComponent.prototype.primaryButtonClicked;
}
//# sourceMappingURL=data:application/json;base64,