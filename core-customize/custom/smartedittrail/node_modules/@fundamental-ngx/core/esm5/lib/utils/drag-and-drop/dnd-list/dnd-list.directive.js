/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ContentChildren, Directive, EventEmitter, Input, Output, QueryList } from '@angular/core';
import { DndContainerDirective } from '../dnd-container/dnd-container.directive';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
/**
 * @record
 */
export function ElementChord() { }
if (false) {
    /** @type {?} */
    ElementChord.prototype.x;
    /** @type {?} */
    ElementChord.prototype.y;
    /** @type {?} */
    ElementChord.prototype.position;
}
var DndListDirective = /** @class */ (function () {
    function DndListDirective() {
        /**
         * Defines if the distance between elements should be counted only by vertical distance
         */
        this.listMode = false;
        /**
         * Event that is thrown, when the item is dropped
         */
        this.itemsChange = new EventEmitter();
        /**
         * @hidden
         */
        this.draggedItemIndex = 1000000;
        /**
         * @hidden
         */
        this.closestLinkIndex = null;
        /**
         * @hidden
         */
        this.closestLinkPosition = null;
        /**
         * An RxJS Subject that will kill the current data stream (for unsubscribing)
         */
        this.refresh$ = new Subject();
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    DndListDirective.prototype.ngAfterContentInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        this.refreshQueryList();
        this.dndContainerItems.changes.subscribe((/**
         * @return {?}
         */
        function () { return _this.refreshQueryList(); }));
    };
    /** Method called, when the item is being moved by 1 px */
    /**
     * Method called, when the item is being moved by 1 px
     * @param {?} event
     * @return {?}
     */
    DndListDirective.prototype.onMove = /**
     * Method called, when the item is being moved by 1 px
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var distances = [];
        /**
         * Taking mouse position
         * @type {?}
         */
        var mousePosition = event.pointerPosition;
        /** Counting the distances by the mileage of the corner of element and cursor position */
        this.elementChords.forEach((/**
         * @param {?} linkChord
         * @return {?}
         */
        function (linkChord) {
            /** @type {?} */
            var distance = Math.hypot(linkChord.x - mousePosition.x, linkChord.y - mousePosition.y);
            distances.push(distance);
        }));
        /**
         * Checking closest element
         * @type {?}
         */
        var closeLinkIndex = distances.indexOf(Math.min.apply(Math, tslib_1.__spread(distances)));
        /** If the closest element is different than the old one, new one is picked. It prevents from performance issues */
        if (closeLinkIndex !== this.closestLinkIndex) {
            this.closestLinkIndex = closeLinkIndex;
            this.closestLinkPosition = this.elementChords[closeLinkIndex].position;
            /** Generating line, that shows where the element will be placed, on drop */
            this.generateLine(this.closestLinkIndex, this.closestLinkPosition);
        }
    };
    /** Method called, when element is started to be dragged */
    /**
     * Method called, when element is started to be dragged
     * @param {?} ind
     * @return {?}
     */
    DndListDirective.prototype.dragStart = /**
     * Method called, when element is started to be dragged
     * @param {?} ind
     * @return {?}
     */
    function (ind) {
        var _this = this;
        this.draggedItemIndex = ind;
        /** @type {?} */
        var draggedItemElement = this.dndContainerItems.toArray()[ind].element;
        /** Counting all of the elements's chords */
        this.elementChords = this.dndContainerItems.toArray().map((/**
         * @param {?} link
         * @return {?}
         */
        function (link) {
            return link.getElementChord(_this.isBefore(draggedItemElement, link.element), _this.listMode);
        }));
    };
    /** Method called, when element is released */
    /**
     * Method called, when element is released
     * @return {?}
     */
    DndListDirective.prototype.dragEnd = /**
     * Method called, when element is released
     * @return {?}
     */
    function () {
        /** @type {?} */
        var draggedItemIndex = this.draggedItemIndex;
        /** @type {?} */
        var replacedItemIndex = this.closestLinkIndex;
        /** @type {?} */
        var draggedItem = this.items[draggedItemIndex];
        if (draggedItemIndex < replacedItemIndex) {
            for (var i = draggedItemIndex; i < replacedItemIndex; i++) {
                this.items[i] = this.items[i + 1];
            }
        }
        else {
            for (var i = draggedItemIndex; i > replacedItemIndex; i--) {
                this.items[i] = this.items[i - 1];
            }
        }
        /** Replacing items */
        this.items[replacedItemIndex] = draggedItem;
        this.itemsChange.emit(this.items);
        this.removeAllLines();
        /** Reset */
        this.elementChords = [];
        this.closestLinkIndex = null;
        this.closestLinkPosition = null;
    };
    /** @hidden */
    /**
     * @hidden
     * @private
     * @return {?}
     */
    DndListDirective.prototype.removeAllLines = /**
     * @hidden
     * @private
     * @return {?}
     */
    function () {
        this.dndContainerItems.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.removeLine(); }));
    };
    /** @hidden */
    /**
     * @hidden
     * @private
     * @param {?} closestLinkIndex
     * @param {?} linkPosition
     * @return {?}
     */
    DndListDirective.prototype.generateLine = /**
     * @hidden
     * @private
     * @param {?} closestLinkIndex
     * @param {?} linkPosition
     * @return {?}
     */
    function (closestLinkIndex, linkPosition) {
        this.removeAllLines();
        this.dndContainerItems.toArray()[closestLinkIndex].createLine(linkPosition, this.listMode);
    };
    /** @hidden */
    /**
     * @hidden
     * @private
     * @return {?}
     */
    DndListDirective.prototype.refreshQueryList = /**
     * @hidden
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.refresh$.next();
        this.dndContainerItems.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            item.moved.pipe(takeUntil(_this.refresh$)).subscribe((/**
             * @param {?} eventMove
             * @return {?}
             */
            function (eventMove) { return _this.onMove(eventMove); }));
            item.started.pipe(takeUntil(_this.refresh$)).subscribe((/**
             * @return {?}
             */
            function () { return _this.dragStart(index); }));
            item.released.pipe(takeUntil(_this.refresh$)).subscribe((/**
             * @return {?}
             */
            function () { return _this.dragEnd(); }));
        }));
    };
    /**
     *  @hidden
     * Return information if element is placed before the dragged element
     */
    /**
     * @hidden
     * Return information if element is placed before the dragged element
     * @private
     * @param {?} draggedElement
     * @param {?} targetElement
     * @return {?}
     */
    DndListDirective.prototype.isBefore = /**
     * @hidden
     * Return information if element is placed before the dragged element
     * @private
     * @param {?} draggedElement
     * @param {?} targetElement
     * @return {?}
     */
    function (draggedElement, targetElement) {
        /**
         * Sometimes the element are not straight in one column, that's why offset is needed
         * @type {?}
         */
        var VERTICAL_OFFSET = 20;
        /**
         * Distances from the top of screen
         * @type {?}
         */
        var draggedElementBound = (/** @type {?} */ (draggedElement.nativeElement.getBoundingClientRect()));
        /** @type {?} */
        var targetElementBound = (/** @type {?} */ (targetElement.nativeElement.getBoundingClientRect()));
        if (draggedElementBound.y - targetElementBound.y > VERTICAL_OFFSET) {
            /** If element is higher than the dragged element, it's for sure before */
            return true;
        }
        else if (targetElementBound.y - draggedElementBound.y > VERTICAL_OFFSET) {
            /** If element is lower than the dragged element, it's for sure after */
            return false;
        }
        else {
            /** If elements are in same level, the horizontal position decides if it's before/after */
            return draggedElementBound.x - targetElementBound.x > 0;
        }
    };
    DndListDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[fd-dnd-list]',
                },] }
    ];
    DndListDirective.propDecorators = {
        dndContainerItems: [{ type: ContentChildren, args: [DndContainerDirective,] }],
        listMode: [{ type: Input }],
        items: [{ type: Input }],
        itemsChange: [{ type: Output }]
    };
    return DndListDirective;
}());
export { DndListDirective };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    DndListDirective.prototype.dndContainerItems;
    /**
     * Defines if the distance between elements should be counted only by vertical distance
     * @type {?}
     */
    DndListDirective.prototype.listMode;
    /**
     * Array of items, that will be sorted
     * @type {?}
     */
    DndListDirective.prototype.items;
    /**
     * Event that is thrown, when the item is dropped
     * @type {?}
     */
    DndListDirective.prototype.itemsChange;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    DndListDirective.prototype.elementChords;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    DndListDirective.prototype.draggedItemIndex;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    DndListDirective.prototype.closestLinkIndex;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    DndListDirective.prototype.closestLinkPosition;
    /**
     * An RxJS Subject that will kill the current data stream (for unsubscribing)
     * @type {?}
     * @private
     */
    DndListDirective.prototype.refresh$;
}
//# sourceMappingURL=data:application/json;base64,