/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';
/**
 * A directive designed to help navigation elements determine the element currently in view of the user.
 */
var ScrollSpyDirective = /** @class */ (function () {
    /** @hidden */
    function ScrollSpyDirective(elRef) {
        this.elRef = elRef;
        /**
         * An array of tags to track.
         */
        this.trackedTags = [];
        /**
         * Whether events are still fired if there is no tag present on the user's screen.
         */
        this.fireEmpty = false;
        /**
         * A number that represent at what location in the container the event is fired.
         * 0.5 would fire the events in the middle of the container,
         * 0 for the top and 1 for the bottom.
         */
        this.targetPercent = 0;
        /**
         * Number that represents the offset in pixels for fired target. `100` value means that the event will be fired for
         * target that is 100 pixels below the spy container.
         */
        this.targetOffset = 0;
        /**
         * Event fired on the scroll element when a new item becomes activated by the scrollspy .
         * The returned value is the HTMLElement itself.
         */
        this.spyChange = new EventEmitter();
    }
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    ScrollSpyDirective.prototype.onScroll = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var spiedTag;
        /** @type {?} */
        var children = this.elRef.nativeElement.children;
        /** @type {?} */
        var targetScrollTop = event.target.scrollTop;
        /** @type {?} */
        var targetOffsetTop = event.target.offsetTop + this.targetOffset;
        var _loop_1 = function (i) {
            /** @type {?} */
            var element = children[i];
            if (this_1.trackedTags.some((/**
             * @param {?} tag
             * @return {?}
             */
            function (tag) { return tag.toLocaleUpperCase() === element.tagName.toLocaleUpperCase(); }))) {
                if ((element.offsetTop - targetOffsetTop) <= targetScrollTop + event.target.offsetHeight * this_1.targetPercent) {
                    spiedTag = element;
                }
            }
        };
        var this_1 = this;
        for (var i = 0; i < children.length; i++) {
            _loop_1(i);
        }
        if ((spiedTag || this.fireEmpty) && spiedTag !== this.currentActive) {
            this.currentActive = spiedTag;
            this.spyChange.emit(this.currentActive);
        }
    };
    ScrollSpyDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fdScrollSpy]'
                },] }
    ];
    /** @nocollapse */
    ScrollSpyDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ScrollSpyDirective.propDecorators = {
        trackedTags: [{ type: Input }],
        fireEmpty: [{ type: Input }],
        targetPercent: [{ type: Input }],
        targetOffset: [{ type: Input }],
        spyChange: [{ type: Output }],
        onScroll: [{ type: HostListener, args: ['scroll', ['$event'],] }]
    };
    return ScrollSpyDirective;
}());
export { ScrollSpyDirective };
if (false) {
    /**
     * An array of tags to track.
     * @type {?}
     */
    ScrollSpyDirective.prototype.trackedTags;
    /**
     * Whether events are still fired if there is no tag present on the user's screen.
     * @type {?}
     */
    ScrollSpyDirective.prototype.fireEmpty;
    /**
     * A number that represent at what location in the container the event is fired.
     * 0.5 would fire the events in the middle of the container,
     * 0 for the top and 1 for the bottom.
     * @type {?}
     */
    ScrollSpyDirective.prototype.targetPercent;
    /**
     * Number that represents the offset in pixels for fired target. `100` value means that the event will be fired for
     * target that is 100 pixels below the spy container.
     * @type {?}
     */
    ScrollSpyDirective.prototype.targetOffset;
    /**
     * Event fired on the scroll element when a new item becomes activated by the scrollspy .
     * The returned value is the HTMLElement itself.
     * @type {?}
     */
    ScrollSpyDirective.prototype.spyChange;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    ScrollSpyDirective.prototype.currentActive;
    /**
     * @type {?}
     * @private
     */
    ScrollSpyDirective.prototype.elRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXNweS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZnVuZGFtZW50YWwtbmd4L2NvcmUvIiwic291cmNlcyI6WyJsaWIvc2Nyb2xsLXNweS9zY3JvbGwtc3B5LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBS2pHO0lBeUNJLGNBQWM7SUFDZCw0QkFBb0IsS0FBaUI7UUFBakIsVUFBSyxHQUFMLEtBQUssQ0FBWTs7OztRQWxDOUIsZ0JBQVcsR0FBYSxFQUFFLENBQUM7Ozs7UUFNM0IsY0FBUyxHQUFZLEtBQUssQ0FBQzs7Ozs7O1FBUTNCLGtCQUFhLEdBQVcsQ0FBQyxDQUFDOzs7OztRQU8xQixpQkFBWSxHQUFXLENBQUMsQ0FBQzs7Ozs7UUFPaEIsY0FBUyxHQUE4QixJQUFJLFlBQVksRUFBZSxDQUFDO0lBTS9DLENBQUM7SUFFekMsY0FBYzs7Ozs7O0lBRWQscUNBQVE7Ozs7O0lBRFIsVUFDUyxLQUFVOztZQUNYLFFBQXFCOztZQUNuQixRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsUUFBUTs7WUFDNUMsZUFBZSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUzs7WUFDeEMsZUFBZSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZO2dDQUV6RCxDQUFDOztnQkFDQSxPQUFPLEdBQWdCLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDeEMsSUFBSSxPQUFLLFdBQVcsQ0FBQyxJQUFJOzs7O1lBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxPQUFPLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEVBQS9ELENBQStELEVBQUMsRUFBRTtnQkFDL0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsZUFBZSxDQUFDLElBQUksZUFBZSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxHQUFHLE9BQUssYUFBYSxFQUFFO29CQUMzRyxRQUFRLEdBQUcsT0FBTyxDQUFDO2lCQUN0QjthQUNKOzs7UUFOTCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7b0JBQS9CLENBQUM7U0FPVDtRQUVELElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLFFBQVEsS0FBSyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2pFLElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDO1lBQzlCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUMzQztJQUNMLENBQUM7O2dCQWpFSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGVBQWU7aUJBQzVCOzs7O2dCQVBtQixVQUFVOzs7OEJBWXpCLEtBQUs7NEJBTUwsS0FBSztnQ0FRTCxLQUFLOytCQU9MLEtBQUs7NEJBT0wsTUFBTTsyQkFVTixZQUFZLFNBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDOztJQXNCdEMseUJBQUM7Q0FBQSxBQW5FRCxJQW1FQztTQWhFWSxrQkFBa0I7Ozs7OztJQUkzQix5Q0FDa0M7Ozs7O0lBS2xDLHVDQUNrQzs7Ozs7OztJQU9sQywyQ0FDaUM7Ozs7OztJQU1qQywwQ0FDZ0M7Ozs7OztJQU1oQyx1Q0FDdUY7Ozs7OztJQUd2RiwyQ0FBbUM7Ozs7O0lBR3ZCLG1DQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBBIGRpcmVjdGl2ZSBkZXNpZ25lZCB0byBoZWxwIG5hdmlnYXRpb24gZWxlbWVudHMgZGV0ZXJtaW5lIHRoZSBlbGVtZW50IGN1cnJlbnRseSBpbiB2aWV3IG9mIHRoZSB1c2VyLlxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tmZFNjcm9sbFNweV0nXG59KVxuZXhwb3J0IGNsYXNzIFNjcm9sbFNweURpcmVjdGl2ZSB7XG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgdGFncyB0byB0cmFjay5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyB0cmFja2VkVGFnczogc3RyaW5nW10gPSBbXTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgZXZlbnRzIGFyZSBzdGlsbCBmaXJlZCBpZiB0aGVyZSBpcyBubyB0YWcgcHJlc2VudCBvbiB0aGUgdXNlcidzIHNjcmVlbi5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBmaXJlRW1wdHk6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEEgbnVtYmVyIHRoYXQgcmVwcmVzZW50IGF0IHdoYXQgbG9jYXRpb24gaW4gdGhlIGNvbnRhaW5lciB0aGUgZXZlbnQgaXMgZmlyZWQuXG4gICAgICogMC41IHdvdWxkIGZpcmUgdGhlIGV2ZW50cyBpbiB0aGUgbWlkZGxlIG9mIHRoZSBjb250YWluZXIsXG4gICAgICogMCBmb3IgdGhlIHRvcCBhbmQgMSBmb3IgdGhlIGJvdHRvbS5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyB0YXJnZXRQZXJjZW50OiBudW1iZXIgPSAwO1xuXG4gICAgLyoqXG4gICAgICogTnVtYmVyIHRoYXQgcmVwcmVzZW50cyB0aGUgb2Zmc2V0IGluIHBpeGVscyBmb3IgZmlyZWQgdGFyZ2V0LiBgMTAwYCB2YWx1ZSBtZWFucyB0aGF0IHRoZSBldmVudCB3aWxsIGJlIGZpcmVkIGZvclxuICAgICAqIHRhcmdldCB0aGF0IGlzIDEwMCBwaXhlbHMgYmVsb3cgdGhlIHNweSBjb250YWluZXIuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgdGFyZ2V0T2Zmc2V0OiBudW1iZXIgPSAwO1xuXG4gICAgLyoqXG4gICAgICogRXZlbnQgZmlyZWQgb24gdGhlIHNjcm9sbCBlbGVtZW50IHdoZW4gYSBuZXcgaXRlbSBiZWNvbWVzIGFjdGl2YXRlZCBieSB0aGUgc2Nyb2xsc3B5IC5cbiAgICAgKiBUaGUgcmV0dXJuZWQgdmFsdWUgaXMgdGhlIEhUTUxFbGVtZW50IGl0c2VsZi5cbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3B5Q2hhbmdlOiBFdmVudEVtaXR0ZXI8SFRNTEVsZW1lbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxIVE1MRWxlbWVudD4oKTtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgcHJpdmF0ZSBjdXJyZW50QWN0aXZlOiBIVE1MRWxlbWVudDtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbFJlZjogRWxlbWVudFJlZikge31cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQEhvc3RMaXN0ZW5lcignc2Nyb2xsJywgWyckZXZlbnQnXSlcbiAgICBvblNjcm9sbChldmVudDogYW55KSB7XG4gICAgICAgIGxldCBzcGllZFRhZzogSFRNTEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LmNoaWxkcmVuO1xuICAgICAgICBjb25zdCB0YXJnZXRTY3JvbGxUb3AgPSBldmVudC50YXJnZXQuc2Nyb2xsVG9wO1xuICAgICAgICBjb25zdCB0YXJnZXRPZmZzZXRUb3AgPSBldmVudC50YXJnZXQub2Zmc2V0VG9wICsgdGhpcy50YXJnZXRPZmZzZXQ7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudDogSFRNTEVsZW1lbnQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrZWRUYWdzLnNvbWUodGFnID0+IHRhZy50b0xvY2FsZVVwcGVyQ2FzZSgpID09PSBlbGVtZW50LnRhZ05hbWUudG9Mb2NhbGVVcHBlckNhc2UoKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoKGVsZW1lbnQub2Zmc2V0VG9wIC0gdGFyZ2V0T2Zmc2V0VG9wKSA8PSB0YXJnZXRTY3JvbGxUb3AgKyBldmVudC50YXJnZXQub2Zmc2V0SGVpZ2h0ICogdGhpcy50YXJnZXRQZXJjZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHNwaWVkVGFnID0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKHNwaWVkVGFnIHx8IHRoaXMuZmlyZUVtcHR5KSAmJiBzcGllZFRhZyAhPT0gdGhpcy5jdXJyZW50QWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRBY3RpdmUgPSBzcGllZFRhZztcbiAgICAgICAgICAgIHRoaXMuc3B5Q2hhbmdlLmVtaXQodGhpcy5jdXJyZW50QWN0aXZlKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19