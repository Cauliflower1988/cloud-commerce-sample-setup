/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { InputGroupInputDirective } from '../input-group/input-group-directives';
/**
 * Directive which is used along with input elements, inside the localization editor item or main.
 *  ```html
 *  <fd-localization-editor-item>
 *      <input fd-localization-editor-input type="text" placeholder="EN">
 *  </fd-localization-editor-item>
 *  ```
 */
export class LocalizationEditorInputDirective {
    constructor() {
        /**
         * @hidden
         */
        this.inputGroupDirective = new InputGroupInputDirective();
    }
}
LocalizationEditorInputDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-localization-editor-input]'
            },] }
];
LocalizationEditorInputDirective.propDecorators = {
    inputGroupDirective: [{ type: HostBinding, args: ['attr.fd-input-group-input',] }],
    compact: [{ type: HostBinding, args: ['class.fd-input--compact',] }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    LocalizationEditorInputDirective.prototype.inputGroupDirective;
    /**
     * @hidden
     *  Variable is controlled by parent component and define if there should be used compact mode
     *
     * @type {?}
     */
    LocalizationEditorInputDirective.prototype.compact;
}
/**
 * Directive which is used along with textarea elements, inside the localization editor item or main.
 *  ```html
 *  <fd-localization-editor-item>
 *      <textarea fd-localization-editor-input placeholder="EN">
 *  </fd-localization-editor-item>
 *  ```
 */
export class LocalizationEditorTextareaDirective {
    constructor() {
        /**
         * @hidden
         */
        this.inputGroupDirective = new InputGroupInputDirective();
        /**
         * @hidden
         */
        this.fdLocalizationEditorTextareaClass = true;
    }
}
LocalizationEditorTextareaDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-localization-editor-textarea]',
            },] }
];
LocalizationEditorTextareaDirective.propDecorators = {
    inputGroupDirective: [{ type: HostBinding, args: ['attr.fd-input-group-input',] }],
    compact: [{ type: HostBinding, args: ['class.fd-input--compact',] }],
    fdLocalizationEditorTextareaClass: [{ type: HostBinding, args: ['class.fd-localization-editor-textarea',] }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    LocalizationEditorTextareaDirective.prototype.inputGroupDirective;
    /**
     * @hidden
     *  Variable is controlled by parent component and define if there should be used compact mode
     *
     * @type {?}
     */
    LocalizationEditorTextareaDirective.prototype.compact;
    /**
     * @hidden
     * @type {?}
     */
    LocalizationEditorTextareaDirective.prototype.fdLocalizationEditorTextareaClass;
}
/**
 * Directive which is used to add complex content, which will be displayed in the add-on space.
 *  ```html
 *  <fd-localization-editor-item>
 *      <ng-template fd-localization-editor-label>
 *          <fd-icon [glyph]="field.glyph"></fd-icon>
 *      </ng-template>
 *      <textarea fd-localization-editor-input placeholder="EN">
 *  </fd-localization-editor-item>
 *  ```
 *
 */
export class LocalizationEditorLabel {
}
LocalizationEditorLabel.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-localization-editor-label]',
            },] }
];
/**
 * Directive that is used to wrap whole localization field inside li element.
 *  ```html
 *  <li fd-localization-editor-element>
 *      <fd-localization-editor-item>
 *          <textarea fd-localization-editor-input placeholder="EN">
 *      </fd-localization-editor-item>
 *  </li>
 *  ```
 *
 */
export class LocalizationEditorElement {
}
LocalizationEditorElement.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-localization-editor-element]',
            },] }
];
/**
 * Not for external use. Portal to render the complex title template.
 */
export class LocalizationEditorLoadLabel {
    /**
     * @hidden
     * @param {?} viewRef
     */
    constructor(viewRef) {
        this.viewRef = viewRef;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        this.viewRef.clear();
        this.contentRef = this.viewRef.createEmbeddedView(this.content);
    }
}
LocalizationEditorLoadLabel.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-localization-editor-load-label]'
            },] }
];
/** @nocollapse */
LocalizationEditorLoadLabel.ctorParameters = () => [
    { type: ViewContainerRef }
];
LocalizationEditorLoadLabel.propDecorators = {
    content: [{ type: Input, args: ['fd-localization-editor-load-label',] }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    LocalizationEditorLoadLabel.prototype.content;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    LocalizationEditorLoadLabel.prototype.contentRef;
    /**
     * @type {?}
     * @private
     */
    LocalizationEditorLoadLabel.prototype.viewRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxpemF0aW9uLWVkaXRvci5kaXJlY3RpdmVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL2xvY2FsaXphdG9yLWVkaXRvci9sb2NhbGl6YXRpb24tZWRpdG9yLmRpcmVjdGl2ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQW1CLFdBQVcsRUFBRSxLQUFLLEVBQVUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RILE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDOzs7Ozs7Ozs7QUFjakYsTUFBTSxPQUFPLGdDQUFnQztJQUo3Qzs7OztRQVFJLHdCQUFtQixHQUE2QixJQUFJLHdCQUF3QixFQUFFLENBQUM7SUFRbkYsQ0FBQzs7O1lBaEJBLFNBQVMsU0FBQzs7Z0JBRVAsUUFBUSxFQUFFLGdDQUFnQzthQUM3Qzs7O2tDQUlJLFdBQVcsU0FBQywyQkFBMkI7c0JBT3ZDLFdBQVcsU0FBQyx5QkFBeUI7Ozs7Ozs7SUFQdEMsK0RBQytFOzs7Ozs7O0lBTS9FLG1EQUN3Qjs7Ozs7Ozs7OztBQWU1QixNQUFNLE9BQU8sbUNBQW1DO0lBSmhEOzs7O1FBUUksd0JBQW1CLEdBQTZCLElBQUksd0JBQXdCLEVBQUUsQ0FBQzs7OztRQWF4RSxzQ0FBaUMsR0FBWSxJQUFJLENBQUM7SUFDN0QsQ0FBQzs7O1lBdEJBLFNBQVMsU0FBQzs7Z0JBRVAsUUFBUSxFQUFFLG1DQUFtQzthQUNoRDs7O2tDQUlJLFdBQVcsU0FBQywyQkFBMkI7c0JBT3ZDLFdBQVcsU0FBQyx5QkFBeUI7Z0RBTXJDLFdBQVcsU0FBQyx1Q0FBdUM7Ozs7Ozs7SUFicEQsa0VBQytFOzs7Ozs7O0lBTS9FLHNEQUN3Qjs7Ozs7SUFLeEIsZ0ZBQ3lEOzs7Ozs7Ozs7Ozs7OztBQWtCN0QsTUFBTSxPQUFPLHVCQUF1Qjs7O1lBSm5DLFNBQVMsU0FBQzs7Z0JBRVAsUUFBUSxFQUFFLGdDQUFnQzthQUM3Qzs7Ozs7Ozs7Ozs7OztBQWlCRCxNQUFNLE9BQU8seUJBQXlCOzs7WUFKckMsU0FBUyxTQUFDOztnQkFFUCxRQUFRLEVBQUUsa0NBQWtDO2FBQy9DOzs7OztBQVVELE1BQU0sT0FBTywyQkFBMkI7Ozs7O0lBU3BDLFlBQW9CLE9BQXlCO1FBQXpCLFlBQU8sR0FBUCxPQUFPLENBQWtCO0lBQUcsQ0FBQzs7Ozs7SUFHakQsUUFBUTtRQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwRSxDQUFDOzs7WUFuQkosU0FBUyxTQUFDOztnQkFFUCxRQUFRLEVBQUUscUNBQXFDO2FBQ2xEOzs7O1lBcEc2RSxnQkFBZ0I7OztzQkF1R3pGLEtBQUssU0FBQyxtQ0FBbUM7Ozs7Ozs7SUFBMUMsOENBQzBCOzs7Ozs7SUFHMUIsaURBQXlDOzs7OztJQUc3Qiw4Q0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVtYmVkZGVkVmlld1JlZiwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkluaXQsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJbnB1dEdyb3VwSW5wdXREaXJlY3RpdmUgfSBmcm9tICcuLi9pbnB1dC1ncm91cC9pbnB1dC1ncm91cC1kaXJlY3RpdmVzJztcblxuLyoqXG4gKiBEaXJlY3RpdmUgd2hpY2ggaXMgdXNlZCBhbG9uZyB3aXRoIGlucHV0IGVsZW1lbnRzLCBpbnNpZGUgdGhlIGxvY2FsaXphdGlvbiBlZGl0b3IgaXRlbSBvciBtYWluLlxuICogIGBgYGh0bWxcbiAqICA8ZmQtbG9jYWxpemF0aW9uLWVkaXRvci1pdGVtPlxuICogICAgICA8aW5wdXQgZmQtbG9jYWxpemF0aW9uLWVkaXRvci1pbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiRU5cIj5cbiAqICA8L2ZkLWxvY2FsaXphdGlvbi1lZGl0b3ItaXRlbT5cbiAqICBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnW2ZkLWxvY2FsaXphdGlvbi1lZGl0b3ItaW5wdXRdJ1xufSlcbmV4cG9ydCBjbGFzcyBMb2NhbGl6YXRpb25FZGl0b3JJbnB1dERpcmVjdGl2ZSB7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIEBIb3N0QmluZGluZygnYXR0ci5mZC1pbnB1dC1ncm91cC1pbnB1dCcpXG4gICAgaW5wdXRHcm91cERpcmVjdGl2ZTogSW5wdXRHcm91cElucHV0RGlyZWN0aXZlID0gbmV3IElucHV0R3JvdXBJbnB1dERpcmVjdGl2ZSgpO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqICBWYXJpYWJsZSBpcyBjb250cm9sbGVkIGJ5IHBhcmVudCBjb21wb25lbnQgYW5kIGRlZmluZSBpZiB0aGVyZSBzaG91bGQgYmUgdXNlZCBjb21wYWN0IG1vZGVcbiAgICAgKiAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmQtaW5wdXQtLWNvbXBhY3QnKVxuICAgIHB1YmxpYyBjb21wYWN0OiBib29sZWFuO1xufVxuXG4vKipcbiAqIERpcmVjdGl2ZSB3aGljaCBpcyB1c2VkIGFsb25nIHdpdGggdGV4dGFyZWEgZWxlbWVudHMsIGluc2lkZSB0aGUgbG9jYWxpemF0aW9uIGVkaXRvciBpdGVtIG9yIG1haW4uXG4gKiAgYGBgaHRtbFxuICogIDxmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWl0ZW0+XG4gKiAgICAgIDx0ZXh0YXJlYSBmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWlucHV0IHBsYWNlaG9sZGVyPVwiRU5cIj5cbiAqICA8L2ZkLWxvY2FsaXphdGlvbi1lZGl0b3ItaXRlbT5cbiAqICBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnW2ZkLWxvY2FsaXphdGlvbi1lZGl0b3ItdGV4dGFyZWFdJyxcbn0pXG5leHBvcnQgY2xhc3MgTG9jYWxpemF0aW9uRWRpdG9yVGV4dGFyZWFEaXJlY3RpdmUge1xuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuZmQtaW5wdXQtZ3JvdXAtaW5wdXQnKVxuICAgIGlucHV0R3JvdXBEaXJlY3RpdmU6IElucHV0R3JvdXBJbnB1dERpcmVjdGl2ZSA9IG5ldyBJbnB1dEdyb3VwSW5wdXREaXJlY3RpdmUoKTtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiAgVmFyaWFibGUgaXMgY29udHJvbGxlZCBieSBwYXJlbnQgY29tcG9uZW50IGFuZCBkZWZpbmUgaWYgdGhlcmUgc2hvdWxkIGJlIHVzZWQgY29tcGFjdCBtb2RlXG4gICAgICogKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmZkLWlucHV0LS1jb21wYWN0JylcbiAgICBwdWJsaWMgY29tcGFjdDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmZkLWxvY2FsaXphdGlvbi1lZGl0b3ItdGV4dGFyZWEnKVxuICAgIHB1YmxpYyBmZExvY2FsaXphdGlvbkVkaXRvclRleHRhcmVhQ2xhc3M6IGJvb2xlYW4gPSB0cnVlO1xufVxuXG4vKipcbiAqIERpcmVjdGl2ZSB3aGljaCBpcyB1c2VkIHRvIGFkZCBjb21wbGV4IGNvbnRlbnQsIHdoaWNoIHdpbGwgYmUgZGlzcGxheWVkIGluIHRoZSBhZGQtb24gc3BhY2UuXG4gKiAgYGBgaHRtbFxuICogIDxmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWl0ZW0+XG4gKiAgICAgIDxuZy10ZW1wbGF0ZSBmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWxhYmVsPlxuICogICAgICAgICAgPGZkLWljb24gW2dseXBoXT1cImZpZWxkLmdseXBoXCI+PC9mZC1pY29uPlxuICogICAgICA8L25nLXRlbXBsYXRlPlxuICogICAgICA8dGV4dGFyZWEgZmQtbG9jYWxpemF0aW9uLWVkaXRvci1pbnB1dCBwbGFjZWhvbGRlcj1cIkVOXCI+XG4gKiAgPC9mZC1sb2NhbGl6YXRpb24tZWRpdG9yLWl0ZW0+XG4gKiAgYGBgXG4gKiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnW2ZkLWxvY2FsaXphdGlvbi1lZGl0b3ItbGFiZWxdJyxcbn0pXG5leHBvcnQgY2xhc3MgTG9jYWxpemF0aW9uRWRpdG9yTGFiZWwge31cblxuLyoqXG4gKiBEaXJlY3RpdmUgdGhhdCBpcyB1c2VkIHRvIHdyYXAgd2hvbGUgbG9jYWxpemF0aW9uIGZpZWxkIGluc2lkZSBsaSBlbGVtZW50LlxuICogIGBgYGh0bWxcbiAqICA8bGkgZmQtbG9jYWxpemF0aW9uLWVkaXRvci1lbGVtZW50PlxuICogICAgICA8ZmQtbG9jYWxpemF0aW9uLWVkaXRvci1pdGVtPlxuICogICAgICAgICAgPHRleHRhcmVhIGZkLWxvY2FsaXphdGlvbi1lZGl0b3ItaW5wdXQgcGxhY2Vob2xkZXI9XCJFTlwiPlxuICogICAgICA8L2ZkLWxvY2FsaXphdGlvbi1lZGl0b3ItaXRlbT5cbiAqICA8L2xpPlxuICogIGBgYFxuICogKi9cbkBEaXJlY3RpdmUoe1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcbiAgICBzZWxlY3RvcjogJ1tmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWVsZW1lbnRdJyxcbn0pXG5leHBvcnQgY2xhc3MgTG9jYWxpemF0aW9uRWRpdG9yRWxlbWVudCB7fVxuXG4vKipcbiAqIE5vdCBmb3IgZXh0ZXJuYWwgdXNlLiBQb3J0YWwgdG8gcmVuZGVyIHRoZSBjb21wbGV4IHRpdGxlIHRlbXBsYXRlLlxuICovXG5ARGlyZWN0aXZlKHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdbZmQtbG9jYWxpemF0aW9uLWVkaXRvci1sb2FkLWxhYmVsXSdcbn0pXG5leHBvcnQgY2xhc3MgTG9jYWxpemF0aW9uRWRpdG9yTG9hZExhYmVsIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIEBJbnB1dCgnZmQtbG9jYWxpemF0aW9uLWVkaXRvci1sb2FkLWxhYmVsJylcbiAgICBjb250ZW50OiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBwcml2YXRlIGNvbnRlbnRSZWY6IEVtYmVkZGVkVmlld1JlZjxhbnk+O1xuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXdSZWY6IFZpZXdDb250YWluZXJSZWYpIHt9XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnZpZXdSZWYuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5jb250ZW50UmVmID0gdGhpcy52aWV3UmVmLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLmNvbnRlbnQpO1xuICAgIH1cbn1cbiJdfQ==