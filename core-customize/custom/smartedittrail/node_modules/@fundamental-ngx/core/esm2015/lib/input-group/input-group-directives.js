/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, forwardRef, HostBinding, Input } from '@angular/core';
import { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';
export class InputGroupInputDirective {
}
InputGroupInputDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-input-group-input]',
            },] }
];
export class InputGroupTextareaDirective extends InputGroupInputDirective {
}
InputGroupTextareaDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-textarea-group-input]',
                providers: [{ provide: InputGroupInputDirective, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => InputGroupTextareaDirective)) }]
            },] }
];
export class InputGroupAddOnDirective extends AbstractFdNgxClass {
    /**
     * @hidden
     * @param {?} elementRef
     */
    constructor(elementRef) {
        super(elementRef);
        this.elementRef = elementRef;
        /**
         * @hidden
         */
        this.fdInputGroupAddonClass = true;
        /**
         * The placement of the add-on. Options include *before* and *after*
         */
        this.placement = 'after';
        /**
         * Whether the icon add-on or the text add-on is a button.
         */
        this.button = false;
    }
    /**
     * @hidden
     * @return {?}
     */
    _setProperties() {
        this._addClassToElement('fd-input-group__addon');
        this._addClassToElement('fd-input-group__addon--' + this.placement);
        if (this.button) {
            this._addClassToElement('fd-input-group__addon--button');
        }
        if (this.type) {
            this._addClassToElement('fd-input-group__addon--' + this.type);
        }
    }
}
InputGroupAddOnDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-input-group-addon]'
            },] }
];
/** @nocollapse */
InputGroupAddOnDirective.ctorParameters = () => [
    { type: ElementRef }
];
InputGroupAddOnDirective.propDecorators = {
    fdInputGroupAddonClass: [{ type: HostBinding, args: ['class.fd-input-group__addon',] }],
    placement: [{ type: Input }],
    type: [{ type: Input }],
    button: [{ type: Input }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.fdInputGroupAddonClass;
    /**
     * The placement of the add-on. Options include *before* and *after*
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.placement;
    /**
     * The placement of the add-on. Options include *before* and *after*
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.type;
    /**
     * Whether the icon add-on or the text add-on is a button.
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.button;
    /**
     * @type {?}
     * @private
     */
    InputGroupAddOnDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZ3JvdXAtZGlyZWN0aXZlcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmdW5kYW1lbnRhbC1uZ3gvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9pbnB1dC1ncm91cC9pbnB1dC1ncm91cC1kaXJlY3RpdmVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0RixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQU9wRSxNQUFNLE9BQU8sd0JBQXdCOzs7WUFKcEMsU0FBUyxTQUFDOztnQkFFUCxRQUFRLEVBQUUsd0JBQXdCO2FBQ3JDOztBQVNELE1BQU0sT0FBTywyQkFBNEIsU0FBUSx3QkFBd0I7OztZQUx4RSxTQUFTLFNBQUM7O2dCQUVQLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLFdBQVcsRUFBRSxVQUFVOzs7d0JBQUMsR0FBRyxFQUFFLENBQUMsMkJBQTJCLEVBQUMsRUFBRSxDQUFDO2FBQ2pIOztBQVFELE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxrQkFBa0I7Ozs7O0lBcUM1RCxZQUFvQixVQUFzQjtRQUN0QyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFERixlQUFVLEdBQVYsVUFBVSxDQUFZOzs7O1FBakMxQywyQkFBc0IsR0FBWSxJQUFJLENBQUM7Ozs7UUFNdkMsY0FBUyxHQUF3QixPQUFPLENBQUM7Ozs7UUFZekMsV0FBTSxHQUFZLEtBQUssQ0FBQztJQWlCeEIsQ0FBQzs7Ozs7SUFkRCxjQUFjO1FBQ1YsSUFBSSxDQUFDLGtCQUFrQixDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwRSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDYixJQUFJLENBQUMsa0JBQWtCLENBQUMsK0JBQStCLENBQUMsQ0FBQztTQUM1RDtRQUNELElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNYLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbEU7SUFDTCxDQUFDOzs7WUF0Q0osU0FBUyxTQUFDOztnQkFFUCxRQUFRLEVBQUUsd0JBQXdCO2FBQ3JDOzs7O1lBdEJtQixVQUFVOzs7cUNBMEJ6QixXQUFXLFNBQUMsNkJBQTZCO3dCQU16QyxLQUFLO21CQU1MLEtBQUs7cUJBTUwsS0FBSzs7Ozs7OztJQWxCTiwwREFDdUM7Ozs7O0lBS3ZDLDZDQUN5Qzs7Ozs7SUFLekMsd0NBQ2E7Ozs7O0lBS2IsMENBQ3dCOzs7OztJQWVaLDhDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgZm9yd2FyZFJlZiwgSG9zdEJpbmRpbmcsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBYnN0cmFjdEZkTmd4Q2xhc3MgfSBmcm9tICcuLi91dGlscy9hYnN0cmFjdC1mZC1uZ3gtY2xhc3MnO1xuaW1wb3J0IHsgSW5wdXRHcm91cFBsYWNlbWVudCB9IGZyb20gJy4vaW5wdXQtZ3JvdXAuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnW2ZkLWlucHV0LWdyb3VwLWlucHV0XScsXG59KVxuZXhwb3J0IGNsYXNzIElucHV0R3JvdXBJbnB1dERpcmVjdGl2ZSB7fVxuXG5cbkBEaXJlY3RpdmUoe1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcbiAgICBzZWxlY3RvcjogJ1tmZC10ZXh0YXJlYS1ncm91cC1pbnB1dF0nLFxuICAgIHByb3ZpZGVyczogW3sgcHJvdmlkZTogSW5wdXRHcm91cElucHV0RGlyZWN0aXZlLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBJbnB1dEdyb3VwVGV4dGFyZWFEaXJlY3RpdmUpIH1dXG59KVxuZXhwb3J0IGNsYXNzIElucHV0R3JvdXBUZXh0YXJlYURpcmVjdGl2ZSBleHRlbmRzIElucHV0R3JvdXBJbnB1dERpcmVjdGl2ZSB7fVxuXG5cbkBEaXJlY3RpdmUoe1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcbiAgICBzZWxlY3RvcjogJ1tmZC1pbnB1dC1ncm91cC1hZGRvbl0nXG59KVxuZXhwb3J0IGNsYXNzIElucHV0R3JvdXBBZGRPbkRpcmVjdGl2ZSBleHRlbmRzIEFic3RyYWN0RmROZ3hDbGFzcyB7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmQtaW5wdXQtZ3JvdXBfX2FkZG9uJylcbiAgICBmZElucHV0R3JvdXBBZGRvbkNsYXNzOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBwbGFjZW1lbnQgb2YgdGhlIGFkZC1vbi4gT3B0aW9ucyBpbmNsdWRlICpiZWZvcmUqIGFuZCAqYWZ0ZXIqXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwbGFjZW1lbnQ6IElucHV0R3JvdXBQbGFjZW1lbnQgPSAnYWZ0ZXInO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHBsYWNlbWVudCBvZiB0aGUgYWRkLW9uLiBPcHRpb25zIGluY2x1ZGUgKmJlZm9yZSogYW5kICphZnRlcipcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHR5cGU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGljb24gYWRkLW9uIG9yIHRoZSB0ZXh0IGFkZC1vbiBpcyBhIGJ1dHRvbi5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGJ1dHRvbjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBfc2V0UHJvcGVydGllcygpIHtcbiAgICAgICAgdGhpcy5fYWRkQ2xhc3NUb0VsZW1lbnQoJ2ZkLWlucHV0LWdyb3VwX19hZGRvbicpO1xuICAgICAgICB0aGlzLl9hZGRDbGFzc1RvRWxlbWVudCgnZmQtaW5wdXQtZ3JvdXBfX2FkZG9uLS0nICsgdGhpcy5wbGFjZW1lbnQpO1xuICAgICAgICBpZiAodGhpcy5idXR0b24pIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZENsYXNzVG9FbGVtZW50KCdmZC1pbnB1dC1ncm91cF9fYWRkb24tLWJ1dHRvbicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZENsYXNzVG9FbGVtZW50KCdmZC1pbnB1dC1ncm91cF9fYWRkb24tLScgKyB0aGlzLnR5cGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudFJlZik7XG4gICAgfVxuXG59XG4iXX0=