/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { AbstractControl } from '@angular/forms';
import { Observable } from 'rxjs';
import { ComponentType } from './interfaces';
import { InputProperties, InputPropertyChange } from './input-properties';
export declare abstract class AbstractForm {
    readonly component: ComponentType;
    readonly control: AbstractControl;
    readonly inputs: InputProperties;
    readonly persist: boolean;
    parent: AbstractForm | null;
    /**
     * Listen onto any property changes triggered by 'setInput' method.
     *
     * @type {Observable<InputPropertyChange>}
     */
    readonly inputChanges: Observable<InputPropertyChange>;
    protected constructor(component: ComponentType, control: AbstractControl, inputs: InputProperties, persist: boolean, parent?: AbstractForm | null);
    /**
     * Get mapped values of fields to be persisted.
     */
    abstract getPersistedValue(): any;
    /**
     * Sets property and marks components for changes if property is decorated
     * with FormProperty.
     *
     * @param {keyof T} key
     * @param {T[keyof T]} value
     */
    setInput<T>(key: keyof T, value: T[keyof T]): void;
    /**
     * Retrieves a property.
     *
     * @param {keyof T} key
     * @returns {T[keyof T] | undefined}
     */
    getInput<T>(key: keyof T): T[keyof T] | undefined;
    /**
     * Returns root form.
     */
    readonly root: AbstractForm;
}
