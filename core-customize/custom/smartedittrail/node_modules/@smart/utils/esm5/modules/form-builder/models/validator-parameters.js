/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { isUndefined, omitBy } from 'lodash';
/**
 * ValidatorParameters holds data to the synchronous and
 * asynchronous validators configuration for a FormField.
 */
var ValidatorParameters = /** @class */ (function () {
    function ValidatorParameters(validators, asyncValidators) {
        if (validators === void 0) { validators = {}; }
        if (asyncValidators === void 0) { asyncValidators = {}; }
        this.validators = {};
        this.asyncValidators = {};
        this.validators = this._omitUndefinedValues(validators);
        this.asyncValidators = this._omitUndefinedValues(asyncValidators);
    }
    /**
     * Determines if synchronous validator exists.
     *
     * @param name The name of the synchronous validator.
     * @returns A boolean if it has that parameter.
     */
    ValidatorParameters.prototype.has = function (name) {
        return this.validators.hasOwnProperty(name);
    };
    /**
     * Returns parameters of the synchronous validator.
     *
     * @param name The name of the synchronous validator.
     * @returns The param of the validator.
     */
    ValidatorParameters.prototype.getParam = function (name) {
        if (!this.has(name)) {
            return null;
        }
        return this.validators[name];
    };
    /**
     * Determines if asynchronous validator exists.
     *
     * @param name The name of the asynchronous validator.
     * @returns A boolean if it has that parameter.
     */
    ValidatorParameters.prototype.hasAsync = function (name) {
        return this.asyncValidators.hasOwnProperty(name);
    };
    /**
     * Returns parameters of the asynchronous validator.
     *
     * @param name The name of the asynchronous validator.
     * @returns The param of the validator.
     */
    ValidatorParameters.prototype.getAsyncParam = function (name) {
        if (!this.hasAsync(name)) {
            return null;
        }
        return this.asyncValidators[name];
    };
    /**
     * @internal
     * Returns a object with all those keys that have
     * undefined values.
     */
    ValidatorParameters.prototype._omitUndefinedValues = function (object) {
        return omitBy(object, isUndefined);
    };
    return ValidatorParameters;
}());
export { ValidatorParameters };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9yLXBhcmFtZXRlcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac21hcnQvdXRpbHMvIiwic291cmNlcyI6WyJtb2R1bGVzL2Zvcm0tYnVpbGRlci9tb2RlbHMvdmFsaWRhdG9yLXBhcmFtZXRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBQ0gsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFN0M7OztHQUdHO0FBQ0g7SUFJSSw2QkFDSSxVQUF5QyxFQUN6QyxlQUE4QztRQUQ5QywyQkFBQSxFQUFBLGVBQXlDO1FBQ3pDLGdDQUFBLEVBQUEsb0JBQThDO1FBTDNDLGVBQVUsR0FBNkIsRUFBRSxDQUFDO1FBQzFDLG9CQUFlLEdBQTZCLEVBQUUsQ0FBQztRQU1sRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxpQ0FBRyxHQUFILFVBQUksSUFBWTtRQUNaLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsc0NBQVEsR0FBUixVQUFTLElBQVk7UUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakIsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxzQ0FBUSxHQUFSLFVBQVMsSUFBWTtRQUNqQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILDJDQUFhLEdBQWIsVUFBYyxJQUFZO1FBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSyxrREFBb0IsR0FBNUIsVUFBNkIsTUFBZ0M7UUFDekQsT0FBTyxNQUFNLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDTCwwQkFBQztBQUFELENBQUMsQUFsRUQsSUFrRUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBTQVAgU0Ugb3IgYW4gU0FQIGFmZmlsaWF0ZSBjb21wYW55LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQG1vZHVsZSBzbWFydHV0aWxzXG4gKi9cbmltcG9ydCB7IGlzVW5kZWZpbmVkLCBvbWl0QnkgfSBmcm9tICdsb2Rhc2gnO1xuXG4vKipcbiAqIFZhbGlkYXRvclBhcmFtZXRlcnMgaG9sZHMgZGF0YSB0byB0aGUgc3luY2hyb25vdXMgYW5kXG4gKiBhc3luY2hyb25vdXMgdmFsaWRhdG9ycyBjb25maWd1cmF0aW9uIGZvciBhIEZvcm1GaWVsZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFZhbGlkYXRvclBhcmFtZXRlcnMge1xuICAgIHB1YmxpYyB2YWxpZGF0b3JzOiB7IFtpbmRleDogc3RyaW5nXTogYW55IH0gPSB7fTtcbiAgICBwdWJsaWMgYXN5bmNWYWxpZGF0b3JzOiB7IFtpbmRleDogc3RyaW5nXTogYW55IH0gPSB7fTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICB2YWxpZGF0b3JzOiB7IFtpbmRleDogc3RyaW5nXTogYW55IH0gPSB7fSxcbiAgICAgICAgYXN5bmNWYWxpZGF0b3JzOiB7IFtpbmRleDogc3RyaW5nXTogYW55IH0gPSB7fVxuICAgICkge1xuICAgICAgICB0aGlzLnZhbGlkYXRvcnMgPSB0aGlzLl9vbWl0VW5kZWZpbmVkVmFsdWVzKHZhbGlkYXRvcnMpO1xuICAgICAgICB0aGlzLmFzeW5jVmFsaWRhdG9ycyA9IHRoaXMuX29taXRVbmRlZmluZWRWYWx1ZXMoYXN5bmNWYWxpZGF0b3JzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHN5bmNocm9ub3VzIHZhbGlkYXRvciBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgc3luY2hyb25vdXMgdmFsaWRhdG9yLlxuICAgICAqIEByZXR1cm5zIEEgYm9vbGVhbiBpZiBpdCBoYXMgdGhhdCBwYXJhbWV0ZXIuXG4gICAgICovXG4gICAgaGFzKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0b3JzLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgcGFyYW1ldGVycyBvZiB0aGUgc3luY2hyb25vdXMgdmFsaWRhdG9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIHN5bmNocm9ub3VzIHZhbGlkYXRvci5cbiAgICAgKiBAcmV0dXJucyBUaGUgcGFyYW0gb2YgdGhlIHZhbGlkYXRvci5cbiAgICAgKi9cbiAgICBnZXRQYXJhbShuYW1lOiBzdHJpbmcpOiBudWxsIHwgYW55IHtcbiAgICAgICAgaWYgKCF0aGlzLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdG9yc1tuYW1lXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIGFzeW5jaHJvbm91cyB2YWxpZGF0b3IgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIGFzeW5jaHJvbm91cyB2YWxpZGF0b3IuXG4gICAgICogQHJldHVybnMgQSBib29sZWFuIGlmIGl0IGhhcyB0aGF0IHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBoYXNBc3luYyhuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXN5bmNWYWxpZGF0b3JzLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgcGFyYW1ldGVycyBvZiB0aGUgYXN5bmNocm9ub3VzIHZhbGlkYXRvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBhc3luY2hyb25vdXMgdmFsaWRhdG9yLlxuICAgICAqIEByZXR1cm5zIFRoZSBwYXJhbSBvZiB0aGUgdmFsaWRhdG9yLlxuICAgICAqL1xuICAgIGdldEFzeW5jUGFyYW0obmFtZTogc3RyaW5nKTogbnVsbCB8IGFueSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNBc3luYyhuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYXN5bmNWYWxpZGF0b3JzW25hbWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIFJldHVybnMgYSBvYmplY3Qgd2l0aCBhbGwgdGhvc2Uga2V5cyB0aGF0IGhhdmVcbiAgICAgKiB1bmRlZmluZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIHByaXZhdGUgX29taXRVbmRlZmluZWRWYWx1ZXMob2JqZWN0OiB7IFtpbmRleDogc3RyaW5nXTogYW55IH0pOiB7IFtpbmRleDogc3RyaW5nXTogYW55IH0ge1xuICAgICAgICByZXR1cm4gb21pdEJ5KG9iamVjdCwgaXNVbmRlZmluZWQpO1xuICAgIH1cbn1cbiJdfQ==