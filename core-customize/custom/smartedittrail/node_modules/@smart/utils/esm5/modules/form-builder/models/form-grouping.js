/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
import { AbstractForm } from './abstract-form';
/**
 * A FormGrouping is used to encapsulate form data
 * of objects.
 */
var FormGrouping = /** @class */ (function (_super) {
    tslib_1.__extends(FormGrouping, _super);
    function FormGrouping(component, control, inputs, persist, parent, forms) {
        if (forms === void 0) { forms = {}; }
        var _this = _super.call(this, component, control, inputs, persist, parent) || this;
        _this.forms = forms;
        Object.keys(_this.forms).forEach(function (key) {
            _this.forms[key].parent = _this;
        });
        return _this;
    }
    /**
     * Adds a form element to the group.
     *
     * @param name
     * @param form
     */
    FormGrouping.prototype.addFormElement = function (name, form) {
        var _a;
        this.forms = tslib_1.__assign({}, this.forms, (_a = {}, _a[name] = form, _a));
        this.control.addControl(name, form.control);
        form.parent = this;
    };
    /**
     * Removes a form element from the group.
     *
     * @param {string} name
     */
    FormGrouping.prototype.removeFormElement = function (name) {
        if (!this.forms[name]) {
            return;
        }
        var _a = this.forms, _b = name, deleted = _a[_b], forms = tslib_1.__rest(_a, [typeof _b === "symbol" ? _b : _b + ""]);
        this.forms = forms;
        deleted.parent = null;
        this.control.removeControl(name);
    };
    /**
     * Get form element based on the string path.
     *
     * @param paths A dot notation path to the nested abstract form.
     * @returns Returns the AbstractForm based on the path. null if the child does not exists.
     */
    FormGrouping.prototype.getFormElement = function (paths) {
        return (Array.isArray(paths) ? paths : paths.split('.')).reduce(function (acc, path) {
            if (!acc || !acc.forms) {
                return null;
            }
            return acc.forms[path];
        }, this);
    };
    /**
     * Manually sets nested errors to each FormControl.
     *
     * Note: Method should be called on the next rendering cycle and not on the initialization of the form. Should be
     * used to enforce backend validation.
     *
     * @param errors
     */
    FormGrouping.prototype.setNestedErrors = function (errors) {
        var _this = this;
        if (errors === void 0) { errors = []; }
        errors.forEach(function (_a) {
            var _b = tslib_1.__read(_a, 2), path = _b[0], validationErrors = _b[1];
            var form = _this.getFormElement(path);
            /**
             * Fail if the form does not exist.
             */
            if (!form) {
                throw new Error("FormGrouping - Path not found when setting nested error: " + path);
            }
            form.control.setErrors(validationErrors);
        });
    };
    /**
     * Returns value of persistable nodes.
     * @return any
     */
    FormGrouping.prototype.getPersistedValue = function () {
        var _this = this;
        return Object.keys(this.forms).reduce(function (acc, key) {
            var child = _this.forms[key];
            /**
             * Look ahead and if nested does not want to be mapped, merge the nested object with
             * the current object.
             *
             * If it's a field, then it's undefined.
             *
             * If it's a group, then it will be merged.
             */
            if (!child.persist) {
                return tslib_1.__assign({}, acc, child.getPersistedValue());
            }
            acc[key] = child.getPersistedValue();
            return acc;
        }, {});
    };
    return FormGrouping;
}(AbstractForm));
export { FormGrouping };
//# sourceMappingURL=data:application/json;base64,