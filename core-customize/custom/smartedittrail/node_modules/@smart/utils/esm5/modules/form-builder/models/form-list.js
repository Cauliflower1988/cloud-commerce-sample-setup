/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
import { values } from 'lodash';
import { AbstractForm } from './abstract-form';
var FormList = /** @class */ (function (_super) {
    tslib_1.__extends(FormList, _super);
    function FormList(component, control, inputs, parent, persist, forms) {
        if (forms === void 0) { forms = []; }
        var _this = _super.call(this, component, control, inputs, persist, parent) || this;
        _this.forms = forms;
        forms.forEach(function (child) {
            child.parent = _this;
        });
        return _this;
    }
    /**
     * @override
     * Implements the abstract getPersistedValue() method.
     */
    FormList.prototype.getPersistedValue = function () {
        return this.forms.reduce(function (acc, child) {
            if (!child.persist) {
                /**
                 * Look ahead and merge the values of the
                 * nested group, array or field.
                 *
                 * If it's a field, the values of the field
                 * would be an empty array, because it's not an object.
                 */
                return acc.concat(values(child.getPersistedValue()));
            }
            acc.push(child.getPersistedValue());
            return acc;
        }, []);
    };
    /**
     * Adds a form element to the end of the list.
     *
     * @param form
     */
    FormList.prototype.addFormElement = function (form) {
        this.forms = tslib_1.__spread(this.forms, [form]);
        this.control.push(form.control);
        form.parent = this;
    };
    /**
     * Removes a form element from the list.
     *
     * @param {string} index.
     */
    FormList.prototype.removeFormElement = function (index) {
        if (!this._isInBounds(index)) {
            return;
        }
        this.forms = this.forms.filter(function (f, i) { return i !== index; });
        this.control.removeAt(index);
    };
    /**
     * Returns an element at an index.
     *
     * @param index An index inbounds of the list.
     */
    FormList.prototype.formElementAt = function (index) {
        if (!this._isInBounds(index)) {
            return null;
        }
        return this.forms[index];
    };
    /**
     * The size of the list.
     */
    FormList.prototype.size = function () {
        return this.forms.length;
    };
    /**
     * Swaps a form element in the array.
     *
     * @param a The index of form a.
     * @param b The index of form b.
     */
    FormList.prototype.swapFormElements = function (a, b) {
        if (!this._isInBounds(a) || !this._isInBounds(b) || a === b) {
            return;
        }
        this.forms = tslib_1.__spread(this.forms);
        /**
         * Swapping form array.
         */
        var form = this.forms[a];
        this.forms[a] = this.forms[b];
        this.forms[b] = form;
        /**
         * Swapping control's array.
         */
        var control = this.control.at(a);
        this.control.insert(a, this.control.at(b));
        this.control.insert(b, control);
    };
    /**
     * Moves a form element in the array to a new position.
     *
     * @param from The previous index.
     * @param to The targeted index.
     */
    FormList.prototype.moveFormElement = function (from, to) {
        if (!this._isInBounds(from) || !this._isInBounds(to) || from === to) {
            return;
        }
        var delta = to < from ? -1 : 1;
        var tempControl = this.control.at(from);
        var tempForm = this.forms[from];
        for (var i = from; i !== to; i += delta) {
            var position = i + delta;
            this.control.setControl(i, this.control.at(position));
            this.forms[i] = this.forms[position];
        }
        this.control.setControl(to, tempControl);
        this.forms[to] = tempForm;
    };
    /**
     * Checks of the index is in bounds.
     *
     * @internal
     * @param index
     */
    FormList.prototype._isInBounds = function (index) {
        return index < this.forms.length && index >= 0;
    };
    return FormList;
}(AbstractForm));
export { FormList };
//# sourceMappingURL=data:application/json;base64,