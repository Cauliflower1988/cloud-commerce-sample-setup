/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
import { forwardRef, Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BaseValueAccessor } from '../../utils/base-value-accessor';
/**
 * @ngdoc component
 * @name  @smartutils.components:SelectComponent
 *
 * @description
 * Dropdown component allowing to select item from dropdown
 *
 * @param {ISelectItem<T>[]} items Items to displayed in dropdown
 * @param {ISelectItem<T>} initialValue Value dropdown should be initialized with
 * @param {string} placeholder String to be displayed when value is not selected
 * @param {Boolean} isKeyboardControlEnabled Flag enabling dropdown items selection with arrow keys
 * @param {Boolean} hasCustomTrigger If set true the trigger opening the dropdown will be set by user
 */
var SelectComponent = /** @class */ (function (_super) {
    tslib_1.__extends(SelectComponent, _super);
    function SelectComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.items = [];
        _this.initialValue = null;
        _this.placeholder = '';
        _this.isKeyboardControlEnabled = true;
        _this.hasCustomTrigger = false;
        _this.onItemSelected = new EventEmitter();
        return _this;
    }
    SelectComponent_1 = SelectComponent;
    SelectComponent.prototype.selectItem = function (id) {
        var item = this.items.find(function (selected) { return selected.id === id; });
        this.setValue(item);
        this.popover.close();
        this.onItemSelected.emit(item);
    };
    SelectComponent.prototype.ngOnChanges = function (changes) {
        if (changes.initialValue && changes.initialValue.currentValue && !this.value) {
            this.setInitialValue(changes.initialValue.currentValue);
        }
    };
    SelectComponent.prototype.setInitialValue = function (value) {
        if (typeof value === 'number') {
            this.setValueById(value);
        }
        else {
            this.setValue(value);
        }
    };
    SelectComponent.prototype.setValue = function (item) {
        this.writeValue(item);
        this.onChange(item);
    };
    SelectComponent.prototype.setValueById = function (id) {
        this.setValue(this.items.find(function (item) { return item.id === id; }));
    };
    var SelectComponent_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], SelectComponent.prototype, "items", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], SelectComponent.prototype, "initialValue", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], SelectComponent.prototype, "placeholder", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], SelectComponent.prototype, "isKeyboardControlEnabled", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], SelectComponent.prototype, "hasCustomTrigger", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], SelectComponent.prototype, "onItemSelected", void 0);
    tslib_1.__decorate([
        ViewChild('popover', { static: false }),
        tslib_1.__metadata("design:type", Object)
    ], SelectComponent.prototype, "popover", void 0);
    SelectComponent = SelectComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'su-select',
            encapsulation: ViewEncapsulation.None,
            providers: [
                { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return SelectComponent_1; }), multi: true }
            ],
            template: "\n        <fd-popover #popover fillControlMode=\"equal\" class=\"su-select\">\n            <fd-popover-control class=\"su-select__popover-control\">\n                <button\n                    class=\"fd-dropdown__control fd-button\"\n                    type=\"button\"\n                    *ngIf=\"!hasCustomTrigger; else customTrigger\"\n                >\n                    {{ (value && value.label) || placeholder | translate }}\n                </button>\n\n                <ng-template #customTrigger>\n                    <ng-content select=\"[su-select-custom-trigger]\"></ng-content>\n                </ng-template>\n            </fd-popover-control>\n            <fd-popover-body>\n                <fd-menu class=\"su-select__menu\">\n                    <ul\n                        fd-menu-list\n                        suListKeyboardControl\n                        [suListKeyboardControlEnabled]=\"isKeyboardControlEnabled && popover.isOpen\"\n                        (suListKeyboardControlEnterKeydown)=\"selectItem($event)\"\n                    >\n                        <li\n                            fd-menu-item\n                            suListItemKeyboardControl\n                            [ngClass]=\"item.listItemClassName\"\n                            *ngFor=\"let item of items\"\n                            (click)=\"selectItem(item.id)\"\n                            [attr.tabindex]=\"-1\"\n                            [attr.data-select-id]=\"item.id\"\n                        >\n                            {{ item.label | translate }}\n                        </li>\n                    </ul>\n                </fd-menu>\n            </fd-popover-body>\n        </fd-popover>\n    ",
            styles: [".su-select,.su-select__popover-control,.su-select__popover-control .fd-dropdown{width:100%}.su-select__popover-control .fd-dropdown__control{overflow:hidden;color:#51555a}.su-select__popover-control .fd-dropdown__control::after{position:absolute;top:0;right:0;display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;padding:0;height:36px;width:36px;margin-top:0;font-size:14px}.su-select__menu .fd-menu__list{max-height:200px;overflow:auto}.su-select__menu .fd-menu__item[select-highlighted]{background:rgba(10,110,209,.07)}.su-select__menu .fd-menu__item[select-highlighted]:focus{outline:0}"]
        })
    ], SelectComponent);
    return SelectComponent;
}(BaseValueAccessor));
export { SelectComponent };
//# sourceMappingURL=data:application/json;base64,