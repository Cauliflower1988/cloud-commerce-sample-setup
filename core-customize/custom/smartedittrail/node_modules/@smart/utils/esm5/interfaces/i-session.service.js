/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/*
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
/**
 * @ngdoc interface
 * @name smarteditServicesModule.interface:ISessionService
 * @description
 * The ISessionService provides information related to the current session
 * and the authenticated user (including a user readable and writeable languages).
 */
var ISessionService = /** @class */ (function () {
    function ISessionService() {
    }
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISessionService#getCurrentUsername
     * @methodOf smarteditServicesModule.interface:ISessionService
     *
     * @description
     * Returns the username, previously mentioned as "principalUID",
     * associated to the authenticated user.
     *
     * @returns {Promise<string>} A promise resolving to the username,
     * previously mentioned as "principalUID", associated to the
     * authenticated user.
     */
    ISessionService.prototype.getCurrentUsername = function () {
        'proxyFunction';
        return Promise.resolve('');
    };
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISessionService#getCurrentUserDisplayName
     * @methodOf smarteditServicesModule.interface:ISessionService
     *
     * @description
     * Returns the displayed name associated to the authenticated user.
     *
     * @returns {Promise<string>} A promise resolving to the displayed name
     * associated to the authenticated user.
     */
    ISessionService.prototype.getCurrentUserDisplayName = function () {
        'proxyFunction';
        return Promise.resolve('');
    };
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISessionService#getCurrentUser
     * @methodOf smarteditServicesModule.interface:ISessionService
     *
     * @description
     * Returns the data of the current authenticated user.
     * Also note that as part of the User object returned by this method contains
     * the list of readable and writeable languages available to the user.
     *
     * @returns {Promise<User>} A promise resolving to the data of the current
     * authenticated user.
     */
    ISessionService.prototype.getCurrentUser = function () {
        'proxyFunction';
        return Promise.resolve({});
    };
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISessionService#hasUserChanged
     * @methodOf smarteditServicesModule.interface:ISessionService
     *
     * @description
     * Returns boolean indicating whether the current user is different from
     * the last authenticated one.
     *
     * @returns {Promise<boolean>} Boolean indicating whether the current user is
     * different from the last authenticated one.
     */
    ISessionService.prototype.hasUserChanged = function () {
        'proxyFunction';
        return Promise.resolve(true);
    };
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISessionService#resetCurrentUserData
     * @methodOf smarteditServicesModule.interface:ISessionService
     *
     * @description
     * Reset all data associated to the authenticated user.
     * to the authenticated user.
     *
     * @return {Promise<void>} returns an empty promise.
     */
    ISessionService.prototype.resetCurrentUserData = function () {
        'proxyFunction';
        return Promise.resolve();
    };
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISessionService#setCurrentUsername
     * @methodOf smarteditServicesModule.interface:ISessionService
     *
     * @description
     * Set the username, previously mentioned as "principalUID", associated
     * to the authenticated user.
     *
     * @return {Promise<void>} returns an empty promise.
     */
    ISessionService.prototype.setCurrentUsername = function () {
        'proxyFunction';
        return Promise.resolve();
    };
    return ISessionService;
}());
export { ISessionService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaS1zZXNzaW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac21hcnQvdXRpbHMvIiwic291cmNlcyI6WyJpbnRlcmZhY2VzL2ktc2Vzc2lvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUNIOztHQUVHO0FBSUg7Ozs7OztHQU1HO0FBQ0g7SUFBQTtJQXFHQSxDQUFDO0lBcEdHOzs7Ozs7Ozs7Ozs7T0FZRztJQUNILDRDQUFrQixHQUFsQjtRQUNJLGVBQWUsQ0FBQztRQUNoQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVEOzs7Ozs7Ozs7O09BVUc7SUFDSCxtREFBeUIsR0FBekI7UUFDSSxlQUFlLENBQUM7UUFDaEIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7O09BWUc7SUFDSCx3Q0FBYyxHQUFkO1FBQ0ksZUFBZSxDQUFDO1FBQ2hCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFVLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7O09BV0c7SUFDSCx3Q0FBYyxHQUFkO1FBQ0ksZUFBZSxDQUFDO1FBQ2hCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUNILDhDQUFvQixHQUFwQjtRQUNJLGVBQWUsQ0FBQztRQUNoQixPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUNILDRDQUFrQixHQUFsQjtRQUNJLGVBQWUsQ0FBQztRQUNoQixPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBQ0wsc0JBQUM7QUFBRCxDQUFDLEFBckdELElBcUdDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFNBUCBTRSBvciBhbiBTQVAgYWZmaWxpYXRlIGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cblxuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL2R0b3MnO1xuXG4vKipcbiAqIEBuZ2RvYyBpbnRlcmZhY2VcbiAqIEBuYW1lIHNtYXJ0ZWRpdFNlcnZpY2VzTW9kdWxlLmludGVyZmFjZTpJU2Vzc2lvblNlcnZpY2VcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIElTZXNzaW9uU2VydmljZSBwcm92aWRlcyBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIHRoZSBjdXJyZW50IHNlc3Npb25cbiAqIGFuZCB0aGUgYXV0aGVudGljYXRlZCB1c2VyIChpbmNsdWRpbmcgYSB1c2VyIHJlYWRhYmxlIGFuZCB3cml0ZWFibGUgbGFuZ3VhZ2VzKS5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIElTZXNzaW9uU2VydmljZSB7XG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIHNtYXJ0ZWRpdFNlcnZpY2VzTW9kdWxlLmludGVyZmFjZTpJU2Vzc2lvblNlcnZpY2UjZ2V0Q3VycmVudFVzZXJuYW1lXG4gICAgICogQG1ldGhvZE9mIHNtYXJ0ZWRpdFNlcnZpY2VzTW9kdWxlLmludGVyZmFjZTpJU2Vzc2lvblNlcnZpY2VcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJldHVybnMgdGhlIHVzZXJuYW1lLCBwcmV2aW91c2x5IG1lbnRpb25lZCBhcyBcInByaW5jaXBhbFVJRFwiLFxuICAgICAqIGFzc29jaWF0ZWQgdG8gdGhlIGF1dGhlbnRpY2F0ZWQgdXNlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IEEgcHJvbWlzZSByZXNvbHZpbmcgdG8gdGhlIHVzZXJuYW1lLFxuICAgICAqIHByZXZpb3VzbHkgbWVudGlvbmVkIGFzIFwicHJpbmNpcGFsVUlEXCIsIGFzc29jaWF0ZWQgdG8gdGhlXG4gICAgICogYXV0aGVudGljYXRlZCB1c2VyLlxuICAgICAqL1xuICAgIGdldEN1cnJlbnRVc2VybmFtZSgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICAncHJveHlGdW5jdGlvbic7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBzbWFydGVkaXRTZXJ2aWNlc01vZHVsZS5pbnRlcmZhY2U6SVNlc3Npb25TZXJ2aWNlI2dldEN1cnJlbnRVc2VyRGlzcGxheU5hbWVcbiAgICAgKiBAbWV0aG9kT2Ygc21hcnRlZGl0U2VydmljZXNNb2R1bGUuaW50ZXJmYWNlOklTZXNzaW9uU2VydmljZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyB0aGUgZGlzcGxheWVkIG5hbWUgYXNzb2NpYXRlZCB0byB0aGUgYXV0aGVudGljYXRlZCB1c2VyLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gQSBwcm9taXNlIHJlc29sdmluZyB0byB0aGUgZGlzcGxheWVkIG5hbWVcbiAgICAgKiBhc3NvY2lhdGVkIHRvIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIuXG4gICAgICovXG4gICAgZ2V0Q3VycmVudFVzZXJEaXNwbGF5TmFtZSgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICAncHJveHlGdW5jdGlvbic7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBzbWFydGVkaXRTZXJ2aWNlc01vZHVsZS5pbnRlcmZhY2U6SVNlc3Npb25TZXJ2aWNlI2dldEN1cnJlbnRVc2VyXG4gICAgICogQG1ldGhvZE9mIHNtYXJ0ZWRpdFNlcnZpY2VzTW9kdWxlLmludGVyZmFjZTpJU2Vzc2lvblNlcnZpY2VcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJldHVybnMgdGhlIGRhdGEgb2YgdGhlIGN1cnJlbnQgYXV0aGVudGljYXRlZCB1c2VyLlxuICAgICAqIEFsc28gbm90ZSB0aGF0IGFzIHBhcnQgb2YgdGhlIFVzZXIgb2JqZWN0IHJldHVybmVkIGJ5IHRoaXMgbWV0aG9kIGNvbnRhaW5zXG4gICAgICogdGhlIGxpc3Qgb2YgcmVhZGFibGUgYW5kIHdyaXRlYWJsZSBsYW5ndWFnZXMgYXZhaWxhYmxlIHRvIHRoZSB1c2VyLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8VXNlcj59IEEgcHJvbWlzZSByZXNvbHZpbmcgdG8gdGhlIGRhdGEgb2YgdGhlIGN1cnJlbnRcbiAgICAgKiBhdXRoZW50aWNhdGVkIHVzZXIuXG4gICAgICovXG4gICAgZ2V0Q3VycmVudFVzZXIoKTogUHJvbWlzZTxVc2VyPiB7XG4gICAgICAgICdwcm94eUZ1bmN0aW9uJztcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7fSBhcyBVc2VyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgc21hcnRlZGl0U2VydmljZXNNb2R1bGUuaW50ZXJmYWNlOklTZXNzaW9uU2VydmljZSNoYXNVc2VyQ2hhbmdlZFxuICAgICAqIEBtZXRob2RPZiBzbWFydGVkaXRTZXJ2aWNlc01vZHVsZS5pbnRlcmZhY2U6SVNlc3Npb25TZXJ2aWNlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXR1cm5zIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBjdXJyZW50IHVzZXIgaXMgZGlmZmVyZW50IGZyb21cbiAgICAgKiB0aGUgbGFzdCBhdXRoZW50aWNhdGVkIG9uZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgY3VycmVudCB1c2VyIGlzXG4gICAgICogZGlmZmVyZW50IGZyb20gdGhlIGxhc3QgYXV0aGVudGljYXRlZCBvbmUuXG4gICAgICovXG4gICAgaGFzVXNlckNoYW5nZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgICdwcm94eUZ1bmN0aW9uJztcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgc21hcnRlZGl0U2VydmljZXNNb2R1bGUuaW50ZXJmYWNlOklTZXNzaW9uU2VydmljZSNyZXNldEN1cnJlbnRVc2VyRGF0YVxuICAgICAqIEBtZXRob2RPZiBzbWFydGVkaXRTZXJ2aWNlc01vZHVsZS5pbnRlcmZhY2U6SVNlc3Npb25TZXJ2aWNlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXNldCBhbGwgZGF0YSBhc3NvY2lhdGVkIHRvIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIuXG4gICAgICogdG8gdGhlIGF1dGhlbnRpY2F0ZWQgdXNlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IHJldHVybnMgYW4gZW1wdHkgcHJvbWlzZS5cbiAgICAgKi9cbiAgICByZXNldEN1cnJlbnRVc2VyRGF0YSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgJ3Byb3h5RnVuY3Rpb24nO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIHNtYXJ0ZWRpdFNlcnZpY2VzTW9kdWxlLmludGVyZmFjZTpJU2Vzc2lvblNlcnZpY2Ujc2V0Q3VycmVudFVzZXJuYW1lXG4gICAgICogQG1ldGhvZE9mIHNtYXJ0ZWRpdFNlcnZpY2VzTW9kdWxlLmludGVyZmFjZTpJU2Vzc2lvblNlcnZpY2VcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNldCB0aGUgdXNlcm5hbWUsIHByZXZpb3VzbHkgbWVudGlvbmVkIGFzIFwicHJpbmNpcGFsVUlEXCIsIGFzc29jaWF0ZWRcbiAgICAgKiB0byB0aGUgYXV0aGVudGljYXRlZCB1c2VyLlxuICAgICAqXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn0gcmV0dXJucyBhbiBlbXB0eSBwcm9taXNlLlxuICAgICAqL1xuICAgIHNldEN1cnJlbnRVc2VybmFtZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgJ3Byb3h5RnVuY3Rpb24nO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxufVxuIl19