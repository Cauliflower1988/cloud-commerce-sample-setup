/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Inject, Injectable, Injector } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { from, Observable } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { HttpUtils } from '../../utils';
import { IAuthenticationService, IAuthToken, IStorageService } from '../../interfaces';
import { GET_REQUESTS_ON_HOLD_MAP } from './errors/unauthorized-error.interceptor';
import { I18N_RESOURCE_URI_TOKEN } from '../../constants';
/**
 * @ngdoc service
 * @name @smartutils.httpAuthInterceptor
 *
 * @description
 * Makes it possible to perform global authentication by intercepting requests before they are forwarded to the server
 * and responses before they are forwarded to the application code.
 *
 */
var HttpAuthInterceptor = /** @class */ (function () {
    function HttpAuthInterceptor(authenticationService, injector, httpUtils, I18N_RESOURCE_URI) {
        this.authenticationService = authenticationService;
        this.injector = injector;
        this.httpUtils = httpUtils;
        this.I18N_RESOURCE_URI = I18N_RESOURCE_URI;
    }
    /**
     * @ngdoc method
     * @name @smartutils.httpAuthInterceptor#request
     * @methodOf @smartutils.httpAuthInterceptor
     *
     * @description
     * Interceptor method which gets called with a http config object, intercepts any request made using httpClient service.
     * A call to any REST resource will be intercepted by this method, which then adds an authentication token to the request
     * and then forwards it to the REST resource.
     *
     */
    HttpAuthInterceptor.prototype.intercept = function (request, next) {
        var _this = this;
        if (!request.url.includes(this.I18N_RESOURCE_URI) &&
            this.httpUtils.isCRUDRequest(request)) {
            if (this.httpUtils.isGET(request) && GET_REQUESTS_ON_HOLD_MAP[request.url]) {
                return new Observable(function (obj) {
                    GET_REQUESTS_ON_HOLD_MAP[request.url].then(function (body) {
                        obj.next(new HttpResponse({ status: 200, body: body }));
                    });
                });
            }
            return from(this.authenticationService.filterEntryPoints(request.url)).pipe(switchMap(function (entryPoints) {
                if (entryPoints && entryPoints.length) {
                    return from(_this.injector.get(IStorageService).getAuthToken(entryPoints[0])).pipe(switchMap(function (authToken) {
                        if (authToken) {
                            var authReq = request.clone({
                                headers: request.headers.set('Authorization', authToken.token_type + ' ' + authToken.access_token)
                            });
                            return next.handle(authReq);
                        }
                        else {
                            return next.handle(request);
                        }
                    }));
                }
                else {
                    return next.handle(request);
                }
            }));
        }
        else {
            return next.handle(request);
        }
    };
    HttpAuthInterceptor.ctorParameters = function () { return [
        { type: IAuthenticationService },
        { type: Injector },
        { type: HttpUtils },
        { type: String, decorators: [{ type: Inject, args: [I18N_RESOURCE_URI_TOKEN,] }] }
    ]; };
    HttpAuthInterceptor = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(3, Inject(I18N_RESOURCE_URI_TOKEN)),
        tslib_1.__metadata("design:paramtypes", [IAuthenticationService,
            Injector,
            HttpUtils, String])
    ], HttpAuthInterceptor);
    return HttpAuthInterceptor;
}());
export { HttpAuthInterceptor };
//# sourceMappingURL=data:application/json;base64,