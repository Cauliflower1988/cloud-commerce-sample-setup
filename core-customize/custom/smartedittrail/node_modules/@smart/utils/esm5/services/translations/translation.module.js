/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { TranslateLoader, TranslateModule, TranslateService } from '@ngx-translate/core';
import { BrowserService } from '../../services/browser';
import { IStorageService } from '../../interfaces';
import { ITranslationsFetchService } from './i-translations-fetch.service';
import { TranslateHttpLoader } from './translate-http.loader';
var TranslationModule = /** @class */ (function () {
    function TranslationModule() {
    }
    TranslationModule_1 = TranslationModule;
    TranslationModule.forChild = function () {
        return TranslateModule.forChild({
            isolate: false,
            loader: {
                provide: TranslateLoader,
                useClass: TranslateHttpLoader
            }
        });
    };
    TranslationModule.forRoot = function (TranslationsFetchServiceClass) {
        return {
            ngModule: TranslationModule_1,
            providers: [
                {
                    provide: ITranslationsFetchService,
                    useClass: TranslationsFetchServiceClass
                },
                {
                    provide: APP_INITIALIZER,
                    useFactory: function (translate, storageService, browserService) {
                        storageService
                            .getValueFromLocalStorage('SELECTED_LANGUAGE', false)
                            .then(function (lang) {
                            return lang ? lang.isoCode : browserService.getBrowserLocale();
                        }, function () {
                            return browserService.getBrowserLocale();
                        })
                            .then(function (lang) {
                            translate.setDefaultLang(lang);
                            translate.use(lang);
                        });
                        return function (component) {
                            // an initializer useFactory must return a function
                        };
                    },
                    deps: [TranslateService, IStorageService, BrowserService],
                    multi: true
                }
            ]
        };
    };
    var TranslationModule_1;
    TranslationModule = TranslationModule_1 = tslib_1.__decorate([
        NgModule({
            imports: [
                TranslateModule.forRoot({
                    isolate: false,
                    loader: {
                        provide: TranslateLoader,
                        useClass: TranslateHttpLoader
                    }
                })
            ],
            exports: [TranslateModule]
        })
    ], TranslationModule);
    return TranslationModule;
}());
export { TranslationModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRpb24ubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNtYXJ0L3V0aWxzLyIsInNvdXJjZXMiOlsic2VydmljZXMvdHJhbnNsYXRpb25zL3RyYW5zbGF0aW9uLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHO0FBQ0gsT0FBTyxFQUFFLGVBQWUsRUFBcUMsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdGLE9BQU8sRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFekYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQWM5RDtJQUFBO0lBcURBLENBQUM7MEJBckRZLGlCQUFpQjtJQUNuQiwwQkFBUSxHQUFmO1FBQ0ksT0FBTyxlQUFlLENBQUMsUUFBUSxDQUFDO1lBQzVCLE9BQU8sRUFBRSxLQUFLO1lBQ2QsTUFBTSxFQUFFO2dCQUNKLE9BQU8sRUFBRSxlQUFlO2dCQUN4QixRQUFRLEVBQUUsbUJBQW1CO2FBQ2hDO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLHlCQUFPLEdBQWQsVUFDSSw2QkFBZ0Y7UUFFaEYsT0FBTztZQUNILFFBQVEsRUFBRSxtQkFBaUI7WUFDM0IsU0FBUyxFQUFFO2dCQUNQO29CQUNJLE9BQU8sRUFBRSx5QkFBeUI7b0JBQ2xDLFFBQVEsRUFBRSw2QkFBNkI7aUJBQzFDO2dCQUNEO29CQUNJLE9BQU8sRUFBRSxlQUFlO29CQUN4QixVQUFVLEVBQVYsVUFDSSxTQUEyQixFQUMzQixjQUErQixFQUMvQixjQUE4Qjt3QkFFOUIsY0FBYzs2QkFDVCx3QkFBd0IsQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLENBQUM7NkJBQ3BELElBQUksQ0FDRCxVQUFDLElBQXVDOzRCQUNwQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLGdCQUFnQixFQUFFLENBQUM7d0JBQ25FLENBQUMsRUFDRDs0QkFDSSxPQUFPLGNBQWMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO3dCQUM3QyxDQUFDLENBQ0o7NkJBQ0EsSUFBSSxDQUFDLFVBQUMsSUFBWTs0QkFDZixTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDOzRCQUMvQixTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUN4QixDQUFDLENBQUMsQ0FBQzt3QkFFUCxPQUFPLFVBQUMsU0FBNEI7NEJBQ2hDLG1EQUFtRDt3QkFDdkQsQ0FBQyxDQUFDO29CQUNOLENBQUM7b0JBQ0QsSUFBSSxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLGNBQWMsQ0FBQztvQkFDekQsS0FBSyxFQUFFLElBQUk7aUJBQ2Q7YUFDSjtTQUNKLENBQUM7SUFDTixDQUFDOztJQXBEUSxpQkFBaUI7UUFaN0IsUUFBUSxDQUFDO1lBQ04sT0FBTyxFQUFFO2dCQUNMLGVBQWUsQ0FBQyxPQUFPLENBQUM7b0JBQ3BCLE9BQU8sRUFBRSxLQUFLO29CQUNkLE1BQU0sRUFBRTt3QkFDSixPQUFPLEVBQUUsZUFBZTt3QkFDeEIsUUFBUSxFQUFFLG1CQUFtQjtxQkFDaEM7aUJBQ0osQ0FBQzthQUNMO1lBQ0QsT0FBTyxFQUFFLENBQUMsZUFBZSxDQUFDO1NBQzdCLENBQUM7T0FDVyxpQkFBaUIsQ0FxRDdCO0lBQUQsd0JBQUM7Q0FBQSxBQXJERCxJQXFEQztTQXJEWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBTQVAgU0Ugb3IgYW4gU0FQIGFmZmlsaWF0ZSBjb21wYW55LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQG1vZHVsZSBzbWFydHV0aWxzXG4gKi9cbmltcG9ydCB7IEFQUF9JTklUSUFMSVpFUiwgQ29tcG9uZW50UmVmLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJhbnNsYXRlTG9hZGVyLCBUcmFuc2xhdGVNb2R1bGUsIFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IG1vZHVsZVV0aWxzIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHsgQnJvd3NlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9icm93c2VyJztcbmltcG9ydCB7IElTdG9yYWdlU2VydmljZSB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgSVRyYW5zbGF0aW9uc0ZldGNoU2VydmljZSB9IGZyb20gJy4vaS10cmFuc2xhdGlvbnMtZmV0Y2guc2VydmljZSc7XG5pbXBvcnQgeyBUcmFuc2xhdGVIdHRwTG9hZGVyIH0gZnJvbSAnLi90cmFuc2xhdGUtaHR0cC5sb2FkZXInO1xuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtcbiAgICAgICAgVHJhbnNsYXRlTW9kdWxlLmZvclJvb3Qoe1xuICAgICAgICAgICAgaXNvbGF0ZTogZmFsc2UsXG4gICAgICAgICAgICBsb2FkZXI6IHtcbiAgICAgICAgICAgICAgICBwcm92aWRlOiBUcmFuc2xhdGVMb2FkZXIsXG4gICAgICAgICAgICAgICAgdXNlQ2xhc3M6IFRyYW5zbGF0ZUh0dHBMb2FkZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICBdLFxuICAgIGV4cG9ydHM6IFtUcmFuc2xhdGVNb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIFRyYW5zbGF0aW9uTW9kdWxlIHtcbiAgICBzdGF0aWMgZm9yQ2hpbGQoKSB7XG4gICAgICAgIHJldHVybiBUcmFuc2xhdGVNb2R1bGUuZm9yQ2hpbGQoe1xuICAgICAgICAgICAgaXNvbGF0ZTogZmFsc2UsXG4gICAgICAgICAgICBsb2FkZXI6IHtcbiAgICAgICAgICAgICAgICBwcm92aWRlOiBUcmFuc2xhdGVMb2FkZXIsXG4gICAgICAgICAgICAgICAgdXNlQ2xhc3M6IFRyYW5zbGF0ZUh0dHBMb2FkZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZvclJvb3QoXG4gICAgICAgIFRyYW5zbGF0aW9uc0ZldGNoU2VydmljZUNsYXNzOiBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBJVHJhbnNsYXRpb25zRmV0Y2hTZXJ2aWNlXG4gICAgKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuZ01vZHVsZTogVHJhbnNsYXRpb25Nb2R1bGUsXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGU6IElUcmFuc2xhdGlvbnNGZXRjaFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgIHVzZUNsYXNzOiBUcmFuc2xhdGlvbnNGZXRjaFNlcnZpY2VDbGFzc1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgICAgICAgICAgICAgICAgIHVzZUZhY3RvcnkoXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlU2VydmljZTogSVN0b3JhZ2VTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJvd3NlclNlcnZpY2U6IEJyb3dzZXJTZXJ2aWNlXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZVNlcnZpY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0VmFsdWVGcm9tTG9jYWxTdG9yYWdlKCdTRUxFQ1RFRF9MQU5HVUFHRScsIGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobGFuZzogeyBuYW1lOiBzdHJpbmc7IGlzb0NvZGU6IHN0cmluZyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGFuZyA/IGxhbmcuaXNvQ29kZSA6IGJyb3dzZXJTZXJ2aWNlLmdldEJyb3dzZXJMb2NhbGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXJTZXJ2aWNlLmdldEJyb3dzZXJMb2NhbGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbigobGFuZzogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZS5zZXREZWZhdWx0TGFuZyhsYW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlLnVzZShsYW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjb21wb25lbnQ6IENvbXBvbmVudFJlZjxhbnk+KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW4gaW5pdGlhbGl6ZXIgdXNlRmFjdG9yeSBtdXN0IHJldHVybiBhIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkZXBzOiBbVHJhbnNsYXRlU2VydmljZSwgSVN0b3JhZ2VTZXJ2aWNlLCBCcm93c2VyU2VydmljZV0sXG4gICAgICAgICAgICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cbn1cbiJdfQ==