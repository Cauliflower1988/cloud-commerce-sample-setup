/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
// File named form-builder.module for now cuz of build blocking me to use Module suffix.
var FormBuilderModule_1;
import * as tslib_1 from "tslib";
import { ANALYZE_FOR_ENTRY_COMPONENTS, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
// Components
import { FormListerComponent } from './components/form-lister/form-lister.component';
import { FormRendererDirective } from './directives/form-renderer/form-renderer.directive';
// Services
import { ASYNC_VALIDATOR_MAP, COMPONENT_MAP, VALIDATOR_MAP } from './services/injection-tokens';
let FormBuilderModule = FormBuilderModule_1 = class FormBuilderModule {
    static forRoot(option) {
        return {
            ngModule: FormBuilderModule_1,
            providers: [
                {
                    provide: ANALYZE_FOR_ENTRY_COMPONENTS,
                    useValue: [option.types],
                    multi: true
                },
                {
                    provide: COMPONENT_MAP,
                    useValue: option.types
                },
                {
                    provide: VALIDATOR_MAP,
                    useValue: option.validators
                },
                {
                    provide: ASYNC_VALIDATOR_MAP,
                    useValue: option.asyncValidators
                }
            ]
        };
    }
};
FormBuilderModule = FormBuilderModule_1 = tslib_1.__decorate([
    NgModule({
        imports: [CommonModule, ReactiveFormsModule],
        declarations: [FormRendererDirective, FormListerComponent],
        entryComponents: [FormListerComponent],
        exports: [FormRendererDirective]
    })
], FormBuilderModule);
export { FormBuilderModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1idWlsZGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvZm9ybS1idWlsZGVyL2Zvcm0tYnVpbGRlci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBQ0gsd0ZBQXdGOzs7QUFFeEYsT0FBTyxFQUFFLDRCQUE0QixFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSXJELGFBQWE7QUFDYixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNyRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUUzRixXQUFXO0FBQ1gsT0FBTyxFQUFFLG1CQUFtQixFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQVFoRyxJQUFhLGlCQUFpQix5QkFBOUIsTUFBYSxpQkFBaUI7SUFDMUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUF5QjtRQUNwQyxPQUFPO1lBQ0gsUUFBUSxFQUFFLG1CQUFpQjtZQUMzQixTQUFTLEVBQUU7Z0JBQ1A7b0JBQ0ksT0FBTyxFQUFFLDRCQUE0QjtvQkFDckMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztvQkFDeEIsS0FBSyxFQUFFLElBQUk7aUJBQ2Q7Z0JBQ0Q7b0JBQ0ksT0FBTyxFQUFFLGFBQWE7b0JBQ3RCLFFBQVEsRUFBRSxNQUFNLENBQUMsS0FBSztpQkFDekI7Z0JBQ0Q7b0JBQ0ksT0FBTyxFQUFFLGFBQWE7b0JBQ3RCLFFBQVEsRUFBRSxNQUFNLENBQUMsVUFBVTtpQkFDOUI7Z0JBQ0Q7b0JBQ0ksT0FBTyxFQUFFLG1CQUFtQjtvQkFDNUIsUUFBUSxFQUFFLE1BQU0sQ0FBQyxlQUFlO2lCQUNuQzthQUNKO1NBQ0osQ0FBQztJQUNOLENBQUM7Q0FDSixDQUFBO0FBekJZLGlCQUFpQjtJQU43QixRQUFRLENBQUM7UUFDTixPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsbUJBQW1CLENBQUM7UUFDNUMsWUFBWSxFQUFFLENBQUMscUJBQXFCLEVBQUUsbUJBQW1CLENBQUM7UUFDMUQsZUFBZSxFQUFFLENBQUMsbUJBQW1CLENBQUM7UUFDdEMsT0FBTyxFQUFFLENBQUMscUJBQXFCLENBQUM7S0FDbkMsQ0FBQztHQUNXLGlCQUFpQixDQXlCN0I7U0F6QlksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG4vLyBGaWxlIG5hbWVkIGZvcm0tYnVpbGRlci5tb2R1bGUgZm9yIG5vdyBjdXogb2YgYnVpbGQgYmxvY2tpbmcgbWUgdG8gdXNlIE1vZHVsZSBzdWZmaXguXG5cbmltcG9ydCB7IEFOQUxZWkVfRk9SX0VOVFJZX0NPTVBPTkVOVFMsIE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgRm9ybUJ1aWxkZXJDb25maWcgfSBmcm9tICcuL21vZGVscyc7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IEZvcm1MaXN0ZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZm9ybS1saXN0ZXIvZm9ybS1saXN0ZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEZvcm1SZW5kZXJlckRpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9mb3JtLXJlbmRlcmVyL2Zvcm0tcmVuZGVyZXIuZGlyZWN0aXZlJztcblxuLy8gU2VydmljZXNcbmltcG9ydCB7IEFTWU5DX1ZBTElEQVRPUl9NQVAsIENPTVBPTkVOVF9NQVAsIFZBTElEQVRPUl9NQVAgfSBmcm9tICcuL3NlcnZpY2VzL2luamVjdGlvbi10b2tlbnMnO1xuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGVdLFxuICAgIGRlY2xhcmF0aW9uczogW0Zvcm1SZW5kZXJlckRpcmVjdGl2ZSwgRm9ybUxpc3RlckNvbXBvbmVudF0sXG4gICAgZW50cnlDb21wb25lbnRzOiBbRm9ybUxpc3RlckNvbXBvbmVudF0sXG4gICAgZXhwb3J0czogW0Zvcm1SZW5kZXJlckRpcmVjdGl2ZV1cbn0pXG5leHBvcnQgY2xhc3MgRm9ybUJ1aWxkZXJNb2R1bGUge1xuICAgIHN0YXRpYyBmb3JSb290KG9wdGlvbjogRm9ybUJ1aWxkZXJDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBGb3JtQnVpbGRlck1vZHVsZSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogQU5BTFlaRV9GT1JfRU5UUllfQ09NUE9ORU5UUyxcbiAgICAgICAgICAgICAgICAgICAgdXNlVmFsdWU6IFtvcHRpb24udHlwZXNdLFxuICAgICAgICAgICAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBDT01QT05FTlRfTUFQLFxuICAgICAgICAgICAgICAgICAgICB1c2VWYWx1ZTogb3B0aW9uLnR5cGVzXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGU6IFZBTElEQVRPUl9NQVAsXG4gICAgICAgICAgICAgICAgICAgIHVzZVZhbHVlOiBvcHRpb24udmFsaWRhdG9yc1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBBU1lOQ19WQUxJREFUT1JfTUFQLFxuICAgICAgICAgICAgICAgICAgICB1c2VWYWx1ZTogb3B0aW9uLmFzeW5jVmFsaWRhdG9yc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG59XG4iXX0=