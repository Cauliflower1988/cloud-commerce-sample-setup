/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/*
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
/**
 * @ngdoc interface
 * @name smarteditServicesModule.interface:ISharedDataService
 *
 * @description
 * Provides an abstract extensible shared data service. Used to store any data to be used either the SmartEdit
 * application or the SmartEdit container.
 *
 * This class serves as an interface and should be extended, not instantiated.
 */
export class ISharedDataService {
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISharedDataService#get
     * @methodOf smarteditServicesModule.interface:ISharedDataService
     *
     * @description
     * Get the data for the given key.
     *
     * @param {String} key The key of the data to fetch
     */
    get(key) {
        'proxyFunction';
        return Promise.resolve({});
    }
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISharedDataService#set
     * @methodOf smarteditServicesModule.interface:ISharedDataService
     *
     * @description
     * Set data for the given key.
     *
     * @param {String} key The key of the data to set
     * @param {object} value The value of the data to set
     */
    set(key, value) {
        'proxyFunction';
        return Promise.resolve();
    }
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISharedDataService#update
     * @methodOf smarteditServicesModule.interface:ISharedDataService
     *
     * @description
     * Convenience method to retrieve and modify on the fly the content stored under a given key
     *
     * @param {String} key The key of the data to store
     * @param {Function} modifyingCallback callback fed with the value stored under the given key. The callback must return the new value of the object to update.
     */
    update(key, modifyingCallback) {
        'proxyFunction';
        return Promise.resolve();
    }
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISharedDataService#remove
     * @methodOf smarteditServicesModule.interface:ISharedDataService
     *
     * @description
     * Remove the entry for the given key.
     *
     * @param {String} key The key of the data to remove.
     * @returns {Promise<Cloneable>} A promise which resolves to the removed data for the given key.
     */
    remove(key) {
        'proxyFunction';
        return Promise.resolve({});
    }
    /**
     * @ngdoc method
     * @name smarteditServicesModule.interface:ISharedDataService#containsKey
     * @methodOf smarteditServicesModule.interface:ISharedDataService
     *
     * @description
     * Checks the given key exists or not.
     *
     * @param {String} key The key of the data to check.
     * @returns {Promise<boolean>} A promise which resolves to true if the given key is found. Otherwise false.
     */
    containsKey(key) {
        'proxyFunction';
        return Promise.resolve(true);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaS1zaGFyZWQtZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNtYXJ0L3V0aWxzLyIsInNvdXJjZXMiOlsiaW50ZXJmYWNlcy9pLXNoYXJlZC1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBQ0g7O0dBRUc7QUFJSDs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFNLE9BQWdCLGtCQUFrQjtJQUNwQzs7Ozs7Ozs7O09BU0c7SUFDSCxHQUFHLENBQUMsR0FBVztRQUNYLGVBQWUsQ0FBQztRQUNoQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVEOzs7Ozs7Ozs7O09BVUc7SUFDSCxHQUFHLENBQUMsR0FBVyxFQUFFLEtBQWdCO1FBQzdCLGVBQWUsQ0FBQztRQUNoQixPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUNILE1BQU0sQ0FBQyxHQUFXLEVBQUUsaUJBQXlDO1FBQ3pELGVBQWUsQ0FBQztRQUNoQixPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUNILE1BQU0sQ0FBQyxHQUFXO1FBQ2QsZUFBZSxDQUFDO1FBQ2hCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUNILFdBQVcsQ0FBQyxHQUFXO1FBQ25CLGVBQWUsQ0FBQztRQUNoQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFNBUCBTRSBvciBhbiBTQVAgYWZmaWxpYXRlIGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cblxuaW1wb3J0IHsgQ2xvbmVhYmxlIH0gZnJvbSAnLi4vZHRvcyc7XG5cbi8qKlxuICogQG5nZG9jIGludGVyZmFjZVxuICogQG5hbWUgc21hcnRlZGl0U2VydmljZXNNb2R1bGUuaW50ZXJmYWNlOklTaGFyZWREYXRhU2VydmljZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUHJvdmlkZXMgYW4gYWJzdHJhY3QgZXh0ZW5zaWJsZSBzaGFyZWQgZGF0YSBzZXJ2aWNlLiBVc2VkIHRvIHN0b3JlIGFueSBkYXRhIHRvIGJlIHVzZWQgZWl0aGVyIHRoZSBTbWFydEVkaXRcbiAqIGFwcGxpY2F0aW9uIG9yIHRoZSBTbWFydEVkaXQgY29udGFpbmVyLlxuICpcbiAqIFRoaXMgY2xhc3Mgc2VydmVzIGFzIGFuIGludGVyZmFjZSBhbmQgc2hvdWxkIGJlIGV4dGVuZGVkLCBub3QgaW5zdGFudGlhdGVkLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSVNoYXJlZERhdGFTZXJ2aWNlIHtcbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgc21hcnRlZGl0U2VydmljZXNNb2R1bGUuaW50ZXJmYWNlOklTaGFyZWREYXRhU2VydmljZSNnZXRcbiAgICAgKiBAbWV0aG9kT2Ygc21hcnRlZGl0U2VydmljZXNNb2R1bGUuaW50ZXJmYWNlOklTaGFyZWREYXRhU2VydmljZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogR2V0IHRoZSBkYXRhIGZvciB0aGUgZ2l2ZW4ga2V5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBkYXRhIHRvIGZldGNoXG4gICAgICovXG4gICAgZ2V0KGtleTogc3RyaW5nKTogUHJvbWlzZTxDbG9uZWFibGU+IHtcbiAgICAgICAgJ3Byb3h5RnVuY3Rpb24nO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHt9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgc21hcnRlZGl0U2VydmljZXNNb2R1bGUuaW50ZXJmYWNlOklTaGFyZWREYXRhU2VydmljZSNzZXRcbiAgICAgKiBAbWV0aG9kT2Ygc21hcnRlZGl0U2VydmljZXNNb2R1bGUuaW50ZXJmYWNlOklTaGFyZWREYXRhU2VydmljZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2V0IGRhdGEgZm9yIHRoZSBnaXZlbiBrZXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGRhdGEgdG8gc2V0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZGF0YSB0byBzZXRcbiAgICAgKi9cbiAgICBzZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBDbG9uZWFibGUpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgJ3Byb3h5RnVuY3Rpb24nO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIHNtYXJ0ZWRpdFNlcnZpY2VzTW9kdWxlLmludGVyZmFjZTpJU2hhcmVkRGF0YVNlcnZpY2UjdXBkYXRlXG4gICAgICogQG1ldGhvZE9mIHNtYXJ0ZWRpdFNlcnZpY2VzTW9kdWxlLmludGVyZmFjZTpJU2hhcmVkRGF0YVNlcnZpY2VcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIENvbnZlbmllbmNlIG1ldGhvZCB0byByZXRyaWV2ZSBhbmQgbW9kaWZ5IG9uIHRoZSBmbHkgdGhlIGNvbnRlbnQgc3RvcmVkIHVuZGVyIGEgZ2l2ZW4ga2V5XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGRhdGEgdG8gc3RvcmVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZnlpbmdDYWxsYmFjayBjYWxsYmFjayBmZWQgd2l0aCB0aGUgdmFsdWUgc3RvcmVkIHVuZGVyIHRoZSBnaXZlbiBrZXkuIFRoZSBjYWxsYmFjayBtdXN0IHJldHVybiB0aGUgbmV3IHZhbHVlIG9mIHRoZSBvYmplY3QgdG8gdXBkYXRlLlxuICAgICAqL1xuICAgIHVwZGF0ZShrZXk6IHN0cmluZywgbW9kaWZ5aW5nQ2FsbGJhY2s6IChvbGRWYWx1ZTogYW55KSA9PiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgJ3Byb3h5RnVuY3Rpb24nO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIHNtYXJ0ZWRpdFNlcnZpY2VzTW9kdWxlLmludGVyZmFjZTpJU2hhcmVkRGF0YVNlcnZpY2UjcmVtb3ZlXG4gICAgICogQG1ldGhvZE9mIHNtYXJ0ZWRpdFNlcnZpY2VzTW9kdWxlLmludGVyZmFjZTpJU2hhcmVkRGF0YVNlcnZpY2VcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJlbW92ZSB0aGUgZW50cnkgZm9yIHRoZSBnaXZlbiBrZXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGRhdGEgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPENsb25lYWJsZT59IEEgcHJvbWlzZSB3aGljaCByZXNvbHZlcyB0byB0aGUgcmVtb3ZlZCBkYXRhIGZvciB0aGUgZ2l2ZW4ga2V5LlxuICAgICAqL1xuICAgIHJlbW92ZShrZXk6IHN0cmluZyk6IFByb21pc2U8Q2xvbmVhYmxlPiB7XG4gICAgICAgICdwcm94eUZ1bmN0aW9uJztcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7fSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lIHNtYXJ0ZWRpdFNlcnZpY2VzTW9kdWxlLmludGVyZmFjZTpJU2hhcmVkRGF0YVNlcnZpY2UjY29udGFpbnNLZXlcbiAgICAgKiBAbWV0aG9kT2Ygc21hcnRlZGl0U2VydmljZXNNb2R1bGUuaW50ZXJmYWNlOklTaGFyZWREYXRhU2VydmljZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQ2hlY2tzIHRoZSBnaXZlbiBrZXkgZXhpc3RzIG9yIG5vdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZGF0YSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gQSBwcm9taXNlIHdoaWNoIHJlc29sdmVzIHRvIHRydWUgaWYgdGhlIGdpdmVuIGtleSBpcyBmb3VuZC4gT3RoZXJ3aXNlIGZhbHNlLlxuICAgICAqL1xuICAgIGNvbnRhaW5zS2V5KGtleTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgICdwcm94eUZ1bmN0aW9uJztcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICB9XG59XG4iXX0=