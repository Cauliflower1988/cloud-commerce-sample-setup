import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Component, HostBinding, Inject, Optional } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { HttpClient, HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';
import { ModalRef } from '@fundamental-ngx/core';
import { StringUtils, UrlUtils } from '../../utils';
import { LogService } from '../../services/log.service';
import { IAuthToken, ILoginData, ILoginModalFeedback, ISessionService, IStorageService } from '../../interfaces';
import { SSOAuthenticationHelper } from '../../services/authentication/sso-authentication.helper';
import { DEFAULT_AUTHENTICATION_ENTRY_POINT } from '../../constants';
import { LoginDialogResourceProvider } from './login-dialog-resource-provider';
let LoginDialogComponent = class LoginDialogComponent {
    constructor(modalRef, logService, httpClient, sessionService, storageService, stringUtils, urlUtils, ssoAuthenticationHelper, resource) {
        this.modalRef = modalRef;
        this.logService = logService;
        this.httpClient = httpClient;
        this.sessionService = sessionService;
        this.storageService = storageService;
        this.stringUtils = stringUtils;
        this.urlUtils = urlUtils;
        this.ssoAuthenticationHelper = ssoAuthenticationHelper;
        this.resource = resource;
        this.hostClass = true;
        this.data = null;
        this.authURIKey = '';
        this.authURI = '';
        this.isFullScreen = false;
        this.ssoEnabled = false;
        this.form = new FormGroup({
            username: new FormControl('', Validators.required),
            password: new FormControl('', Validators.required)
        });
        this.signinWithSSO = () => {
            this.form.setErrors(null);
            return this.ssoAuthenticationHelper
                .launchSSODialog()
                .then((data) => this.storeAccessToken(data), (error) => this.APIAuthenticationFailureReportFactory(error))
                .then((userHasChanged) => this.acceptUser(userHasChanged));
        };
        this.sendCredentials = (payload) => {
            return this.httpClient
                .request('POST', this.authURI, {
                headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded'),
                body: this.urlUtils.getQueryString(payload).replace('?', ''),
                observe: 'response'
            })
                .toPromise();
        };
    }
    ngOnInit() {
        this.data = this.modalRef.data || {};
        this.authURI = this.data.authURI;
        this.isFullScreen = this.data.isFullScreen;
        this.ssoEnabled = this.data.ssoEnabled && this.isMainEndPoint();
        this.storageService.removeAuthToken(this.authURI);
        this.authURIKey = btoa(this.authURI).replace(/=/g, '');
        if (this.ssoAuthenticationHelper.isAutoSSOMain()) {
            this.signinWithSSO();
        }
    }
    signinWithCredentials() {
        this.form.setErrors(null);
        if (this.hasRequiredCredentialsError()) {
            this.form.setErrors({
                credentialsRequiredError: 'se.logindialogform.username.and.password.required'
            });
            return Promise.reject();
        }
        const payload = Object.assign({}, (this.data.clientCredentials || {}), { username: this.form.get('username').value, password: this.form.get('password').value, grant_type: 'password' });
        return this.sendCredentials(payload)
            .then((response) => this.storeAccessToken(response), (error) => this.APIAuthenticationFailureReportFactory(error))
            .then((hasUserChanged) => this.acceptUser(hasUserChanged));
    }
    isMainEndPoint() {
        return DEFAULT_AUTHENTICATION_ENTRY_POINT === this.authURI;
    }
    storeAccessToken(response) {
        const token = response instanceof HttpResponse ? response.body : response;
        this.storageService.storeAuthToken(this.authURI, token);
        this.logService.debug(`API Authentication Success: ${this.authURI}`);
        return this.isMainEndPoint()
            ? this.sessionService.hasUserChanged()
            : Promise.resolve(false);
    }
    APIAuthenticationFailureReportFactory(error) {
        this.logService.debug(`API Authentication Failure: ${this.authURI} status: ${error.status}`);
        this.form.setErrors({
            asyncValidationError: (error.error && this.stringUtils.sanitize(error.error.error_description)) ||
                'se.logindialogform.oauth.error.default'
        });
        return Promise.reject(error);
    }
    acceptUser(userHasChanged) {
        this.modalRef.close({
            userHasChanged
        });
        if (this.isMainEndPoint()) {
            this.sessionService.setCurrentUsername();
        }
        return Promise.resolve({ userHasChanged });
    }
    hasRequiredCredentialsError() {
        const username = this.form.get('username');
        const password = this.form.get('password');
        return ((username.errors && username.errors.required) ||
            (password.errors && password.errors.required));
    }
};
LoginDialogComponent.ctorParameters = () => [
    { type: ModalRef },
    { type: LogService },
    { type: HttpClient },
    { type: ISessionService },
    { type: IStorageService },
    { type: StringUtils },
    { type: UrlUtils },
    { type: SSOAuthenticationHelper },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LoginDialogResourceProvider,] }] }
];
tslib_1.__decorate([
    HostBinding('class.su-login-dialog'),
    tslib_1.__metadata("design:type", Boolean)
], LoginDialogComponent.prototype, "hostClass", void 0);
LoginDialogComponent = tslib_1.__decorate([
    Component({
        selector: 'su-login-dialog',
        template: "<div class=\"su-login\">\n    <div class=\"su-login--wrapper\">\n        <div\n            class=\"su-login--logo-wrapper\"\n            [ngClass]=\"{ 'su-login--logo-wrapper_full': !isFullScreen }\"\n        >\n            <img *ngIf=\"resource?.topLogoURL\" [src]=\"resource?.topLogoURL\" class=\"su-login--logo\" />\n            <span class=\"su-login--logo-text\" translate=\"se.application.name\"> </span>\n        </div>\n        <form\n            autocomplete=\"off\"\n            novalidate\n            [formGroup]=\"form\"\n            (submit)=\"signinWithCredentials()\"\n            class=\"su-login--form\"\n        >\n            <div class=\"su-login--auth-message\" *ngIf=\"isFullScreen\">\n                <div translate=\"se.logindialogform.reauth.message1\"></div>\n                <div translate=\"se.logindialogform.reauth.message2\"></div>\n            </div>\n\n            <!--Validation Errors-->\n            <div *ngIf=\"form.errors\" class=\"su-login--form-group\">\n                <fd-alert\n                    type=\"error\"\n                    class=\"su-login--alert-error\"\n                    id=\"invalidError\"\n                    [dismissible]=\"false\"\n                >\n                    <ng-container *ngIf=\"form.errors?.credentialsRequiredError\">\n                        {{ form.errors.credentialsRequiredError | translate }}\n                    </ng-container>\n\n                    <ng-container *ngIf=\"form.errors?.asyncValidationError\">\n                        {{ form.errors.asyncValidationError | translate }}\n                    </ng-container>\n                </fd-alert>\n            </div>\n\n            <div class=\"su-login--form-group\">\n                <input\n                    fd-form-control\n                    type=\"text\"\n                    id=\"username_{{ authURIKey }}\"\n                    name=\"username\"\n                    formControlName=\"username\"\n                    placeholder=\"{{ 'se.authentication.form.input.username' | translate }}\"\n                    autofocus\n                    autocomplete=\"username\"\n                />\n            </div>\n            <div class=\"su-login--form-group\">\n                <input\n                    fd-form-control\n                    type=\"password\"\n                    id=\"password_{{ authURIKey }}\"\n                    name=\"password\"\n                    placeholder=\"{{ 'se.authentication.form.input.password' | translate }}\"\n                    formControlName=\"password\"\n                    autocomplete=\"current-password\"\n                    required\n                />\n            </div>\n            <div class=\"su-login--form-group\">\n                <su-language-dropdown class=\"su-login-language\"></su-language-dropdown>\n            </div>\n            <button\n                fd-button\n                options=\"emphasized\"\n                class=\"su-login--btn\"\n                id=\"submit_{{ authURIKey }}\"\n                name=\"submit\"\n                type=\"submit\"\n                translate=\"se.authentication.form.button.submit\"\n            ></button>\n        </form>\n        <form\n            *ngIf=\"ssoEnabled\"\n            class=\"su-login--form-sso\"\n            name=\"loginDialogFormSSO\"\n            novalidate\n            (submit)=\"signinWithSSO()\"\n        >\n            <button\n                fd-button\n                options=\"emphasized\"\n                class=\"fd-button--emphasized su-login--btn\"\n                id=\"submitSSO_{{ authURIKey }}\"\n                name=\"submitSSO\"\n                type=\"submit\"\n                translate=\"se.authentication.form.button.submit.sso\"\n            ></button>\n        </form>\n    </div>\n</div>\n<img\n    *ngIf=\"resource?.bottomLogoURL\"\n    [src]=\"resource?.bottomLogoURL\"\n    class=\"su-login--logo__best-run\"\n/>\n",
        styles: [".su-login{width:500px;min-height:440px;box-shadow:0 1px 4px 0 rgba(0,0,0,.1);background-color:#fff;border-radius:4px;border:1px solid rgba(0,0,0,.2);padding:20px;margin:0 auto}.su-login--wrapper{padding:40px 100px;width:100%}.su-login--form-group{margin-bottom:20px}.su-login--form-sso{margin-top:20px}.su-login--logo-wrapper{display:-webkit-box;display:flex;-webkit-box-pack:start;justify-content:flex-start;-webkit-box-align:center;align-items:center}.su-login--logo-wrapper.su-login--logo-wrapper_full{padding-bottom:45px}.su-login--logo{height:44px}.su-login--logo-text{font-family:\"72\",web,\"Open Sans\",sans-serif;font-size:1.7142857143rem;line-height:1.3333333333;padding-left:16px;color:#32363a;font-weight:700}.su-login--logo__best-run{position:absolute;bottom:30px;left:30px}.su-login--btn{font-size:1rem;line-height:1.4285714286;font-weight:400;width:100%}.su-login--auth-message{padding-top:20px;padding-bottom:20px;font-size:1rem;line-height:1.4285714286;font-weight:400}.su-login--alert-error{margin-bottom:0;box-shadow:none}"]
    }),
    tslib_1.__param(8, Optional()), tslib_1.__param(8, Inject(LoginDialogResourceProvider)),
    tslib_1.__metadata("design:paramtypes", [ModalRef,
        LogService,
        HttpClient,
        ISessionService,
        IStorageService,
        StringUtils,
        UrlUtils,
        SSOAuthenticationHelper, Object])
], LoginDialogComponent);
export { LoginDialogComponent };
//# sourceMappingURL=data:application/json;base64,