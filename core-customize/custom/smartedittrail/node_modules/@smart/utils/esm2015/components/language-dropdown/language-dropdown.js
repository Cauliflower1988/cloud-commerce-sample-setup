/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import { DEFAULT_LANGUAGE_ISO, SWITCH_LANGUAGE_EVENT } from '../../constants';
import { LanguageDropdownHelper, LanguageSortStrategy } from './language-dropdown-helper';
import { LanguageDropdownAdapter } from './language-dropdown-adapter';
export class LanguageDropdown {
    constructor(languageService, eventService) {
        this.languageService = languageService;
        this.eventService = eventService;
        this.languageSortStrategy = LanguageSortStrategy.Default;
        this.selectedLanguage = null;
        this.items = [];
        this.initialLanguage = null;
        this.languages = [];
        this.unRegisterEventService = null;
    }
    ngOnInit() {
        Promise.all([
            this.languageService.getResolveLocale(),
            this.languageService.getToolingLanguages()
        ]).then(([isoCode, languages]) => {
            this.items = languages.map(LanguageDropdownAdapter.transform);
            this.languages = languages;
            this.setSelectedLanguage(isoCode);
            this.setInitialLanguage(isoCode);
        });
        this.unRegisterEventService = this.eventService.subscribe(SWITCH_LANGUAGE_EVENT, () => this.handleLanguageChange());
    }
    ngOnDestroy() {
        this.unRegisterEventService();
    }
    /**
     * Triggered when an user selects a language.
     * @param {IToolingLanguage} language
     */
    onSelectedLanguage(item) {
        this.languageService.setSelectedToolingLanguage(item.value);
    }
    /**
     * Set initial language to be displayed in dropdown
     *
     * @param {string} isoCode
     */
    setInitialLanguage(isoCode) {
        this.initialLanguage =
            this.items.find(LanguageDropdownHelper.findSelectLanguageWithIsoCodePredicate(isoCode)) ||
                this.items.find(LanguageDropdownHelper.findSelectLanguageWithIsoCodePredicate(DEFAULT_LANGUAGE_ISO));
    }
    /**
     * Triggered onInit and when language service sets a new language.
     *
     * @param {IToolingLanguage[]} languages
     * @param {string} isoCode
     */
    setSelectedLanguage(isoCode) {
        this.selectedLanguage = LanguageDropdownHelper.findLanguageWithIsoCode(isoCode, this.languages);
        if (this.selectedLanguage) {
            const sortedLanguages = LanguageDropdownHelper.order(this.selectedLanguage, this.languages, { strategy: this.languageSortStrategy });
            this.items = sortedLanguages.map(LanguageDropdownAdapter.transform);
            return;
        }
        // In case the iso code is too specific, it will use the more generic iso code to set the language.
        this.languageService.getResolveLocaleIsoCode().then((code) => {
            this.selectedLanguage = LanguageDropdownHelper.findLanguageWithIsoCode(code, this.languages);
            const sortedLanguages = LanguageDropdownHelper.order(this.selectedLanguage, this.languages, { strategy: this.languageSortStrategy });
            this.items = sortedLanguages.map(LanguageDropdownAdapter.transform);
        });
    }
    /**
     * Callback for setting the selected language.
     */
    handleLanguageChange() {
        this.languageService.getResolveLocale().then((isoCode) => {
            this.setSelectedLanguage(isoCode);
        });
    }
}
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LanguageDropdown.prototype, "languageSortStrategy", void 0);
//# sourceMappingURL=data:application/json;base64,