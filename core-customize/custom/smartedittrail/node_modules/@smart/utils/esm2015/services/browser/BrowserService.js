/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
export var SUPPORTED_BROWSERS;
(function (SUPPORTED_BROWSERS) {
    SUPPORTED_BROWSERS[SUPPORTED_BROWSERS["IE"] = 0] = "IE";
    SUPPORTED_BROWSERS[SUPPORTED_BROWSERS["CHROME"] = 1] = "CHROME";
    SUPPORTED_BROWSERS[SUPPORTED_BROWSERS["FIREFOX"] = 2] = "FIREFOX";
    SUPPORTED_BROWSERS[SUPPORTED_BROWSERS["EDGE"] = 3] = "EDGE";
    SUPPORTED_BROWSERS[SUPPORTED_BROWSERS["SAFARI"] = 4] = "SAFARI";
    SUPPORTED_BROWSERS[SUPPORTED_BROWSERS["UNKNOWN"] = 5] = "UNKNOWN";
})(SUPPORTED_BROWSERS || (SUPPORTED_BROWSERS = {}));
export class BrowserService {
    constructor() {
        /*
            It is always better to detect a browser via features. Unfortunately, it's becoming really hard to identify
            Safari, since newer versions do not match the previous ones. Thus, we have to rely on User Agent as the last
            option.
        */
        this._isSafari = () => {
            // return this.getCurrentBrowser() === SUPPORTED_BROWSERS.SAFARI;
            const userAgent = window.navigator.userAgent;
            const vendor = window.navigator.vendor;
            const testFeature = /constructor/i.test(function HTMLElementConstructor() {
                //
            }.toString());
            const testUserAgent = vendor && vendor.indexOf('Apple') > -1 && userAgent && !userAgent.match('CriOS');
            return testFeature || testUserAgent;
        };
        this.isIE = () => {
            return this.getCurrentBrowser() === SUPPORTED_BROWSERS.IE;
        };
        this.isFF = () => {
            return this.getCurrentBrowser() === SUPPORTED_BROWSERS.FIREFOX;
        };
        this.isSafari = () => {
            return this.getCurrentBrowser() === SUPPORTED_BROWSERS.SAFARI;
        };
    }
    getCurrentBrowser() {
        /* forbiddenNameSpaces window as any:false */
        const anyWindow = window;
        let browser = SUPPORTED_BROWSERS.UNKNOWN;
        if (typeof anyWindow.InstallTrigger !== 'undefined') {
            browser = SUPPORTED_BROWSERS.FIREFOX;
        }
        else if ( /*@cc_on!@*/false || !!document.documentMode) {
            browser = SUPPORTED_BROWSERS.IE;
        }
        else if (!!anyWindow.StyleMedia) {
            browser = SUPPORTED_BROWSERS.EDGE;
        }
        else if (!!anyWindow.chrome && !!anyWindow.chrome.webstore) {
            browser = SUPPORTED_BROWSERS.CHROME;
        }
        else if (this._isSafari()) {
            browser = SUPPORTED_BROWSERS.SAFARI;
        }
        return browser;
    }
    getBrowserLocale() {
        const locale = window.navigator.language.split('-');
        return locale.length === 1 ? locale[0] : locale[0] + '_' + locale[1].toUpperCase();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJvd3NlclNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac21hcnQvdXRpbHMvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9icm93c2VyL0Jyb3dzZXJTZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUVILE1BQU0sQ0FBTixJQUFZLGtCQU9YO0FBUEQsV0FBWSxrQkFBa0I7SUFDMUIsdURBQUUsQ0FBQTtJQUNGLCtEQUFNLENBQUE7SUFDTixpRUFBTyxDQUFBO0lBQ1AsMkRBQUksQ0FBQTtJQUNKLCtEQUFNLENBQUE7SUFDTixpRUFBTyxDQUFBO0FBQ1gsQ0FBQyxFQVBXLGtCQUFrQixLQUFsQixrQkFBa0IsUUFPN0I7QUFDRCxNQUFNLE9BQU8sY0FBYztJQUEzQjtRQW9CSTs7OztVQUlEO1FBQ0MsY0FBUyxHQUFHLEdBQUcsRUFBRTtZQUNiLGlFQUFpRTtZQUNqRSxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztZQUM3QyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztZQUV2QyxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUNuQyxTQUFTLHNCQUFzQjtnQkFDM0IsRUFBRTtZQUNOLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FDZixDQUFDO1lBQ0YsTUFBTSxhQUFhLEdBQ2YsTUFBTSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksU0FBUyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUVyRixPQUFPLFdBQVcsSUFBSSxhQUFhLENBQUM7UUFDeEMsQ0FBQyxDQUFDO1FBRUYsU0FBSSxHQUFHLEdBQUcsRUFBRTtZQUNSLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixFQUFFLEtBQUssa0JBQWtCLENBQUMsRUFBRSxDQUFDO1FBQzlELENBQUMsQ0FBQztRQUVGLFNBQUksR0FBRyxHQUFHLEVBQUU7WUFDUixPQUFPLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLGtCQUFrQixDQUFDLE9BQU8sQ0FBQztRQUNuRSxDQUFDLENBQUM7UUFFRixhQUFRLEdBQUcsR0FBRyxFQUFFO1lBQ1osT0FBTyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7UUFDbEUsQ0FBQyxDQUFDO0lBTU4sQ0FBQztJQXhERyxpQkFBaUI7UUFDYiw2Q0FBNkM7UUFDN0MsTUFBTSxTQUFTLEdBQUcsTUFBYSxDQUFDO1FBQ2hDLElBQUksT0FBTyxHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQztRQUN6QyxJQUFJLE9BQU8sU0FBUyxDQUFDLGNBQWMsS0FBSyxXQUFXLEVBQUU7WUFDakQsT0FBTyxHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQztTQUN4QzthQUFNLEtBQUksWUFBYSxLQUFLLElBQUksQ0FBQyxDQUFFLFFBQWdCLENBQUMsWUFBWSxFQUFFO1lBQy9ELE9BQU8sR0FBRyxrQkFBa0IsQ0FBQyxFQUFFLENBQUM7U0FDbkM7YUFBTSxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFO1lBQy9CLE9BQU8sR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUM7U0FDckM7YUFBTSxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUMxRCxPQUFPLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDO1NBQ3ZDO2FBQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDekIsT0FBTyxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQztTQUN2QztRQUVELE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7SUFtQ0QsZ0JBQWdCO1FBQ1osTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BELE9BQU8sTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkYsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG5cbmV4cG9ydCBlbnVtIFNVUFBPUlRFRF9CUk9XU0VSUyB7XG4gICAgSUUsXG4gICAgQ0hST01FLFxuICAgIEZJUkVGT1gsXG4gICAgRURHRSxcbiAgICBTQUZBUkksXG4gICAgVU5LTk9XTlxufVxuZXhwb3J0IGNsYXNzIEJyb3dzZXJTZXJ2aWNlIHtcbiAgICBnZXRDdXJyZW50QnJvd3NlcigpOiBTVVBQT1JURURfQlJPV1NFUlMge1xuICAgICAgICAvKiBmb3JiaWRkZW5OYW1lU3BhY2VzIHdpbmRvdyBhcyBhbnk6ZmFsc2UgKi9cbiAgICAgICAgY29uc3QgYW55V2luZG93ID0gd2luZG93IGFzIGFueTtcbiAgICAgICAgbGV0IGJyb3dzZXIgPSBTVVBQT1JURURfQlJPV1NFUlMuVU5LTk9XTjtcbiAgICAgICAgaWYgKHR5cGVvZiBhbnlXaW5kb3cuSW5zdGFsbFRyaWdnZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBicm93c2VyID0gU1VQUE9SVEVEX0JST1dTRVJTLkZJUkVGT1g7XG4gICAgICAgIH0gZWxzZSBpZiAoLypAY2Nfb24hQCovIGZhbHNlIHx8ICEhKGRvY3VtZW50IGFzIGFueSkuZG9jdW1lbnRNb2RlKSB7XG4gICAgICAgICAgICBicm93c2VyID0gU1VQUE9SVEVEX0JST1dTRVJTLklFO1xuICAgICAgICB9IGVsc2UgaWYgKCEhYW55V2luZG93LlN0eWxlTWVkaWEpIHtcbiAgICAgICAgICAgIGJyb3dzZXIgPSBTVVBQT1JURURfQlJPV1NFUlMuRURHRTtcbiAgICAgICAgfSBlbHNlIGlmICghIWFueVdpbmRvdy5jaHJvbWUgJiYgISFhbnlXaW5kb3cuY2hyb21lLndlYnN0b3JlKSB7XG4gICAgICAgICAgICBicm93c2VyID0gU1VQUE9SVEVEX0JST1dTRVJTLkNIUk9NRTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9pc1NhZmFyaSgpKSB7XG4gICAgICAgICAgICBicm93c2VyID0gU1VQUE9SVEVEX0JST1dTRVJTLlNBRkFSSTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBicm93c2VyO1xuICAgIH1cblxuICAgIC8qXG5cdFx0SXQgaXMgYWx3YXlzIGJldHRlciB0byBkZXRlY3QgYSBicm93c2VyIHZpYSBmZWF0dXJlcy4gVW5mb3J0dW5hdGVseSwgaXQncyBiZWNvbWluZyByZWFsbHkgaGFyZCB0byBpZGVudGlmeSBcblx0XHRTYWZhcmksIHNpbmNlIG5ld2VyIHZlcnNpb25zIGRvIG5vdCBtYXRjaCB0aGUgcHJldmlvdXMgb25lcy4gVGh1cywgd2UgaGF2ZSB0byByZWx5IG9uIFVzZXIgQWdlbnQgYXMgdGhlIGxhc3Rcblx0XHRvcHRpb24uIFxuXHQqL1xuICAgIF9pc1NhZmFyaSA9ICgpID0+IHtcbiAgICAgICAgLy8gcmV0dXJuIHRoaXMuZ2V0Q3VycmVudEJyb3dzZXIoKSA9PT0gU1VQUE9SVEVEX0JST1dTRVJTLlNBRkFSSTtcbiAgICAgICAgY29uc3QgdXNlckFnZW50ID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgICAgIGNvbnN0IHZlbmRvciA9IHdpbmRvdy5uYXZpZ2F0b3IudmVuZG9yO1xuXG4gICAgICAgIGNvbnN0IHRlc3RGZWF0dXJlID0gL2NvbnN0cnVjdG9yL2kudGVzdChcbiAgICAgICAgICAgIGZ1bmN0aW9uIEhUTUxFbGVtZW50Q29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIH0udG9TdHJpbmcoKVxuICAgICAgICApO1xuICAgICAgICBjb25zdCB0ZXN0VXNlckFnZW50ID1cbiAgICAgICAgICAgIHZlbmRvciAmJiB2ZW5kb3IuaW5kZXhPZignQXBwbGUnKSA+IC0xICYmIHVzZXJBZ2VudCAmJiAhdXNlckFnZW50Lm1hdGNoKCdDcmlPUycpO1xuXG4gICAgICAgIHJldHVybiB0ZXN0RmVhdHVyZSB8fCB0ZXN0VXNlckFnZW50O1xuICAgIH07XG5cbiAgICBpc0lFID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50QnJvd3NlcigpID09PSBTVVBQT1JURURfQlJPV1NFUlMuSUU7XG4gICAgfTtcblxuICAgIGlzRkYgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRCcm93c2VyKCkgPT09IFNVUFBPUlRFRF9CUk9XU0VSUy5GSVJFRk9YO1xuICAgIH07XG5cbiAgICBpc1NhZmFyaSA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudEJyb3dzZXIoKSA9PT0gU1VQUE9SVEVEX0JST1dTRVJTLlNBRkFSSTtcbiAgICB9O1xuXG4gICAgZ2V0QnJvd3NlckxvY2FsZSgpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBsb2NhbGUgPSB3aW5kb3cubmF2aWdhdG9yLmxhbmd1YWdlLnNwbGl0KCctJyk7XG4gICAgICAgIHJldHVybiBsb2NhbGUubGVuZ3RoID09PSAxID8gbG9jYWxlWzBdIDogbG9jYWxlWzBdICsgJ18nICsgbG9jYWxlWzFdLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxufVxuIl19