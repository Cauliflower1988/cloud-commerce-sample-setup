/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as lodash from 'lodash';
import { Injectable } from '@angular/core';
import { take } from 'rxjs/operators';
import { HttpUtils, UrlUtils } from '../../../utils';
import { LogService } from '../../../services/log.service';
import { HttpBackendService } from './http-backend.service';
/*
 * This is the place where the entries through HttpBackenService invocations are being used.
 * All outbound http requests are funneled through here, when a match from HttpBackenService entries
 * is found, the request is intercepted and the specified mock is returned with especified status code.
 * If no match is found, the http request is effectively sent over the wire
 */
let BackendInterceptor = class BackendInterceptor {
    constructor(httpBackendService, httpUtils, urlUtils, logService) {
        this.httpBackendService = httpBackendService;
        this.httpUtils = httpUtils;
        this.urlUtils = urlUtils;
        this.logService = logService;
    }
    intercept(request, next) {
        const backendMockRespond = this.httpBackendService.findMatchingMock(request);
        if (!backendMockRespond) {
            return next.handle(request);
        }
        let response;
        if (typeof backendMockRespond === 'object') {
            response = [200, lodash.cloneDeep(backendMockRespond)];
        }
        else {
            // if (typeof backendMockRespond === 'function')
            let data = null;
            if (request.method === 'GET') {
                data = decodeURIComponent(this.urlUtils.getQueryString(this.httpUtils.copyHttpParamsOrHeaders(request.params)));
            }
            else if (request.headers.get('Content-Type') === 'application/x-www-form-urlencoded') {
                data = request.body; // it is a query string
            }
            else if (request.method === 'POST' || request.method === 'PUT') {
                data = JSON.stringify(request.body);
            }
            const headers = this.httpUtils.copyHttpParamsOrHeaders(request.headers);
            response = backendMockRespond(request.method, decodeURIComponent(request.urlWithParams), data, headers);
        }
        this.logService.debug(`backend ${status} response for ${request.url}: `);
        return this.httpUtils.buildHttpResponse(request, response).pipe(take(1));
    }
};
BackendInterceptor.ctorParameters = () => [
    { type: HttpBackendService },
    { type: HttpUtils },
    { type: UrlUtils },
    { type: LogService }
];
BackendInterceptor = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [HttpBackendService,
        HttpUtils,
        UrlUtils,
        LogService])
], BackendInterceptor);
export { BackendInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZC5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2ludGVyY2VwdG9ycy9iYWNrZW5kL2JhY2tlbmQuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRztBQUNILE9BQU8sS0FBSyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBRWpDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXRDLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzNELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTVEOzs7OztHQUtHO0FBRUgsSUFBYSxrQkFBa0IsR0FBL0IsTUFBYSxrQkFBa0I7SUFDM0IsWUFDWSxrQkFBc0MsRUFDdEMsU0FBb0IsRUFDcEIsUUFBa0IsRUFDbEIsVUFBc0I7UUFIdEIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QyxjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQ3BCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUMvQixDQUFDO0lBRUosU0FBUyxDQUFDLE9BQXlCLEVBQUUsSUFBaUI7UUFDbEQsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFN0UsSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQ3JCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMvQjtRQUVELElBQUksUUFBb0YsQ0FBQztRQUV6RixJQUFJLE9BQU8sa0JBQWtCLEtBQUssUUFBUSxFQUFFO1lBQ3hDLFFBQVEsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztTQUMxRDthQUFNO1lBQ0gsZ0RBQWdEO1lBQ2hELElBQUksSUFBSSxHQUFrQixJQUFJLENBQUM7WUFDL0IsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRTtnQkFDMUIsSUFBSSxHQUFHLGtCQUFrQixDQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FDeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQ3pELENBQ0osQ0FBQzthQUNMO2lCQUFNLElBQ0gsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEtBQUssbUNBQW1DLEVBQzdFO2dCQUNFLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsdUJBQXVCO2FBQy9DO2lCQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUU7Z0JBQzlELElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN2QztZQUNELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FFckUsQ0FBQztZQUVGLFFBQVEsR0FBRyxrQkFBa0IsQ0FDekIsT0FBTyxDQUFDLE1BQU0sRUFDZCxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEVBQ3pDLElBQUksRUFDSixPQUFPLENBQ1YsQ0FBQztTQUNMO1FBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsV0FBVyxNQUFNLGlCQUFpQixPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUV6RSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RSxDQUFDO0NBQ0osQ0FBQTs7WUFoRG1DLGtCQUFrQjtZQUMzQixTQUFTO1lBQ1YsUUFBUTtZQUNOLFVBQVU7O0FBTHpCLGtCQUFrQjtJQUQ5QixVQUFVLEVBQUU7NkNBR3VCLGtCQUFrQjtRQUMzQixTQUFTO1FBQ1YsUUFBUTtRQUNOLFVBQVU7R0FMekIsa0JBQWtCLENBa0Q5QjtTQWxEWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBTQVAgU0Ugb3IgYW4gU0FQIGFmZmlsaWF0ZSBjb21wYW55LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQG1vZHVsZSBzbWFydHV0aWxzXG4gKi9cbmltcG9ydCAqIGFzIGxvZGFzaCBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgSHR0cEV2ZW50LCBIdHRwSGFuZGxlciwgSHR0cEludGVyY2VwdG9yLCBIdHRwUmVxdWVzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBQYXlsb2FkLCBUeXBlZE1hcCB9IGZyb20gJy4uLy4uLy4uL2R0b3MnO1xuaW1wb3J0IHsgSHR0cFV0aWxzLCBVcmxVdGlscyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IExvZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9sb2cuc2VydmljZSc7XG5pbXBvcnQgeyBIdHRwQmFja2VuZFNlcnZpY2UgfSBmcm9tICcuL2h0dHAtYmFja2VuZC5zZXJ2aWNlJztcblxuLypcbiAqIFRoaXMgaXMgdGhlIHBsYWNlIHdoZXJlIHRoZSBlbnRyaWVzIHRocm91Z2ggSHR0cEJhY2tlblNlcnZpY2UgaW52b2NhdGlvbnMgYXJlIGJlaW5nIHVzZWQuXG4gKiBBbGwgb3V0Ym91bmQgaHR0cCByZXF1ZXN0cyBhcmUgZnVubmVsZWQgdGhyb3VnaCBoZXJlLCB3aGVuIGEgbWF0Y2ggZnJvbSBIdHRwQmFja2VuU2VydmljZSBlbnRyaWVzXG4gKiBpcyBmb3VuZCwgdGhlIHJlcXVlc3QgaXMgaW50ZXJjZXB0ZWQgYW5kIHRoZSBzcGVjaWZpZWQgbW9jayBpcyByZXR1cm5lZCB3aXRoIGVzcGVjaWZpZWQgc3RhdHVzIGNvZGUuXG4gKiBJZiBubyBtYXRjaCBpcyBmb3VuZCwgdGhlIGh0dHAgcmVxdWVzdCBpcyBlZmZlY3RpdmVseSBzZW50IG92ZXIgdGhlIHdpcmVcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJhY2tlbmRJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgaHR0cEJhY2tlbmRTZXJ2aWNlOiBIdHRwQmFja2VuZFNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgaHR0cFV0aWxzOiBIdHRwVXRpbHMsXG4gICAgICAgIHByaXZhdGUgdXJsVXRpbHM6IFVybFV0aWxzLFxuICAgICAgICBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2VcbiAgICApIHt9XG5cbiAgICBpbnRlcmNlcHQocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgICAgIGNvbnN0IGJhY2tlbmRNb2NrUmVzcG9uZCA9IHRoaXMuaHR0cEJhY2tlbmRTZXJ2aWNlLmZpbmRNYXRjaGluZ01vY2socmVxdWVzdCk7XG5cbiAgICAgICAgaWYgKCFiYWNrZW5kTW9ja1Jlc3BvbmQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXF1ZXN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZTogW251bWJlciwgUGF5bG9hZCB8IFBheWxvYWRbXV0gfCBQcm9taXNlTGlrZTxbbnVtYmVyLCBQYXlsb2FkIHwgUGF5bG9hZFtdXT47XG5cbiAgICAgICAgaWYgKHR5cGVvZiBiYWNrZW5kTW9ja1Jlc3BvbmQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXNwb25zZSA9IFsyMDAsIGxvZGFzaC5jbG9uZURlZXAoYmFja2VuZE1vY2tSZXNwb25kKV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpZiAodHlwZW9mIGJhY2tlbmRNb2NrUmVzcG9uZCA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIGxldCBkYXRhOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0Lm1ldGhvZCA9PT0gJ0dFVCcpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZGVjb2RlVVJJQ29tcG9uZW50KFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVybFV0aWxzLmdldFF1ZXJ5U3RyaW5nKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5odHRwVXRpbHMuY29weUh0dHBQYXJhbXNPckhlYWRlcnMocmVxdWVzdC5wYXJhbXMpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMuZ2V0KCdDb250ZW50LVR5cGUnKSA9PT0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSByZXF1ZXN0LmJvZHk7IC8vIGl0IGlzIGEgcXVlcnkgc3RyaW5nXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlcXVlc3QubWV0aG9kID09PSAnUE9TVCcgfHwgcmVxdWVzdC5tZXRob2QgPT09ICdQVVQnKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IEpTT04uc3RyaW5naWZ5KHJlcXVlc3QuYm9keSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBoZWFkZXJzID0gdGhpcy5odHRwVXRpbHMuY29weUh0dHBQYXJhbXNPckhlYWRlcnMocmVxdWVzdC5oZWFkZXJzKSBhcyBUeXBlZE1hcDxcbiAgICAgICAgICAgICAgICBzdHJpbmdcbiAgICAgICAgICAgID47XG5cbiAgICAgICAgICAgIHJlc3BvbnNlID0gYmFja2VuZE1vY2tSZXNwb25kKFxuICAgICAgICAgICAgICAgIHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgICAgICAgIGRlY29kZVVSSUNvbXBvbmVudChyZXF1ZXN0LnVybFdpdGhQYXJhbXMpLFxuICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgaGVhZGVyc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZGVidWcoYGJhY2tlbmQgJHtzdGF0dXN9IHJlc3BvbnNlIGZvciAke3JlcXVlc3QudXJsfTogYCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cFV0aWxzLmJ1aWxkSHR0cFJlc3BvbnNlKHJlcXVlc3QsIHJlc3BvbnNlKS5waXBlKHRha2UoMSkpO1xuICAgIH1cbn1cbiJdfQ==