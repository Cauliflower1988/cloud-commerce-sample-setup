/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
var RestServiceFactory_1;
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as lodash from 'lodash';
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { RestClient } from './rest-client';
import { LogService } from '../log.service';
/** @internal */
let RestServiceFactory = RestServiceFactory_1 = class RestServiceFactory {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.map = new Map();
        this.basePath = null;
        this.DOMAIN = null;
        this.IDENTIFIER = 'identifier';
    }
    static setGlobalBasePath(globalBasePath) {
        if (!RestServiceFactory_1.globalBasePath) {
            RestServiceFactory_1.globalBasePath = globalBasePath;
        }
        else {
            RestServiceFactory_1.logService.warn('The value of a global base path was already set. ' +
                'Update is not possible, the value remained unchanged!');
        }
    }
    static getGlobalBasePath() {
        return RestServiceFactory_1.globalBasePath ? RestServiceFactory_1.globalBasePath : '';
    }
    setDomain(DOMAIN) {
        this.DOMAIN = DOMAIN;
    }
    setBasePath(basePath) {
        this.basePath = basePath;
    }
    get(uri, identifier = this.IDENTIFIER) {
        if (this.map.has(uri + identifier)) {
            return this.map.get(uri + identifier);
        }
        if (!/^https?\:\/\//.test(uri)) {
            const newBasePath = this.getNewBasePath();
            const basePathURI = lodash.isEmpty(newBasePath)
                ? uri
                : newBasePath + (/^\//.test(uri) ? uri : `/${uri}`);
            uri = this.shouldAppendDomain(uri) ? `${this.DOMAIN}/${uri}` : basePathURI;
        }
        const restClient = new RestClient(this.httpClient, uri, identifier);
        this.map.set(uri + identifier, restClient);
        return restClient;
    }
    shouldAppendDomain(uri) {
        return !!this.DOMAIN && !/^\//.test(uri);
    }
    getNewBasePath() {
        return this.basePath ? this.basePath : RestServiceFactory_1.globalBasePath;
    }
};
RestServiceFactory.globalBasePath = null;
RestServiceFactory.logService = new LogService();
RestServiceFactory.ctorParameters = () => [
    { type: HttpClient }
];
RestServiceFactory = RestServiceFactory_1 = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [HttpClient])
], RestServiceFactory);
export { RestServiceFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdC1zZXJ2aWNlLmZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac21hcnQvdXRpbHMvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9yZXN0L3Jlc3Qtc2VydmljZS5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7OztHQUdHO0FBQ0gsT0FBTyxLQUFLLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDakMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUMsZ0JBQWdCO0FBRWhCLElBQWEsa0JBQWtCLDBCQUEvQixNQUFhLGtCQUFrQjtJQXVCM0IsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUxsQyxRQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNoQixhQUFRLEdBQWtCLElBQUksQ0FBQztRQUMvQixXQUFNLEdBQWtCLElBQUksQ0FBQztRQUM3QixlQUFVLEdBQVcsWUFBWSxDQUFDO0lBRUcsQ0FBQztJQXRCOUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLGNBQXNCO1FBQzNDLElBQUksQ0FBQyxvQkFBa0IsQ0FBQyxjQUFjLEVBQUU7WUFDcEMsb0JBQWtCLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztTQUN0RDthQUFNO1lBQ0gsb0JBQWtCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDOUIsbURBQW1EO2dCQUMvQyx1REFBdUQsQ0FDOUQsQ0FBQztTQUNMO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxpQkFBaUI7UUFDcEIsT0FBTyxvQkFBa0IsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLG9CQUFrQixDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3RGLENBQUM7SUFXRCxTQUFTLENBQUMsTUFBYztRQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN6QixDQUFDO0lBRUQsV0FBVyxDQUFDLFFBQWdCO1FBQ3hCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzdCLENBQUM7SUFFRCxHQUFHLENBQUksR0FBVyxFQUFFLGFBQXFCLElBQUksQ0FBQyxVQUFVO1FBQ3BELElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQyxFQUFFO1lBQ2hDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQyxDQUFDO1NBQ3pDO1FBRUQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDNUIsTUFBTSxXQUFXLEdBQWtCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN6RCxNQUFNLFdBQVcsR0FBVyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztnQkFDbkQsQ0FBQyxDQUFDLEdBQUc7Z0JBQ0wsQ0FBQyxDQUFDLFdBQVcsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBRXhELEdBQUcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO1NBQzlFO1FBRUQsTUFBTSxVQUFVLEdBQWtCLElBQUksVUFBVSxDQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3RGLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDM0MsT0FBTyxVQUFVLENBQUM7SUFDdEIsQ0FBQztJQUVPLGtCQUFrQixDQUFDLEdBQVc7UUFDbEMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVPLGNBQWM7UUFDbEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxvQkFBa0IsQ0FBQyxjQUFjLENBQUM7SUFDN0UsQ0FBQztDQUNKLENBQUE7QUEzQ2tCLGlDQUFjLEdBQWtCLElBQUksQ0FBQztBQUNyQyw2QkFBVSxHQUFlLElBQUksVUFBVSxFQUFFLENBQUM7O1lBTXpCLFVBQVU7O0FBdkJqQyxrQkFBa0I7SUFEOUIsVUFBVSxFQUFFOzZDQXdCdUIsVUFBVTtHQXZCakMsa0JBQWtCLENBMkQ5QjtTQTNEWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBTQVAgU0Ugb3IgYW4gU0FQIGFmZmlsaWF0ZSBjb21wYW55LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQG1vZHVsZSBzbWFydHV0aWxzXG4gKi9cbmltcG9ydCAqIGFzIGxvZGFzaCBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IElSZXN0U2VydmljZUZhY3RvcnkgfSBmcm9tICcuL2ktcmVzdC1zZXJ2aWNlLmZhY3RvcnknO1xuaW1wb3J0IHsgSVJlc3RTZXJ2aWNlIH0gZnJvbSAnLi9pLXJlc3Qtc2VydmljZSc7XG5pbXBvcnQgeyBSZXN0Q2xpZW50IH0gZnJvbSAnLi9yZXN0LWNsaWVudCc7XG5pbXBvcnQgeyBMb2dTZXJ2aWNlIH0gZnJvbSAnLi4vbG9nLnNlcnZpY2UnO1xuXG4vKiogQGludGVybmFsICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUmVzdFNlcnZpY2VGYWN0b3J5IGltcGxlbWVudHMgSVJlc3RTZXJ2aWNlRmFjdG9yeSB7XG4gICAgc3RhdGljIHNldEdsb2JhbEJhc2VQYXRoKGdsb2JhbEJhc2VQYXRoOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKCFSZXN0U2VydmljZUZhY3RvcnkuZ2xvYmFsQmFzZVBhdGgpIHtcbiAgICAgICAgICAgIFJlc3RTZXJ2aWNlRmFjdG9yeS5nbG9iYWxCYXNlUGF0aCA9IGdsb2JhbEJhc2VQYXRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgUmVzdFNlcnZpY2VGYWN0b3J5LmxvZ1NlcnZpY2Uud2FybihcbiAgICAgICAgICAgICAgICAnVGhlIHZhbHVlIG9mIGEgZ2xvYmFsIGJhc2UgcGF0aCB3YXMgYWxyZWFkeSBzZXQuICcgK1xuICAgICAgICAgICAgICAgICAgICAnVXBkYXRlIGlzIG5vdCBwb3NzaWJsZSwgdGhlIHZhbHVlIHJlbWFpbmVkIHVuY2hhbmdlZCEnXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGdldEdsb2JhbEJhc2VQYXRoKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBSZXN0U2VydmljZUZhY3RvcnkuZ2xvYmFsQmFzZVBhdGggPyBSZXN0U2VydmljZUZhY3RvcnkuZ2xvYmFsQmFzZVBhdGggOiAnJztcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBnbG9iYWxCYXNlUGF0aDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gICAgcHJpdmF0ZSBzdGF0aWMgbG9nU2VydmljZTogTG9nU2VydmljZSA9IG5ldyBMb2dTZXJ2aWNlKCk7XG4gICAgcHJpdmF0ZSBtYXAgPSBuZXcgTWFwKCk7XG4gICAgcHJpdmF0ZSBiYXNlUGF0aDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gICAgcHJpdmF0ZSBET01BSU46IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICAgIHByaXZhdGUgSURFTlRJRklFUjogc3RyaW5nID0gJ2lkZW50aWZpZXInO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7fVxuXG4gICAgc2V0RG9tYWluKERPTUFJTjogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuRE9NQUlOID0gRE9NQUlOO1xuICAgIH1cblxuICAgIHNldEJhc2VQYXRoKGJhc2VQYXRoOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5iYXNlUGF0aCA9IGJhc2VQYXRoO1xuICAgIH1cblxuICAgIGdldDxUPih1cmk6IHN0cmluZywgaWRlbnRpZmllcjogc3RyaW5nID0gdGhpcy5JREVOVElGSUVSKTogSVJlc3RTZXJ2aWNlPFQ+IHtcbiAgICAgICAgaWYgKHRoaXMubWFwLmhhcyh1cmkgKyBpZGVudGlmaWVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwLmdldCh1cmkgKyBpZGVudGlmaWVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghL15odHRwcz9cXDpcXC9cXC8vLnRlc3QodXJpKSkge1xuICAgICAgICAgICAgY29uc3QgbmV3QmFzZVBhdGg6IHN0cmluZyB8IG51bGwgPSB0aGlzLmdldE5ld0Jhc2VQYXRoKCk7XG4gICAgICAgICAgICBjb25zdCBiYXNlUGF0aFVSSTogc3RyaW5nID0gbG9kYXNoLmlzRW1wdHkobmV3QmFzZVBhdGgpXG4gICAgICAgICAgICAgICAgPyB1cmlcbiAgICAgICAgICAgICAgICA6IG5ld0Jhc2VQYXRoICsgKC9eXFwvLy50ZXN0KHVyaSkgPyB1cmkgOiBgLyR7dXJpfWApO1xuXG4gICAgICAgICAgICB1cmkgPSB0aGlzLnNob3VsZEFwcGVuZERvbWFpbih1cmkpID8gYCR7dGhpcy5ET01BSU59LyR7dXJpfWAgOiBiYXNlUGF0aFVSSTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlc3RDbGllbnQ6IFJlc3RDbGllbnQ8VD4gPSBuZXcgUmVzdENsaWVudDxUPih0aGlzLmh0dHBDbGllbnQsIHVyaSwgaWRlbnRpZmllcik7XG4gICAgICAgIHRoaXMubWFwLnNldCh1cmkgKyBpZGVudGlmaWVyLCByZXN0Q2xpZW50KTtcbiAgICAgICAgcmV0dXJuIHJlc3RDbGllbnQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG91bGRBcHBlbmREb21haW4odXJpOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5ET01BSU4gJiYgIS9eXFwvLy50ZXN0KHVyaSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXROZXdCYXNlUGF0aCgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZVBhdGggPyB0aGlzLmJhc2VQYXRoIDogUmVzdFNlcnZpY2VGYWN0b3J5Lmdsb2JhbEJhc2VQYXRoO1xuICAgIH1cbn1cbiJdfQ==