/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
var SSOAuthenticationHelper_1;
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Injectable, Injector } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Deferred, PromiseUtils, WindowUtils } from '../../utils';
const SSO_DIALOG_MARKER = 'sso';
var SSO_PROPERTIES;
(function (SSO_PROPERTIES) {
    SSO_PROPERTIES["SSO_CLIENT_ID"] = "SSO_CLIENT_ID";
    SSO_PROPERTIES["SSO_AUTHENTICATION_ENTRY_POINT"] = "SSO_AUTHENTICATION_ENTRY_POINT";
    SSO_PROPERTIES["SSO_LOGOUT_ENTRY_POINT"] = "SSO_LOGOUT_ENTRY_POINT";
    SSO_PROPERTIES["SSO_OAUTH2_AUTHENTICATION_ENTRY_POINT"] = "SSO_OAUTH2_AUTHENTICATION_ENTRY_POINT";
})(SSO_PROPERTIES || (SSO_PROPERTIES = {}));
const CHILD_SMARTEDIT_SENDING_AUTHTOKEN = 'ssoAuthenticate';
const CHILD_SMARTEDIT_SENDING_AUTH_ERROR = 'ssoAuthenticateError';
const SSODIALOG_WINDOW = 'SSODIALOG_WINDOW';
/*
 * Helper to initiate a SAML /SSO autentication sequence through a pop-up
 * (because the sequence involves auto-submiting html form at some point that causes a redirect and hence would
 * loose app context if not executed in a different window)
 * that ultimately loads the app again which in turn will detect its context and do the following:
 * - will not continue loading
 * - wil post the loginToken to the /authenticate end point to retrieve oAuth access
 * - will send back to parent (through postMessage) the retrieved oAuth access
 * - will close;
 */
let SSOAuthenticationHelper = SSOAuthenticationHelper_1 = class SSOAuthenticationHelper {
    constructor(windowUtils, promiseUtils, httpClient, injector) {
        this.windowUtils = windowUtils;
        this.promiseUtils = promiseUtils;
        this.httpClient = httpClient;
        this.injector = injector;
        this.logoutIframeId = 'logoutIframe';
        this.deferred = null;
        this.listenForAuthTokenBeingSentBack();
    }
    /*
     * Initiates the SSO dialog through a pop-up
     */
    launchSSODialog() {
        this.deferred = this.promiseUtils.defer();
        const ssoAuthenticationEntryPoint = this.injector.get(SSO_PROPERTIES.SSO_AUTHENTICATION_ENTRY_POINT) +
            this.getSSOContextPath();
        this.window.open(ssoAuthenticationEntryPoint, SSODIALOG_WINDOW, 'toolbar=no,scrollbars=no,resizable=no,top=200,left=200,width=1000,height=800');
        return this.deferred.promise;
    }
    /*
     * SSO happen in a popup window launched by AuthenticationHelper#launchSSODialog().
     * Once SSO is successful, a 'LoginToken' cookie is present, this is a pre-requisite for doing a POST to the /authenticate
     * endpoint that will return the Authorization bearer token.
     * This bearer is then sent with postMessage to the opener window, i.e. the SmartEdit application that will resume the pending 401 request.
     */
    completeDialog() {
        return new Promise((resolve, reject) => {
            this.httpClient
                .post(this.injector.get(SSO_PROPERTIES.SSO_OAUTH2_AUTHENTICATION_ENTRY_POINT), { client_id: this.injector.get(SSO_PROPERTIES.SSO_CLIENT_ID) })
                .subscribe((authToken) => {
                this.window.opener.postMessage({
                    eventId: CHILD_SMARTEDIT_SENDING_AUTHTOKEN,
                    authToken
                }, this.document.location.origin);
                this.window.close();
                resolve();
            }, (httpErrorResponse) => {
                const clonableHttpErrorResponse = {
                    error: httpErrorResponse.error,
                    status: httpErrorResponse.status
                };
                this.window.opener.postMessage({
                    eventId: CHILD_SMARTEDIT_SENDING_AUTH_ERROR,
                    error: clonableHttpErrorResponse
                }, this.document.location.origin);
                this.window.close();
                reject();
            });
        });
    }
    /*
     * case of the App being a popup only meant for authentication and spun up buy the main app
     */
    isSSODialog() {
        return (this.window.name === SSODIALOG_WINDOW &&
            new RegExp(`[?&]${SSO_DIALOG_MARKER}`).test(location.search));
    }
    /*
     * case of:
     * - the App called from another app in an SSO context and that should therefore auto-authenticate with SSO
     * - last manual authentication was with SSO
     */
    isAutoSSOMain() {
        return (SSOAuthenticationHelper_1.lastAuthenticatedWithSSO ||
            (this.window.name !== SSODIALOG_WINDOW &&
                new RegExp(`[?&]${SSO_DIALOG_MARKER}`).test(location.search)));
    }
    logout() {
        let logoutIframe = this.logoutIframe;
        if (!logoutIframe) {
            logoutIframe = this.document.createElement('iframe');
            logoutIframe.id = this.logoutIframeId;
            logoutIframe.style.display = 'none';
            this.document.body.appendChild(logoutIframe);
        }
        logoutIframe.src = this.injector.get(SSO_PROPERTIES.SSO_LOGOUT_ENTRY_POINT);
        SSOAuthenticationHelper_1.lastAuthenticatedWithSSO = false;
        this.document.location.href = this.document.location.href.replace(this.getSSOContextPath(), this.document.location.pathname);
    }
    // context path of app in an SSO mode
    getSSOContextPath() {
        return `${this.document.location.pathname}?${SSO_DIALOG_MARKER}`;
    }
    listenForAuthTokenBeingSentBack() {
        this.window.addEventListener('message', (event) => {
            if (event.origin !== document.location.origin) {
                return;
            }
            this.logoutIframe && this.logoutIframe.remove();
            if (event.data.eventId === CHILD_SMARTEDIT_SENDING_AUTHTOKEN) {
                SSOAuthenticationHelper_1.lastAuthenticatedWithSSO = true;
                this.deferred && this.deferred.resolve(event.data.authToken);
            }
            else if (event.data.eventId === CHILD_SMARTEDIT_SENDING_AUTH_ERROR) {
                this.deferred && this.deferred.reject(event.data.error);
            }
        }, false);
    }
    get window() {
        return this.windowUtils.getWindow();
    }
    get document() {
        return this.window.document;
    }
    get logoutIframe() {
        return this.document.querySelector(`iframe#${this.logoutIframeId}`);
    }
};
// static in order to be shared by multiple instances
SSOAuthenticationHelper.lastAuthenticatedWithSSO = false;
SSOAuthenticationHelper.ctorParameters = () => [
    { type: WindowUtils },
    { type: PromiseUtils },
    { type: HttpClient },
    { type: Injector }
];
SSOAuthenticationHelper = SSOAuthenticationHelper_1 = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [WindowUtils,
        PromiseUtils,
        HttpClient,
        Injector])
], SSOAuthenticationHelper);
export { SSOAuthenticationHelper };
//# sourceMappingURL=data:application/json;base64,