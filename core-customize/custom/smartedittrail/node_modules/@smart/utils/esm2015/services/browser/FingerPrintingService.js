/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { stringUtils } from '../../utils';
/** @internal */
export class FingerPrintingService {
    constructor() {
        this._fingerprint = stringUtils.encode(this.getUserAgent() +
            this.getPlugins() +
            this.hasJava() +
            this.hasFlash() +
            this.hasLocalStorage() +
            this.hasSessionStorage() +
            this.hasCookie() +
            this.getTimeZone() +
            this.getLanguage() +
            this.getSystemLanguage() +
            this.hasCanvas());
    }
    /**
     * Get unique browser fingerprint information encoded in Base64.
     */
    getFingerprint() {
        return this._fingerprint;
    }
    getUserAgent() {
        return navigator.userAgent;
    }
    getPlugins() {
        const plugins = [];
        for (let i = 0, l = navigator.plugins.length; i < l; i++) {
            if (navigator.plugins[i]) {
                plugins.push(navigator.plugins[i].name);
            }
        }
        return plugins.join(',');
    }
    hasJava() {
        return navigator.javaEnabled();
    }
    hasFlash() {
        return !!navigator.plugins.namedItem('Shockwave Flash');
    }
    hasLocalStorage() {
        try {
            const hasLs = 'test-has-ls';
            localStorage.setItem(hasLs, hasLs);
            localStorage.removeItem(hasLs);
            return true;
        }
        catch (exception) {
            return false;
        }
    }
    hasSessionStorage() {
        try {
            const hasSs = 'test-has-ss';
            sessionStorage.setItem(hasSs, hasSs);
            sessionStorage.removeItem(hasSs);
            return true;
        }
        catch (exception) {
            return false;
        }
    }
    hasCookie() {
        return navigator.cookieEnabled;
    }
    getTimeZone() {
        return String(String(new Date()).split('(')[1]).split(')')[0];
    }
    getLanguage() {
        return navigator.language;
    }
    getSystemLanguage() {
        return window.navigator.language;
    }
    hasCanvas() {
        try {
            const elem = document.createElement('canvas');
            return !!(elem.getContext && elem.getContext('2d'));
        }
        catch (e) {
            return false;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmluZ2VyUHJpbnRpbmdTZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNtYXJ0L3V0aWxzLyIsInNvdXJjZXMiOlsic2VydmljZXMvYnJvd3Nlci9GaW5nZXJQcmludGluZ1NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBQ0gsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMxQyxnQkFBZ0I7QUFDaEIsTUFBTSxPQUFPLHFCQUFxQjtJQUFsQztRQUNxQixpQkFBWSxHQUFXLFdBQVcsQ0FBQyxNQUFNLENBQ3RELElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDZixJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2YsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN0QixJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNoQixJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDbEIsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3hCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FDdkIsQ0FBQztJQTZFTixDQUFDO0lBM0VHOztPQUVHO0lBQ0gsY0FBYztRQUNWLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDO0lBRU8sWUFBWTtRQUNoQixPQUFPLFNBQVMsQ0FBQyxTQUFTLENBQUM7SUFDL0IsQ0FBQztJQUVPLFVBQVU7UUFDZCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdEQsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUN0QixPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDM0M7U0FDSjtRQUNELE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRU8sT0FBTztRQUNYLE9BQU8sU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFTyxRQUFRO1FBQ1osT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRU8sZUFBZTtRQUNuQixJQUFJO1lBQ0EsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDO1lBQzVCLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ25DLFlBQVksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0IsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUFDLE9BQU8sU0FBUyxFQUFFO1lBQ2hCLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO0lBQ0wsQ0FBQztJQUVPLGlCQUFpQjtRQUNyQixJQUFJO1lBQ0EsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDO1lBQzVCLGNBQWMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3JDLGNBQWMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDakMsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUFDLE9BQU8sU0FBUyxFQUFFO1lBQ2hCLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO0lBQ0wsQ0FBQztJQUVPLFNBQVM7UUFDYixPQUFPLFNBQVMsQ0FBQyxhQUFhLENBQUM7SUFDbkMsQ0FBQztJQUVPLFdBQVc7UUFDZixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRU8sV0FBVztRQUNmLE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQztJQUM5QixDQUFDO0lBRU8saUJBQWlCO1FBQ3JCLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7SUFDckMsQ0FBQztJQUVPLFNBQVM7UUFDYixJQUFJO1lBQ0EsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM5QyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3ZEO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixPQUFPLEtBQUssQ0FBQztTQUNoQjtJQUNMLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFNBUCBTRSBvciBhbiBTQVAgYWZmaWxpYXRlIGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbW9kdWxlIHNtYXJ0dXRpbHNcbiAqL1xuaW1wb3J0IHsgc3RyaW5nVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY2xhc3MgRmluZ2VyUHJpbnRpbmdTZXJ2aWNlIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9maW5nZXJwcmludDogc3RyaW5nID0gc3RyaW5nVXRpbHMuZW5jb2RlKFxuICAgICAgICB0aGlzLmdldFVzZXJBZ2VudCgpICtcbiAgICAgICAgICAgIHRoaXMuZ2V0UGx1Z2lucygpICtcbiAgICAgICAgICAgIHRoaXMuaGFzSmF2YSgpICtcbiAgICAgICAgICAgIHRoaXMuaGFzRmxhc2goKSArXG4gICAgICAgICAgICB0aGlzLmhhc0xvY2FsU3RvcmFnZSgpICtcbiAgICAgICAgICAgIHRoaXMuaGFzU2Vzc2lvblN0b3JhZ2UoKSArXG4gICAgICAgICAgICB0aGlzLmhhc0Nvb2tpZSgpICtcbiAgICAgICAgICAgIHRoaXMuZ2V0VGltZVpvbmUoKSArXG4gICAgICAgICAgICB0aGlzLmdldExhbmd1YWdlKCkgK1xuICAgICAgICAgICAgdGhpcy5nZXRTeXN0ZW1MYW5ndWFnZSgpICtcbiAgICAgICAgICAgIHRoaXMuaGFzQ2FudmFzKClcbiAgICApO1xuXG4gICAgLyoqXG4gICAgICogR2V0IHVuaXF1ZSBicm93c2VyIGZpbmdlcnByaW50IGluZm9ybWF0aW9uIGVuY29kZWQgaW4gQmFzZTY0LlxuICAgICAqL1xuICAgIGdldEZpbmdlcnByaW50KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maW5nZXJwcmludDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFVzZXJBZ2VudCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFBsdWdpbnMoKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgcGx1Z2lucyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IG5hdmlnYXRvci5wbHVnaW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5wbHVnaW5zW2ldKSB7XG4gICAgICAgICAgICAgICAgcGx1Z2lucy5wdXNoKG5hdmlnYXRvci5wbHVnaW5zW2ldLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwbHVnaW5zLmpvaW4oJywnKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhc0phdmEoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3IuamF2YUVuYWJsZWQoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhc0ZsYXNoKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISFuYXZpZ2F0b3IucGx1Z2lucy5uYW1lZEl0ZW0oJ1Nob2Nrd2F2ZSBGbGFzaCcpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFzTG9jYWxTdG9yYWdlKCk6IGJvb2xlYW4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgaGFzTHMgPSAndGVzdC1oYXMtbHMnO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oaGFzTHMsIGhhc0xzKTtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGhhc0xzKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaGFzU2Vzc2lvblN0b3JhZ2UoKTogYm9vbGVhbiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBoYXNTcyA9ICd0ZXN0LWhhcy1zcyc7XG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGhhc1NzLCBoYXNTcyk7XG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKGhhc1NzKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaGFzQ29va2llKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLmNvb2tpZUVuYWJsZWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRUaW1lWm9uZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gU3RyaW5nKFN0cmluZyhuZXcgRGF0ZSgpKS5zcGxpdCgnKCcpWzFdKS5zcGxpdCgnKScpWzBdO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0TGFuZ3VhZ2UoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5sYW5ndWFnZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFN5c3RlbUxhbmd1YWdlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLmxhbmd1YWdlO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFzQ2FudmFzKCk6IGJvb2xlYW4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICAgICAgcmV0dXJuICEhKGVsZW0uZ2V0Q29udGV4dCAmJiBlbGVtLmdldENvbnRleHQoJzJkJykpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=