/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/*
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
import * as lodash from 'lodash';
import { Injectable } from '@angular/core';
import { of, BehaviorSubject } from 'rxjs';
import { ModalRef } from '@fundamental-ngx/core';
import { FundamentalModalButtonAction } from '../../interfaces';
let FundamentalModalManagerService = class FundamentalModalManagerService {
    constructor(modalRef) {
        this.modalRef = modalRef;
        this.title = new BehaviorSubject('');
        this.titleSuffix = new BehaviorSubject('');
        this.modalData = new BehaviorSubject({});
        this.component = new BehaviorSubject({});
        this.isDismissButtonVisible = new BehaviorSubject(true);
        this.buttons = new BehaviorSubject([]);
    }
    init() {
        this.modalData.next(this.modalRef.data.modalData);
        this.component.next(this.modalRef.data.component);
        this.buttons.next(this.modalRef.data.templateConfig.buttons || []);
        this.title.next(this.modalRef.data.templateConfig.title);
        this.titleSuffix.next(this.modalRef.data.templateConfig.titleSuffix);
        this.isDismissButtonVisible.next(this.modalRef.data.templateConfig.isDismissButtonVisible);
    }
    // getters
    getComponent() {
        return this.component.asObservable();
    }
    getTitle() {
        return this.title.asObservable();
    }
    getTitleSuffix() {
        return this.titleSuffix.asObservable();
    }
    getButtons() {
        return this.buttons.asObservable();
    }
    getModalData() {
        return this.modalData.asObservable();
    }
    getIsDismissButtonVisible() {
        return this.isDismissButtonVisible.asObservable();
    }
    // header dismiss button
    setDismissButtonVisibility(isVisible) {
        this.isDismissButtonVisible.next(isVisible);
    }
    // title
    setTitle(title) {
        this.title.next(title);
    }
    // buttons
    addButton(button) {
        this.buttons.next([...this.buttons.value, button]);
    }
    removeButton(id) {
        this.buttons.next(this.buttons.value.filter((button) => button.id !== id));
    }
    removeAllButtons() {
        this.buttons.next([]);
    }
    disableButton(id) {
        this.buttons.next(this.buttons.value.map((button) => button.id === id ? Object.assign({}, button, { disabled: true }) : button));
    }
    setDismissCallback(callback) {
        this.dismissCallback = callback;
    }
    enableButton(id) {
        this.buttons.next(this.buttons.value.map((button) => button.id === id ? Object.assign({}, button, { disabled: false }) : button));
    }
    onButtonClicked(button) {
        const callbackReturnedObservable = button.callback
            ? button.callback()
            : of(null);
        if (button.action !== FundamentalModalButtonAction.None) {
            callbackReturnedObservable.subscribe((data) => button.action === FundamentalModalButtonAction.Close
                ? this.close(data)
                : this.dismiss(data));
        }
    }
    close(data) {
        this.modalRef.close(data);
    }
    dismiss(data) {
        this.dismissCallback()
            .then(() => this.modalRef.dismiss(data))
            .catch(lodash.noop);
    }
    dismissCallback() {
        return Promise.resolve();
    }
};
FundamentalModalManagerService.ctorParameters = () => [
    { type: ModalRef }
];
FundamentalModalManagerService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [ModalRef])
], FundamentalModalManagerService);
export { FundamentalModalManagerService };
//# sourceMappingURL=data:application/json;base64,