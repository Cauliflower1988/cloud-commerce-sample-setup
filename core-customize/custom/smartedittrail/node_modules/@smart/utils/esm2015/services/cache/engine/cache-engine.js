/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
var CacheEngine_1;
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Injectable } from '@angular/core';
import { Deferred, PromiseUtils, WindowUtils } from '../../../utils';
import { LogService } from '../../log.service';
/** @internal */
let CacheEngine = CacheEngine_1 = class CacheEngine {
    constructor(windowUtils, promiseUtils, logService) {
        this.windowUtils = windowUtils;
        this.promiseUtils = promiseUtils;
        this.logService = logService;
        this.cachedItemsRegistry = [];
        this.startBackgroundMonitoringJob();
    }
    addItem(item, cacheTiming, refresh) {
        if (this.getItemIndex(item) === -1) {
            this.cachedItemsRegistry.push({
                item,
                cacheTiming,
                refresh,
                completed: false,
                processing: false,
                defer: this.promiseUtils.defer()
            });
        }
        else {
            this.logService.warn(`CacheEngine - item already exist for id: ${item.id}`);
        }
    }
    getItemById(id) {
        const match = this.cachedItemsRegistry.find((obj) => obj.item.id === id);
        return match ? match.item : null;
    }
    handle(item) {
        const obj = this.cachedItemsRegistry[this.getItemIndex(item)];
        if (obj.completed && !this.hasExpired(item)) {
            obj.defer.resolve(item.cache);
        }
        else if (!obj.processing) {
            obj.processing = true;
            this.refreshCache(obj);
        }
        return obj.defer.promise;
    }
    evict(...tags) {
        tags.forEach((tag) => {
            this.cachedItemsRegistry
                .filter((obj) => obj.item.evictionTags.indexOf(tag) > -1)
                .forEach((obj) => this.cachedItemsRegistry.splice(this.getItemIndex(obj.item), 1));
        });
    }
    // regularly go though cache data and call prebound methods to refresh data when needed.
    startBackgroundMonitoringJob() {
        this.windowUtils.runIntervalOutsideAngular(() => {
            return Promise.all(this.cachedItemsRegistry
                .filter((obj) => this.needRefresh(obj.item))
                .map((obj) => this.refreshCache(obj)));
        }, CacheEngine_1.BACKGROUND_REFRESH_INTERVAL);
    }
    refreshCache(obj) {
        return obj.refresh().then((value) => {
            // TODO: read value.metadata to refresh expiry/refresh ages.
            obj.cacheTiming.setAge(obj.item);
            obj.item.cache = value;
            obj.item.timestamp = new Date().getTime();
            obj.completed = true;
            obj.processing = false;
            obj.defer.resolve(value);
        }, (e) => {
            this.logService.debug(`CacheEngine - unable to refresh cache for id: ${obj.item.id}`, e);
            delete obj.item.cache;
            obj.defer.resolve(e);
        });
    }
    hasExpired(item) {
        return item.timestamp + item.expirationAge <= new Date().getTime();
    }
    needRefresh(item) {
        return item.timestamp + item.refreshAge <= new Date().getTime();
    }
    getItemIndex(item) {
        return this.cachedItemsRegistry.findIndex((o) => o.item.id === item.id);
    }
};
CacheEngine.BACKGROUND_REFRESH_INTERVAL = 10000;
CacheEngine.ctorParameters = () => [
    { type: WindowUtils },
    { type: PromiseUtils },
    { type: LogService }
];
CacheEngine = CacheEngine_1 = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [WindowUtils,
        PromiseUtils,
        LogService])
], CacheEngine);
export { CacheEngine };
//# sourceMappingURL=data:application/json;base64,