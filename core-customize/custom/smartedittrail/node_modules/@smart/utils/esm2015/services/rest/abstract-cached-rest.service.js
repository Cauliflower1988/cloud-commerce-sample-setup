/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
import { Cached, InvalidateCache } from '../cache';
/**
 * @ngdoc service
 * @name @smartutils.service:AbstractCachedRestService
 *
 * @description
 * Base class to implement Cache enabled {@link @smartutils.interfaces:IRestService IRestServices}.
 * <br/>Implementing classes just need declare a class level {@link @smartutils.object:@CacheConfig @CacheConfig} annotation
 * with at least one {@link @smartutils.object:CacheAction CacheAction} and one {@link @smartutils.object:EvictionTag EvictionTag}.
 * <br/>Cache policies called by the set of {@link @smartutils.object:CacheAction CacheActions} will have access to
 * REST call response headers being added to the response under "headers" property.
 * <br/>Those headers are then stripped from the response.
 *
 * <h2>Usage</h2>
 * <pre>
 * &#64;CacheConfig({actions: [rarelyChangingContent], tags: [userEvictionTag]})
 * &#64;SeInjectable()
 * export class ProductCatalogRestService extends AbstractCachedRestService<IBaseCatalogs> {
 * 	constructor(restServiceFactory: IRestServiceFactory) {
 * 		super(restServiceFactory, '/productcatalogs');
 * 	}
 * }
 * </pre>
 */
export class AbstractCachedRestService {
    constructor(restServiceFactory, uri, identifier) {
        this.innerRestService = restServiceFactory.get(uri, identifier);
        this.innerRestService.activateMetadata && this.innerRestService.activateMetadata();
    }
    getById(identifier, options) {
        return this.innerRestService.getById(identifier, options);
    }
    get(searchParams, options) {
        return this.innerRestService.get(searchParams, options);
    }
    query(searchParams, options) {
        return this.innerRestService.query(searchParams, options);
    }
    page(searchParams, options) {
        return this.innerRestService.page(searchParams, options);
    }
    update(payload, options) {
        return this.innerRestService.update(payload, options);
    }
    patch(payload, options) {
        return this.innerRestService.patch(payload, options);
    }
    remove(payload, options) {
        return this.innerRestService.remove(payload, options);
    }
    save(payload, options) {
        return this.innerRestService.save(payload, options);
    }
}
tslib_1.__decorate([
    StripResponseHeaders,
    Cached(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AbstractCachedRestService.prototype, "getById", null);
tslib_1.__decorate([
    StripResponseHeaders,
    Cached(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AbstractCachedRestService.prototype, "get", null);
tslib_1.__decorate([
    StripResponseHeaders,
    Cached(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AbstractCachedRestService.prototype, "query", null);
tslib_1.__decorate([
    StripResponseHeaders,
    Cached(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AbstractCachedRestService.prototype, "page", null);
tslib_1.__decorate([
    StripResponseHeaders,
    InvalidateCache(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AbstractCachedRestService.prototype, "update", null);
tslib_1.__decorate([
    StripResponseHeaders,
    InvalidateCache(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AbstractCachedRestService.prototype, "patch", null);
tslib_1.__decorate([
    InvalidateCache(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AbstractCachedRestService.prototype, "remove", null);
tslib_1.__decorate([
    StripResponseHeaders,
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AbstractCachedRestService.prototype, "save", null);
export function StripResponseHeaders(target, propertyName, descriptor) {
    const originalMethod = descriptor.value;
    if (originalMethod) {
        descriptor.value = function () {
            return originalMethod
                .apply(this, Array.prototype.slice.call(arguments))
                .then((response) => {
                delete response.headers;
                return response;
            });
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtY2FjaGVkLXJlc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL3Jlc3QvYWJzdHJhY3QtY2FjaGVkLXJlc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBS0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFHbkQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzQkc7QUFDSCxNQUFNLE9BQWdCLHlCQUF5QjtJQUczQyxZQUFZLGtCQUF1QyxFQUFFLEdBQVcsRUFBRSxVQUFtQjtRQUNqRixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsa0JBQWtCLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDdkYsQ0FBQztJQUlELE9BQU8sQ0FBa0IsVUFBa0IsRUFBRSxPQUFzQjtRQUMvRCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUksVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFJRCxHQUFHLENBQWtCLFlBQTJCLEVBQUUsT0FBc0I7UUFDcEUsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBSUQsS0FBSyxDQUFrQixZQUEwQixFQUFFLE9BQXNCO1FBQ3JFLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUlELElBQUksQ0FBa0IsWUFBc0IsRUFBRSxPQUFzQjtRQUNoRSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFJRCxNQUFNLENBQWtCLE9BQWdCLEVBQUUsT0FBc0I7UUFDNUQsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBSUQsS0FBSyxDQUFrQixPQUFnQixFQUFFLE9BQXNCO1FBQzNELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUdELE1BQU0sQ0FBa0IsT0FBZ0IsRUFBRSxPQUFzQjtRQUM1RCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFHRCxJQUFJLENBQWtCLE9BQWdCLEVBQUUsT0FBc0I7UUFDMUQsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN4RCxDQUFDO0NBQ0o7QUEzQ0c7SUFGQyxvQkFBb0I7SUFDcEIsTUFBTSxFQUFFOzs7O3dEQUdSO0FBSUQ7SUFGQyxvQkFBb0I7SUFDcEIsTUFBTSxFQUFFOzs7O29EQUdSO0FBSUQ7SUFGQyxvQkFBb0I7SUFDcEIsTUFBTSxFQUFFOzs7O3NEQUdSO0FBSUQ7SUFGQyxvQkFBb0I7SUFDcEIsTUFBTSxFQUFFOzs7O3FEQUdSO0FBSUQ7SUFGQyxvQkFBb0I7SUFDcEIsZUFBZSxFQUFFOzs7O3VEQUdqQjtBQUlEO0lBRkMsb0JBQW9CO0lBQ3BCLGVBQWUsRUFBRTs7OztzREFHakI7QUFHRDtJQURDLGVBQWUsRUFBRTs7Ozt1REFHakI7QUFHRDtJQURDLG9CQUFvQjs7OztxREFHcEI7QUFHTCxNQUFNLFVBQVUsb0JBQW9CLENBQ2hDLE1BQVcsRUFDWCxZQUFvQixFQUNwQixVQUF5RDtJQUV6RCxNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDO0lBRXhDLElBQUksY0FBYyxFQUFFO1FBQ2hCLFVBQVUsQ0FBQyxLQUFLLEdBQUc7WUFDZixPQUFPLGNBQWM7aUJBQ2hCLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2lCQUNsRCxJQUFJLENBQUMsQ0FBQyxRQUFhLEVBQUUsRUFBRTtnQkFDcEIsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDO2dCQUN4QixPQUFPLFFBQVEsQ0FBQztZQUNwQixDQUFDLENBQUMsQ0FBQztRQUNYLENBQUMsQ0FBQztLQUNMO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFNBUCBTRSBvciBhbiBTQVAgYWZmaWxpYXRlIGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbW9kdWxlIHNtYXJ0dXRpbHNcbiAqL1xuaW1wb3J0IHsgUGFnZSwgUGFnZWFibGUsIFBheWxvYWQgfSBmcm9tICcuLi8uLi9kdG9zJztcbmltcG9ydCB7IENhY2hlZCwgSW52YWxpZGF0ZUNhY2hlIH0gZnJvbSAnLi4vY2FjaGUnO1xuaW1wb3J0IHsgSVJlc3RPcHRpb25zLCBJUmVzdFNlcnZpY2UsIElSZXN0U2VydmljZUZhY3RvcnksIFNlYXJjaFBhcmFtcyB9IGZyb20gJy4nO1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSBAc21hcnR1dGlscy5zZXJ2aWNlOkFic3RyYWN0Q2FjaGVkUmVzdFNlcnZpY2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEJhc2UgY2xhc3MgdG8gaW1wbGVtZW50IENhY2hlIGVuYWJsZWQge0BsaW5rIEBzbWFydHV0aWxzLmludGVyZmFjZXM6SVJlc3RTZXJ2aWNlIElSZXN0U2VydmljZXN9LlxuICogPGJyLz5JbXBsZW1lbnRpbmcgY2xhc3NlcyBqdXN0IG5lZWQgZGVjbGFyZSBhIGNsYXNzIGxldmVsIHtAbGluayBAc21hcnR1dGlscy5vYmplY3Q6QENhY2hlQ29uZmlnIEBDYWNoZUNvbmZpZ30gYW5ub3RhdGlvblxuICogd2l0aCBhdCBsZWFzdCBvbmUge0BsaW5rIEBzbWFydHV0aWxzLm9iamVjdDpDYWNoZUFjdGlvbiBDYWNoZUFjdGlvbn0gYW5kIG9uZSB7QGxpbmsgQHNtYXJ0dXRpbHMub2JqZWN0OkV2aWN0aW9uVGFnIEV2aWN0aW9uVGFnfS5cbiAqIDxici8+Q2FjaGUgcG9saWNpZXMgY2FsbGVkIGJ5IHRoZSBzZXQgb2Yge0BsaW5rIEBzbWFydHV0aWxzLm9iamVjdDpDYWNoZUFjdGlvbiBDYWNoZUFjdGlvbnN9IHdpbGwgaGF2ZSBhY2Nlc3MgdG9cbiAqIFJFU1QgY2FsbCByZXNwb25zZSBoZWFkZXJzIGJlaW5nIGFkZGVkIHRvIHRoZSByZXNwb25zZSB1bmRlciBcImhlYWRlcnNcIiBwcm9wZXJ0eS5cbiAqIDxici8+VGhvc2UgaGVhZGVycyBhcmUgdGhlbiBzdHJpcHBlZCBmcm9tIHRoZSByZXNwb25zZS5cbiAqXG4gKiA8aDI+VXNhZ2U8L2gyPlxuICogPHByZT5cbiAqICYjNjQ7Q2FjaGVDb25maWcoe2FjdGlvbnM6IFtyYXJlbHlDaGFuZ2luZ0NvbnRlbnRdLCB0YWdzOiBbdXNlckV2aWN0aW9uVGFnXX0pXG4gKiAmIzY0O1NlSW5qZWN0YWJsZSgpXG4gKiBleHBvcnQgY2xhc3MgUHJvZHVjdENhdGFsb2dSZXN0U2VydmljZSBleHRlbmRzIEFic3RyYWN0Q2FjaGVkUmVzdFNlcnZpY2U8SUJhc2VDYXRhbG9ncz4ge1xuICogXHRjb25zdHJ1Y3RvcihyZXN0U2VydmljZUZhY3Rvcnk6IElSZXN0U2VydmljZUZhY3RvcnkpIHtcbiAqIFx0XHRzdXBlcihyZXN0U2VydmljZUZhY3RvcnksICcvcHJvZHVjdGNhdGFsb2dzJyk7XG4gKiBcdH1cbiAqIH1cbiAqIDwvcHJlPlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RDYWNoZWRSZXN0U2VydmljZTxUPiBpbXBsZW1lbnRzIElSZXN0U2VydmljZTxUPiB7XG4gICAgcHJvdGVjdGVkIGlubmVyUmVzdFNlcnZpY2U6IElSZXN0U2VydmljZTxUPjtcblxuICAgIGNvbnN0cnVjdG9yKHJlc3RTZXJ2aWNlRmFjdG9yeTogSVJlc3RTZXJ2aWNlRmFjdG9yeSwgdXJpOiBzdHJpbmcsIGlkZW50aWZpZXI/OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5pbm5lclJlc3RTZXJ2aWNlID0gcmVzdFNlcnZpY2VGYWN0b3J5LmdldCh1cmksIGlkZW50aWZpZXIpO1xuICAgICAgICB0aGlzLmlubmVyUmVzdFNlcnZpY2UuYWN0aXZhdGVNZXRhZGF0YSAmJiB0aGlzLmlubmVyUmVzdFNlcnZpY2UuYWN0aXZhdGVNZXRhZGF0YSgpO1xuICAgIH1cblxuICAgIEBTdHJpcFJlc3BvbnNlSGVhZGVyc1xuICAgIEBDYWNoZWQoKVxuICAgIGdldEJ5SWQ8UyBleHRlbmRzIFQgPSBUPihpZGVudGlmaWVyOiBzdHJpbmcsIG9wdGlvbnM/OiBJUmVzdE9wdGlvbnMpOiBQcm9taXNlPFMgfCBudWxsPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlubmVyUmVzdFNlcnZpY2UuZ2V0QnlJZDxTPihpZGVudGlmaWVyLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBAU3RyaXBSZXNwb25zZUhlYWRlcnNcbiAgICBAQ2FjaGVkKClcbiAgICBnZXQ8UyBleHRlbmRzIFQgPSBUPihzZWFyY2hQYXJhbXM/OiBTZWFyY2hQYXJhbXMsIG9wdGlvbnM/OiBJUmVzdE9wdGlvbnMpOiBQcm9taXNlPFMgfCBudWxsPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlubmVyUmVzdFNlcnZpY2UuZ2V0KHNlYXJjaFBhcmFtcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgQFN0cmlwUmVzcG9uc2VIZWFkZXJzXG4gICAgQENhY2hlZCgpXG4gICAgcXVlcnk8UyBleHRlbmRzIFQgPSBUPihzZWFyY2hQYXJhbXM6IFNlYXJjaFBhcmFtcywgb3B0aW9ucz86IElSZXN0T3B0aW9ucyk6IFByb21pc2U8U1tdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlubmVyUmVzdFNlcnZpY2UucXVlcnkoc2VhcmNoUGFyYW1zLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBAU3RyaXBSZXNwb25zZUhlYWRlcnNcbiAgICBAQ2FjaGVkKClcbiAgICBwYWdlPFMgZXh0ZW5kcyBUID0gVD4oc2VhcmNoUGFyYW1zOiBQYWdlYWJsZSwgb3B0aW9ucz86IElSZXN0T3B0aW9ucyk6IFByb21pc2U8UGFnZTxTPj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pbm5lclJlc3RTZXJ2aWNlLnBhZ2Uoc2VhcmNoUGFyYW1zLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBAU3RyaXBSZXNwb25zZUhlYWRlcnNcbiAgICBASW52YWxpZGF0ZUNhY2hlKClcbiAgICB1cGRhdGU8UyBleHRlbmRzIFQgPSBUPihwYXlsb2FkOiBQYXlsb2FkLCBvcHRpb25zPzogSVJlc3RPcHRpb25zKTogUHJvbWlzZTxTPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlubmVyUmVzdFNlcnZpY2UudXBkYXRlKHBheWxvYWQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIEBTdHJpcFJlc3BvbnNlSGVhZGVyc1xuICAgIEBJbnZhbGlkYXRlQ2FjaGUoKVxuICAgIHBhdGNoPFMgZXh0ZW5kcyBUID0gVD4ocGF5bG9hZDogUGF5bG9hZCwgb3B0aW9ucz86IElSZXN0T3B0aW9ucyk6IFByb21pc2U8Uz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pbm5lclJlc3RTZXJ2aWNlLnBhdGNoKHBheWxvYWQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIEBJbnZhbGlkYXRlQ2FjaGUoKVxuICAgIHJlbW92ZTxTIGV4dGVuZHMgVCA9IFQ+KHBheWxvYWQ6IFBheWxvYWQsIG9wdGlvbnM/OiBJUmVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5uZXJSZXN0U2VydmljZS5yZW1vdmUocGF5bG9hZCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgQFN0cmlwUmVzcG9uc2VIZWFkZXJzXG4gICAgc2F2ZTxTIGV4dGVuZHMgVCA9IFQ+KHBheWxvYWQ6IFBheWxvYWQsIG9wdGlvbnM/OiBJUmVzdE9wdGlvbnMpOiBQcm9taXNlPFM+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5uZXJSZXN0U2VydmljZS5zYXZlKHBheWxvYWQsIG9wdGlvbnMpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFN0cmlwUmVzcG9uc2VIZWFkZXJzKFxuICAgIHRhcmdldDogYW55LFxuICAgIHByb3BlcnR5TmFtZTogc3RyaW5nLFxuICAgIGRlc2NyaXB0b3I6IFR5cGVkUHJvcGVydHlEZXNjcmlwdG9yPCguLi54OiBhbnlbXSkgPT4gYW55PlxuKSB7XG4gICAgY29uc3Qgb3JpZ2luYWxNZXRob2QgPSBkZXNjcmlwdG9yLnZhbHVlO1xuXG4gICAgaWYgKG9yaWdpbmFsTWV0aG9kKSB7XG4gICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbE1ldGhvZFxuICAgICAgICAgICAgICAgIC5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXNwb25zZS5oZWFkZXJzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfVxufVxuIl19