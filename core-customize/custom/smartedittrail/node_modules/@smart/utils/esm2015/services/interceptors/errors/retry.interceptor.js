/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Inject, Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse, HttpRequest } from '@angular/common/http';
import { TranslateService } from '@ngx-translate/core';
import { IAlertService } from '../../../interfaces';
import { BooleanUtils } from '../../../utils';
import { clientErrorPredicate, noInternetConnectionErrorPredicate, readPredicate, retriableErrorPredicate, serverErrorPredicate, timeoutErrorPredicate, DefaultRetryStrategy, ExponentialRetryStrategy, IRetryStrategy, LinearRetryStrategy, OperationContextService } from './retries';
import { LIBRARY_NAME } from '../../../constants';
export const OPERATION_CONTEXT_TOKEN = `${LIBRARY_NAME}_OPERATION_CONTEXT`;
/**
 * @ngdoc service
 * @name @smartutils.services:retryInterceptor
 *
 * @description
 * The retryInterceptor provides the functionality to register a set of predicates with their associated retry strategies.
 * Each time an HTTP request fails, the service try to find a matching retry strategy for the given response.
 */
let RetryInterceptor = class RetryInterceptor {
    constructor(httpClient, translate, operationContextService, alertService, booleanUtils, defaultRetryStrategy, exponentialRetryStrategy, linearRetryStrategy, OPERATION_CONTEXT) {
        this.httpClient = httpClient;
        this.translate = translate;
        this.operationContextService = operationContextService;
        this.alertService = alertService;
        this.OPERATION_CONTEXT = OPERATION_CONTEXT;
        this.TRANSLATE_NAMESPACE = 'se.gracefuldegradation.';
        this.predicatesRegistry = [];
        this.requestToRetryTegistry = {};
        this.register(noInternetConnectionErrorPredicate, exponentialRetryStrategy)
            .register(booleanUtils.isAnyTruthy(clientErrorPredicate, timeoutErrorPredicate), defaultRetryStrategy)
            .register(booleanUtils.areAllTruthy(readPredicate, retriableErrorPredicate), defaultRetryStrategy)
            .register(serverErrorPredicate, exponentialRetryStrategy);
    }
    predicate(request, response) {
        return this.findMatchingStrategy(request, response) !== null;
    }
    responseError(request, response) {
        let retryStrategy = this.retrieveRetryStrategy(request);
        if (!retryStrategy) {
            const StrategyHolder = this.findMatchingStrategy(request, response);
            if (StrategyHolder) {
                this.alertService.showWarning({
                    message: this.translate.instant(this.TRANSLATE_NAMESPACE + 'stillworking')
                });
                retryStrategy = new StrategyHolder();
                retryStrategy.attemptCount = 0;
                this.storeRetryStrategy(request, retryStrategy);
            }
            else {
                return Promise.reject(response);
            }
        }
        return this.handleRetry(retryStrategy, request, response);
    }
    /**
     * @ngdoc method
     * @name @smartutils.services:retryInterceptor#register
     * @methodOf @smartutils.services:retryInterceptor
     *
     * @description
     * Register a new predicate with it's associated strategyHolder.
     *
     * @param {Function} predicate This function takes the 'response' {Object} argument and an (optional) operationContext {String}. This function must return a Boolean that is true if the given response match the predicate.
     * @param {Function} retryStrategy This function will be instanciated at run-time. See {@link @smartutils.services:IRetryStrategy IRetryStrategy}.
     *
     * @return {Object} retryInterceptor The retryInterceptor service.
     *
     * @example
     * ```js
     *      var customPredicate = function(request, response, operationContext) {
     *          return response.status === 500 && operationContext === OPERATION_CONTEXT.TOOLING;
     *      };
     *      var StrategyHolder = function() {
     *          // set the firstFastRetry value to true for the retry made immediately only for the very first retry (subsequent retries will remain subject to the calculateNextDelay response)
     *          this.firstFastRetry = true;
     *      };
     *      StrategyHolder.prototype.canRetry = function() {
     *          // this function must return a {Boolean} if the given request must be retried.
     *          // use this.attemptCount value to determine if the function should return true or false
     *      };
     *      StrategyHolder.prototype.calculateNextDelay = function() {
     *          // this function must return the next delay time {Number}
     *          // use this.attemptCount value to determine the next delay value
     *      };
     *      retryInterceptor.register(customPredicate, StrategyHolder);
     * ```
     */
    register(predicate, retryStrategy) {
        if (typeof predicate !== 'function') {
            throw new Error('retryInterceptor.register error: predicate must be a function');
        }
        if (typeof retryStrategy !== 'function') {
            throw new Error('retryInterceptor.register error: retryStrategy must be a function');
        }
        this.predicatesRegistry.unshift({
            predicate,
            retryStrategy
        });
        return this;
    }
    /**
     * Find a matching strategy for the given response and (optional) operationContext
     * If not provided, the default operationContext is OPERATION_CONTEXT.INTERACTIVE
     *
     * @param {Object} response The http response object
     *
     * @return {Function} The matching retryStrategy
     */
    findMatchingStrategy(request, response) {
        const operationContext = this.operationContextService.findOperationContext(request.url) ||
            this.OPERATION_CONTEXT.INTERACTIVE;
        const matchStrategy = this.predicatesRegistry.find((predicateObj) => {
            return predicateObj.predicate(request, response, operationContext);
        });
        return matchStrategy ? matchStrategy.retryStrategy : null;
    }
    handleRetry(retryStrategy, request, response) {
        retryStrategy.attemptCount++;
        if (retryStrategy.canRetry()) {
            const delay = retryStrategy.firstFastRetry ? 0 : retryStrategy.calculateNextDelay();
            retryStrategy.firstFastRetry = false;
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    this.httpClient
                        .request(request)
                        .toPromise()
                        .then((result) => {
                        this.removeRetryStrategy(request);
                        return resolve(result);
                    }, (error) => reject(error));
                }, delay);
            });
        }
        else {
            this.alertService.showDanger({
                message: this.translate.instant(this.TRANSLATE_NAMESPACE + 'somethingwrong')
            });
            return Promise.reject(response);
        }
    }
    storeRetryStrategy(request, retryStrategy) {
        this.requestToRetryTegistry[this.getRequestUUID(request)] = retryStrategy;
    }
    removeRetryStrategy(request) {
        delete this.requestToRetryTegistry[this.getRequestUUID(request)];
    }
    retrieveRetryStrategy(request) {
        return this.requestToRetryTegistry[this.getRequestUUID(request)];
    }
    getRequestUUID(request) {
        return request.clone().toString();
    }
};
RetryInterceptor.ctorParameters = () => [
    { type: HttpClient },
    { type: TranslateService },
    { type: OperationContextService },
    { type: IAlertService },
    { type: BooleanUtils },
    { type: undefined, decorators: [{ type: Inject, args: [DefaultRetryStrategy,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [ExponentialRetryStrategy,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [LinearRetryStrategy,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [OPERATION_CONTEXT_TOKEN,] }] }
];
RetryInterceptor = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(5, Inject(DefaultRetryStrategy)),
    tslib_1.__param(6, Inject(ExponentialRetryStrategy)),
    tslib_1.__param(7, Inject(LinearRetryStrategy)),
    tslib_1.__param(8, Inject(OPERATION_CONTEXT_TOKEN)),
    tslib_1.__metadata("design:paramtypes", [HttpClient,
        TranslateService,
        OperationContextService,
        IAlertService,
        BooleanUtils, Object, Object, Object, Object])
], RetryInterceptor);
export { RetryInterceptor };
//# sourceMappingURL=data:application/json;base64,