/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { annotationService } from '../../../annotation.service';
const operationContextName = 'OperationContextRegistered';
/**
 * @ngdoc object
 * @name @smartutils.object:@OperationContextRegistered
 * @description
 * Class level typescript {@link http://www.typescriptlang.org/docs/handbook/decorators.html decorator factory} is delegated to
 * {@link @smartutils.services:OperationContextService OperationContextService.register} and it provides the functionality
 * to register an url with  operation context(s).
 *
 * For example:
 * 1. @OperationContextRegistered('apiUrl', ['CMS', 'INTERACTIVE'])
 * 2. @OperationContextRegistered('apiUrl', 'TOOLING')
 *
 * @param {string} url
 * @param {string | string[]} operationContext
 */
export const OperationContextRegistered = annotationService.getClassAnnotationFactory(operationContextName);
export function OperationContextAnnotationFactory(injector, operationContextService, OPERATION_CONTEXT) {
    'ngInject';
    return annotationService.setClassAnnotationFactory(operationContextName, function (factoryArguments) {
        return function (instance, originalConstructor, invocationArguments) {
            originalConstructor.call(instance, ...invocationArguments);
            const url = injector.get(factoryArguments[0], factoryArguments[0]);
            if (typeof factoryArguments[1] === 'string') {
                const operationContext = OPERATION_CONTEXT[factoryArguments[1]];
                operationContextService.register(url, operationContext);
            }
            else if (Array.isArray(factoryArguments[1]) && factoryArguments[1].length > 0) {
                factoryArguments[1].forEach((element) => {
                    operationContextService.register(url, OPERATION_CONTEXT[element]);
                });
            }
        };
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9uLWNvbnRleHQuYW5ub3RhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2ludGVyY2VwdG9ycy9lcnJvcnMvcmV0cmllcy9vcGVyYXRpb24tY29udGV4dC5hbm5vdGF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLE9BQU8sRUFBRSxpQkFBaUIsRUFBMEIsTUFBTSw2QkFBNkIsQ0FBQztBQUd4RixNQUFNLG9CQUFvQixHQUFHLDRCQUE0QixDQUFDO0FBRTFEOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsaUJBQWlCLENBQUMseUJBQXlCLENBQ2pGLG9CQUFvQixDQUNpRCxDQUFDO0FBRTFFLE1BQU0sVUFBVSxpQ0FBaUMsQ0FDN0MsUUFBa0IsRUFDbEIsdUJBQWdELEVBQ2hELGlCQUFtQztJQUVuQyxVQUFVLENBQUM7SUFDWCxPQUFPLGlCQUFpQixDQUFDLHlCQUF5QixDQUFDLG9CQUFvQixFQUFFLFVBQ3JFLGdCQUF1QjtRQUV2QixPQUFPLFVBQ0gsUUFBYSxFQUNiLG1CQUF5QyxFQUN6QyxtQkFBMEI7WUFFMUIsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLG1CQUFtQixDQUFDLENBQUM7WUFFM0QsTUFBTSxHQUFHLEdBQVcsUUFBUSxDQUFDLEdBQUcsQ0FBUyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRW5GLElBQUksT0FBTyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQUU7Z0JBQ3pDLE1BQU0sZ0JBQWdCLEdBQVksaUJBQXlCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakYsdUJBQXVCLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO2FBQzNEO2lCQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQzdFLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQWUsRUFBRSxFQUFFO29CQUM1Qyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFHLGlCQUF5QixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQy9FLENBQUMsQ0FBQyxDQUFDO2FBQ047UUFDTCxDQUFDLENBQUM7SUFDTixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBTQVAgU0Ugb3IgYW4gU0FQIGFmZmlsaWF0ZSBjb21wYW55LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQG1vZHVsZSBzbWFydHV0aWxzXG4gKi9cbmltcG9ydCB7IEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUeXBlZE1hcCB9IGZyb20gJy4uLy4uLy4uLy4uL2R0b3MnO1xuaW1wb3J0IHsgYW5ub3RhdGlvblNlcnZpY2UsIENsYXNzQW5ub3RhdGlvbkZhY3RvcnkgfSBmcm9tICcuLi8uLi8uLi9hbm5vdGF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgT3BlcmF0aW9uQ29udGV4dFNlcnZpY2UgfSBmcm9tICcuL29wZXJhdGlvbi1jb250ZXh0LnNlcnZpY2UnO1xuXG5jb25zdCBvcGVyYXRpb25Db250ZXh0TmFtZSA9ICdPcGVyYXRpb25Db250ZXh0UmVnaXN0ZXJlZCc7XG5cbi8qKlxuICogQG5nZG9jIG9iamVjdFxuICogQG5hbWUgQHNtYXJ0dXRpbHMub2JqZWN0OkBPcGVyYXRpb25Db250ZXh0UmVnaXN0ZXJlZFxuICogQGRlc2NyaXB0aW9uXG4gKiBDbGFzcyBsZXZlbCB0eXBlc2NyaXB0IHtAbGluayBodHRwOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy9kb2NzL2hhbmRib29rL2RlY29yYXRvcnMuaHRtbCBkZWNvcmF0b3IgZmFjdG9yeX0gaXMgZGVsZWdhdGVkIHRvXG4gKiB7QGxpbmsgQHNtYXJ0dXRpbHMuc2VydmljZXM6T3BlcmF0aW9uQ29udGV4dFNlcnZpY2UgT3BlcmF0aW9uQ29udGV4dFNlcnZpY2UucmVnaXN0ZXJ9IGFuZCBpdCBwcm92aWRlcyB0aGUgZnVuY3Rpb25hbGl0eVxuICogdG8gcmVnaXN0ZXIgYW4gdXJsIHdpdGggIG9wZXJhdGlvbiBjb250ZXh0KHMpLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICogMS4gQE9wZXJhdGlvbkNvbnRleHRSZWdpc3RlcmVkKCdhcGlVcmwnLCBbJ0NNUycsICdJTlRFUkFDVElWRSddKVxuICogMi4gQE9wZXJhdGlvbkNvbnRleHRSZWdpc3RlcmVkKCdhcGlVcmwnLCAnVE9PTElORycpXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHBhcmFtIHtzdHJpbmcgfCBzdHJpbmdbXX0gb3BlcmF0aW9uQ29udGV4dFxuICovXG5leHBvcnQgY29uc3QgT3BlcmF0aW9uQ29udGV4dFJlZ2lzdGVyZWQgPSBhbm5vdGF0aW9uU2VydmljZS5nZXRDbGFzc0Fubm90YXRpb25GYWN0b3J5KFxuICAgIG9wZXJhdGlvbkNvbnRleHROYW1lXG4pIGFzICh1cmw6IHN0cmluZywgb3BlcmF0aW9uQ29udGV4dDogc3RyaW5nIHwgc3RyaW5nW10pID0+IENsYXNzRGVjb3JhdG9yO1xuXG5leHBvcnQgZnVuY3Rpb24gT3BlcmF0aW9uQ29udGV4dEFubm90YXRpb25GYWN0b3J5KFxuICAgIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBvcGVyYXRpb25Db250ZXh0U2VydmljZTogT3BlcmF0aW9uQ29udGV4dFNlcnZpY2UsXG4gICAgT1BFUkFUSU9OX0NPTlRFWFQ6IFR5cGVkTWFwPHN0cmluZz5cbik6IENsYXNzQW5ub3RhdGlvbkZhY3RvcnkgfCBudWxsIHtcbiAgICAnbmdJbmplY3QnO1xuICAgIHJldHVybiBhbm5vdGF0aW9uU2VydmljZS5zZXRDbGFzc0Fubm90YXRpb25GYWN0b3J5KG9wZXJhdGlvbkNvbnRleHROYW1lLCBmdW5jdGlvbihcbiAgICAgICAgZmFjdG9yeUFyZ3VtZW50czogYW55W11cbiAgICApIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKFxuICAgICAgICAgICAgaW5zdGFuY2U6IGFueSxcbiAgICAgICAgICAgIG9yaWdpbmFsQ29uc3RydWN0b3I6ICguLi54OiBhbnlbXSkgPT4gYW55LFxuICAgICAgICAgICAgaW52b2NhdGlvbkFyZ3VtZW50czogYW55W11cbiAgICAgICAgKSB7XG4gICAgICAgICAgICBvcmlnaW5hbENvbnN0cnVjdG9yLmNhbGwoaW5zdGFuY2UsIC4uLmludm9jYXRpb25Bcmd1bWVudHMpO1xuXG4gICAgICAgICAgICBjb25zdCB1cmw6IHN0cmluZyA9IGluamVjdG9yLmdldDxzdHJpbmc+KGZhY3RvcnlBcmd1bWVudHNbMF0sIGZhY3RvcnlBcmd1bWVudHNbMF0pO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZhY3RvcnlBcmd1bWVudHNbMV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3BlcmF0aW9uQ29udGV4dDogc3RyaW5nID0gKE9QRVJBVElPTl9DT05URVhUIGFzIGFueSlbZmFjdG9yeUFyZ3VtZW50c1sxXV07XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uQ29udGV4dFNlcnZpY2UucmVnaXN0ZXIodXJsLCBvcGVyYXRpb25Db250ZXh0KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShmYWN0b3J5QXJndW1lbnRzWzFdKSAmJiBmYWN0b3J5QXJndW1lbnRzWzFdLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmYWN0b3J5QXJndW1lbnRzWzFdLmZvckVhY2goKGVsZW1lbnQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb25Db250ZXh0U2VydmljZS5yZWdpc3Rlcih1cmwsIChPUEVSQVRJT05fQ09OVEVYVCBhcyBhbnkpW2VsZW1lbnRdKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbiJdfQ==