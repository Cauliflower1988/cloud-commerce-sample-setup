/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Injectable } from '@angular/core';
import { IAlertService } from '../../../interfaces';
/**
 * @ngdoc service
 * @name permissionErrorInterceptorModule.service:permissionErrorInterceptor
 * @description
 * Used for HTTP error code 403. Displays the alert message for permission error.
 */
let PermissionErrorInterceptor = class PermissionErrorInterceptor {
    constructor(alertService) {
        this.alertService = alertService;
    }
    predicate(request, response) {
        return response.status === 403;
    }
    responseError(request, response) {
        if (response.error && response.error.errors) {
            response.error.errors
                .filter((error) => {
                return error.type === 'TypePermissionError';
            })
                .forEach((error) => {
                this.alertService.showDanger({
                    message: error.message,
                    duration: 10000
                });
            });
        }
        return Promise.reject(response);
    }
};
PermissionErrorInterceptor.ctorParameters = () => [
    { type: IAlertService }
];
PermissionErrorInterceptor = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [IAlertService])
], PermissionErrorInterceptor);
export { PermissionErrorInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbi1lcnJvci5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2ludGVyY2VwdG9ycy9lcnJvcnMvcGVybWlzc2lvbi1lcnJvci5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFcEQ7Ozs7O0dBS0c7QUFFSCxJQUFhLDBCQUEwQixHQUF2QyxNQUFhLDBCQUEwQjtJQUNuQyxZQUFvQixZQUEyQjtRQUEzQixpQkFBWSxHQUFaLFlBQVksQ0FBZTtJQUFHLENBQUM7SUFDbkQsU0FBUyxDQUFDLE9BQXVCLEVBQUUsUUFBMkI7UUFDMUQsT0FBTyxRQUFRLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQztJQUNuQyxDQUFDO0lBQ0QsYUFBYSxDQUFDLE9BQXVCLEVBQUUsUUFBMkI7UUFDOUQsSUFBSSxRQUFRLENBQUMsS0FBSyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ3pDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTTtpQkFDaEIsTUFBTSxDQUFDLENBQUMsS0FBbUIsRUFBRSxFQUFFO2dCQUM1QixPQUFPLEtBQUssQ0FBQyxJQUFJLEtBQUsscUJBQXFCLENBQUM7WUFDaEQsQ0FBQyxDQUFDO2lCQUNELE9BQU8sQ0FBQyxDQUFDLEtBQW1CLEVBQUUsRUFBRTtnQkFDN0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7b0JBQ3pCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztvQkFDdEIsUUFBUSxFQUFFLEtBQUs7aUJBQ2xCLENBQUMsQ0FBQztZQUNQLENBQUMsQ0FBQyxDQUFDO1NBQ1Y7UUFDRCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEMsQ0FBQztDQUNKLENBQUE7O1lBbkJxQyxhQUFhOztBQUR0QywwQkFBMEI7SUFEdEMsVUFBVSxFQUFFOzZDQUV5QixhQUFhO0dBRHRDLDBCQUEwQixDQW9CdEM7U0FwQlksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJQWxlcnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBCYWNrZW5kRXJyb3IsIElIdHRwRXJyb3JJbnRlcmNlcHRvciB9IGZyb20gJy4uL2ktaHR0cC1lcnJvci5pbnRlcmNlcHRvcic7XG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSBwZXJtaXNzaW9uRXJyb3JJbnRlcmNlcHRvck1vZHVsZS5zZXJ2aWNlOnBlcm1pc3Npb25FcnJvckludGVyY2VwdG9yXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZWQgZm9yIEhUVFAgZXJyb3IgY29kZSA0MDMuIERpc3BsYXlzIHRoZSBhbGVydCBtZXNzYWdlIGZvciBwZXJtaXNzaW9uIGVycm9yLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGVybWlzc2lvbkVycm9ySW50ZXJjZXB0b3I8VCA9IGFueT4gaW1wbGVtZW50cyBJSHR0cEVycm9ySW50ZXJjZXB0b3I8VD4ge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYWxlcnRTZXJ2aWNlOiBJQWxlcnRTZXJ2aWNlKSB7fVxuICAgIHByZWRpY2F0ZShyZXF1ZXN0OiBIdHRwUmVxdWVzdDxUPiwgcmVzcG9uc2U6IEh0dHBFcnJvclJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMgPT09IDQwMztcbiAgICB9XG4gICAgcmVzcG9uc2VFcnJvcihyZXF1ZXN0OiBIdHRwUmVxdWVzdDxUPiwgcmVzcG9uc2U6IEh0dHBFcnJvclJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5lcnJvciAmJiByZXNwb25zZS5lcnJvci5lcnJvcnMpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlLmVycm9yLmVycm9yc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoKGVycm9yOiBCYWNrZW5kRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yLnR5cGUgPT09ICdUeXBlUGVybWlzc2lvbkVycm9yJztcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKChlcnJvcjogQmFja2VuZEVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnNob3dEYW5nZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxMDAwMFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVzcG9uc2UpO1xuICAgIH1cbn1cbiJdfQ==