/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as CryptoJS from 'crypto-js';
/**
 * @ngdoc service
 * @name @smartutils.services:CryptographicUtils
 *
 * @description
 * utility service around Cryptographic operations.
 */
export class CryptographicUtils {
    /**
     * @ngdoc method
     * @name @smartutils.services:CryptographicUtils#sha1Hash
     * @methodOf @smartutils.services:CryptographicUtils
     *
     * @description
     * A utility function that takes an input string and provides a cryptographic SHA1 hash value.
     *
     * @param {String} data The input string to be encrypted.
     * @returns {String} the encrypted hashed result.
     */
    sha1Hash(data) {
        return CryptoJS.SHA1(data).toString();
    }
    aesBase64Encrypt(base64EncodedMessage, secretPassphrase) {
        return CryptoJS.AES.encrypt(CryptoJS.enc.Base64.parse(base64EncodedMessage), secretPassphrase).toString();
    }
    aesDecrypt(encryptedMessage, secretPassphrase) {
        return CryptoJS.AES.decrypt(encryptedMessage, secretPassphrase).toString(CryptoJS.enc.Utf8);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J5cHRvZ3JhcGhpYy11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbInV0aWxzL2NyeXB0b2dyYXBoaWMtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBQ0gsT0FBTyxLQUFLLFFBQVEsTUFBTSxXQUFXLENBQUM7QUFFdEM7Ozs7OztHQU1HO0FBQ0gsTUFBTSxPQUFPLGtCQUFrQjtJQUMzQjs7Ozs7Ozs7OztPQVVHO0lBQ0gsUUFBUSxDQUFDLElBQVk7UUFDakIsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxvQkFBNEIsRUFBRSxnQkFBd0I7UUFDbkUsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FDdkIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLEVBQy9DLGdCQUFnQixDQUNuQixDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFFRCxVQUFVLENBQUMsZ0JBQXdCLEVBQUUsZ0JBQXdCO1FBQ3pELE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoRyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOSBTQVAgU0Ugb3IgYW4gU0FQIGFmZmlsaWF0ZSBjb21wYW55LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQG1vZHVsZSBzbWFydHV0aWxzXG4gKi9cbmltcG9ydCAqIGFzIENyeXB0b0pTIGZyb20gJ2NyeXB0by1qcyc7XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lIEBzbWFydHV0aWxzLnNlcnZpY2VzOkNyeXB0b2dyYXBoaWNVdGlsc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogdXRpbGl0eSBzZXJ2aWNlIGFyb3VuZCBDcnlwdG9ncmFwaGljIG9wZXJhdGlvbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBDcnlwdG9ncmFwaGljVXRpbHMge1xuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSBAc21hcnR1dGlscy5zZXJ2aWNlczpDcnlwdG9ncmFwaGljVXRpbHMjc2hhMUhhc2hcbiAgICAgKiBAbWV0aG9kT2YgQHNtYXJ0dXRpbHMuc2VydmljZXM6Q3J5cHRvZ3JhcGhpY1V0aWxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBBIHV0aWxpdHkgZnVuY3Rpb24gdGhhdCB0YWtlcyBhbiBpbnB1dCBzdHJpbmcgYW5kIHByb3ZpZGVzIGEgY3J5cHRvZ3JhcGhpYyBTSEExIGhhc2ggdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YSBUaGUgaW5wdXQgc3RyaW5nIHRvIGJlIGVuY3J5cHRlZC5cbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZW5jcnlwdGVkIGhhc2hlZCByZXN1bHQuXG4gICAgICovXG4gICAgc2hhMUhhc2goZGF0YTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIENyeXB0b0pTLlNIQTEoZGF0YSkudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBhZXNCYXNlNjRFbmNyeXB0KGJhc2U2NEVuY29kZWRNZXNzYWdlOiBzdHJpbmcsIHNlY3JldFBhc3NwaHJhc2U6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBDcnlwdG9KUy5BRVMuZW5jcnlwdChcbiAgICAgICAgICAgIENyeXB0b0pTLmVuYy5CYXNlNjQucGFyc2UoYmFzZTY0RW5jb2RlZE1lc3NhZ2UpLFxuICAgICAgICAgICAgc2VjcmV0UGFzc3BocmFzZVxuICAgICAgICApLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgYWVzRGVjcnlwdChlbmNyeXB0ZWRNZXNzYWdlOiBzdHJpbmcsIHNlY3JldFBhc3NwaHJhc2U6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBDcnlwdG9KUy5BRVMuZGVjcnlwdChlbmNyeXB0ZWRNZXNzYWdlLCBzZWNyZXRQYXNzcGhyYXNlKS50b1N0cmluZyhDcnlwdG9KUy5lbmMuVXRmOCk7XG4gICAgfVxufVxuIl19