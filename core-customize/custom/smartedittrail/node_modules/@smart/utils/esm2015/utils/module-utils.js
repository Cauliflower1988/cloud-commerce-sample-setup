/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, Injectable } from '@angular/core';
/*
 * internal utility service to handle ES6 modules
 */
/* forbiddenNameSpaces angular.module:false */
/** @internal */
let ModuleUtils = class ModuleUtils {
    initialize(useFactory, deps = []) {
        return {
            provide: APP_INITIALIZER,
            useFactory() {
                useFactory.apply(undefined, Array.prototype.slice.call(arguments));
                return (component) => {
                    // an initializer useFactory must return a function
                };
            },
            deps,
            multi: true
        };
    }
    bootstrap(useFactory, deps = []) {
        return {
            provide: APP_BOOTSTRAP_LISTENER,
            useFactory() {
                useFactory.apply(undefined, Array.prototype.slice.call(arguments));
                return (component) => {
                    // an initializer useFactory must return a function
                };
            },
            deps,
            multi: true
        };
    }
    provideValues(_constants) {
        const constants = _constants || {};
        return Object.keys(constants).map((key) => {
            return {
                provide: key,
                useValue: constants[key]
            };
        });
    }
};
ModuleUtils = tslib_1.__decorate([
    Injectable()
], ModuleUtils);
export { ModuleUtils };
export const moduleUtils = new ModuleUtils();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLXV0aWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNtYXJ0L3V0aWxzLyIsInNvdXJjZXMiOlsidXRpbHMvbW9kdWxlLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7QUFDSCxPQUFPLEVBQ0gsc0JBQXNCLEVBQ3RCLGVBQWUsRUFFZixVQUFVLEVBR2IsTUFBTSxlQUFlLENBQUM7QUFHdkI7O0dBRUc7QUFDSCw4Q0FBOEM7QUFDOUMsZ0JBQWdCO0FBRWhCLElBQWEsV0FBVyxHQUF4QixNQUFhLFdBQVc7SUFDYixVQUFVLENBQUMsVUFBb0MsRUFBRSxPQUFjLEVBQUU7UUFDcEUsT0FBTztZQUNILE9BQU8sRUFBRSxlQUFlO1lBQ3hCLFVBQVU7Z0JBQ04sVUFBVSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25FLE9BQU8sQ0FBQyxTQUE0QixFQUFFLEVBQUU7b0JBQ3BDLG1EQUFtRDtnQkFDdkQsQ0FBQyxDQUFDO1lBQ04sQ0FBQztZQUNELElBQUk7WUFDSixLQUFLLEVBQUUsSUFBSTtTQUNkLENBQUM7SUFDTixDQUFDO0lBRU0sU0FBUyxDQUFDLFVBQW9DLEVBQUUsT0FBYyxFQUFFO1FBQ25FLE9BQU87WUFDSCxPQUFPLEVBQUUsc0JBQXNCO1lBQy9CLFVBQVU7Z0JBQ04sVUFBVSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25FLE9BQU8sQ0FBQyxTQUE0QixFQUFFLEVBQUU7b0JBQ3BDLG1EQUFtRDtnQkFDdkQsQ0FBQyxDQUFDO1lBQ04sQ0FBQztZQUNELElBQUk7WUFDSixLQUFLLEVBQUUsSUFBSTtTQUNkLENBQUM7SUFDTixDQUFDO0lBRUQsYUFBYSxDQUFDLFVBQXlDO1FBQ25ELE1BQU0sU0FBUyxHQUFHLFVBQVUsSUFBSSxFQUFFLENBQUM7UUFDbkMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ3RDLE9BQU87Z0JBQ0gsT0FBTyxFQUFFLEdBQUc7Z0JBQ1osUUFBUSxFQUFFLFNBQVMsQ0FBQyxHQUFHLENBQUM7YUFDM0IsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKLENBQUE7QUF0Q1ksV0FBVztJQUR2QixVQUFVLEVBQUU7R0FDQSxXQUFXLENBc0N2QjtTQXRDWSxXQUFXO0FBd0N4QixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IFNBUCBTRSBvciBhbiBTQVAgYWZmaWxpYXRlIGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbW9kdWxlIHNtYXJ0dXRpbHNcbiAqL1xuaW1wb3J0IHtcbiAgICBBUFBfQk9PVFNUUkFQX0xJU1RFTkVSLFxuICAgIEFQUF9JTklUSUFMSVpFUixcbiAgICBDb21wb25lbnRSZWYsXG4gICAgSW5qZWN0YWJsZSxcbiAgICBQcm92aWRlcixcbiAgICBWYWx1ZVByb3ZpZGVyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2xvbmVhYmxlLCBUeXBlZE1hcCB9IGZyb20gJy4uL2R0b3MnO1xuXG4vKlxuICogaW50ZXJuYWwgdXRpbGl0eSBzZXJ2aWNlIHRvIGhhbmRsZSBFUzYgbW9kdWxlc1xuICovXG4vKiBmb3JiaWRkZW5OYW1lU3BhY2VzIGFuZ3VsYXIubW9kdWxlOmZhbHNlICovXG4vKiogQGludGVybmFsICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTW9kdWxlVXRpbHMge1xuICAgIHB1YmxpYyBpbml0aWFsaXplKHVzZUZhY3Rvcnk6ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCwgZGVwczogYW55W10gPSBbXSk6IFByb3ZpZGVyIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUixcbiAgICAgICAgICAgIHVzZUZhY3RvcnkoKSB7XG4gICAgICAgICAgICAgICAgdXNlRmFjdG9yeS5hcHBseSh1bmRlZmluZWQsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoY29tcG9uZW50OiBDb21wb25lbnRSZWY8YW55PikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBhbiBpbml0aWFsaXplciB1c2VGYWN0b3J5IG11c3QgcmV0dXJuIGEgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlcHMsXG4gICAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBib290c3RyYXAodXNlRmFjdG9yeTogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkLCBkZXBzOiBhbnlbXSA9IFtdKTogUHJvdmlkZXIge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHJvdmlkZTogQVBQX0JPT1RTVFJBUF9MSVNURU5FUixcbiAgICAgICAgICAgIHVzZUZhY3RvcnkoKSB7XG4gICAgICAgICAgICAgICAgdXNlRmFjdG9yeS5hcHBseSh1bmRlZmluZWQsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoY29tcG9uZW50OiBDb21wb25lbnRSZWY8YW55PikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBhbiBpbml0aWFsaXplciB1c2VGYWN0b3J5IG11c3QgcmV0dXJuIGEgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlcHMsXG4gICAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByb3ZpZGVWYWx1ZXMoX2NvbnN0YW50cz86IFR5cGVkTWFwPENsb25lYWJsZSB8IFJlZ0V4cD4pOiBWYWx1ZVByb3ZpZGVyW10ge1xuICAgICAgICBjb25zdCBjb25zdGFudHMgPSBfY29uc3RhbnRzIHx8IHt9O1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoY29uc3RhbnRzKS5tYXAoKGtleSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwcm92aWRlOiBrZXksXG4gICAgICAgICAgICAgICAgdXNlVmFsdWU6IGNvbnN0YW50c1trZXldXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBtb2R1bGVVdGlscyA9IG5ldyBNb2R1bGVVdGlscygpO1xuIl19