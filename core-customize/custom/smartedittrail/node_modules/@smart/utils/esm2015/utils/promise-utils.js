/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
var PromiseUtils_1;
import * as tslib_1 from "tslib";
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as lodash from 'lodash';
import { Injectable } from '@angular/core';
import { LogService } from '../services/log.service';
/**
 * @ngdoc service
 * @name @smartutils.services:PromiseUtils
 *
 * @description
 * utility service around ES6 Promises.
 */
let PromiseUtils = PromiseUtils_1 = class PromiseUtils {
    /**
     * @ngdoc service
     * @name @smartutils.services:PromiseUtils
     *
     * @description
     * utility service around ES6 Promises.
     */
    constructor() {
        this.WAIT_TIMEOUT = 4;
        this.FAILURE_TIMEOUT = 2000;
        this.handlePromiseRejections = (promise) => {
            const oldThen = promise.then;
            const defaultFailureCallback = this.defaultFailureCallback;
            promise.then = function (successCallback, _failureCallback) {
                const failureCallback = _failureCallback ? _failureCallback : defaultFailureCallback;
                return oldThen.call(this, successCallback, failureCallback);
            };
            return promise;
        };
        this.defaultFailureCallback = (error) => {
            if (undefined !== error && null !== error && 'canceled' !== error) {
                if (lodash.isPlainObject(error)) {
                    if (!this.isAjaxError(error)) {
                        PromiseUtils_1.logService.error(`exception caught in promise: ${JSON.stringify(error)}`);
                    }
                }
                else if (!lodash.isBoolean(error)) {
                    PromiseUtils_1.logService.error(error);
                }
            }
            PromiseUtils_1.logService.error(`defaultFailureCallback:`, error);
            return Promise.reject(error);
        };
    }
    toPromise(method, context) {
        return function () {
            try {
                return Promise.resolve(method.apply(context, Array.prototype.slice.call(arguments)));
            }
            catch (e) {
                PromiseUtils_1.logService.error('execution of a method that was turned into a promise failed');
                PromiseUtils_1.logService.error(e);
                return Promise.reject(e);
            }
        };
    }
    promise(executor) {
        return this.handlePromiseRejections(new Promise(executor));
    }
    defer() {
        let pResolve;
        let pReject;
        const deferred = {
            promise: this.promise((_resolve, _reject) => {
                pResolve = _resolve;
                pReject = _reject;
            }),
            resolve(value) {
                pResolve(value);
            },
            reject(reason) {
                pReject(reason);
            }
        };
        return deferred;
    }
    sleep(ms) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => setTimeout(resolve, ms));
        });
    }
    isAjaxError(error) {
        return error.hasOwnProperty('headers');
    }
    waitOnCondition(condition, callback, errorMessage, elapsedTime = 0) {
        setTimeout(() => {
            if (condition()) {
                callback();
            }
            else if (elapsedTime < this.FAILURE_TIMEOUT) {
                this.waitOnCondition(condition, callback, errorMessage, elapsedTime + this.WAIT_TIMEOUT);
            }
            else {
                throw new Error(`PromiseUtils: ${errorMessage}`);
            }
        }, this.WAIT_TIMEOUT);
    }
    resolveToCallbackWhenCondition(condition, callback, errorMessage) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => {
                this.waitOnCondition(condition, () => resolve(callback()), errorMessage ? errorMessage : 'condition for promise resolution was never met');
            });
        });
    }
};
PromiseUtils.logService = new LogService();
PromiseUtils = PromiseUtils_1 = tslib_1.__decorate([
    Injectable()
], PromiseUtils);
export { PromiseUtils };
export const promiseUtils = new PromiseUtils();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbWlzZS11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbInV0aWxzL3Byb21pc2UtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7O0dBR0c7QUFDSCxPQUFPLEtBQUssTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUNqQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQU9yRDs7Ozs7O0dBTUc7QUFFSCxJQUFhLFlBQVksb0JBQXpCLE1BQWEsWUFBWTtJQVJ6Qjs7Ozs7O09BTUc7SUFDSDtRQUlZLGlCQUFZLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLG9CQUFlLEdBQUcsSUFBSSxDQUFDO1FBNkQvQiw0QkFBdUIsR0FBRyxDQUFJLE9BQW1CLEVBQWMsRUFBRTtZQUM3RCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1lBQzdCLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDO1lBRTFELE9BQWUsQ0FBQyxJQUFJLEdBQUcsVUFDcEIsZUFBaUQsRUFDakQsZ0JBQXFCO2dCQUVyQixNQUFNLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDO2dCQUNyRixPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxlQUFlLENBQUMsQ0FBQztZQUNoRSxDQUFDLENBQUM7WUFDRixPQUFPLE9BQU8sQ0FBQztRQUNuQixDQUFDLENBQUM7UUEwQ00sMkJBQXNCLEdBQUcsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUM1QyxJQUFJLFNBQVMsS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssSUFBSSxVQUFVLEtBQUssS0FBSyxFQUFFO2dCQUMvRCxJQUFJLE1BQU0sQ0FBQyxhQUFhLENB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QUFLLENBQUMsaUJBQWlCLFlBQVksRUFBRSxDQUFDLENBQUM7YUFDcEQ7UUFDTCxDQUFDLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFSyw4QkFBOEIsQ0FDaEMsU0FBd0IsRUFDeEIsUUFBaUIsRUFDakIsWUFBcUI7O1lBRXJCLE9BQU8sSUFBSSxPQUFPLENBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDOUIsSUFBSSxDQUFDLGVBQWUsQ0FDaEIsU0FBUyxFQUNULEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUN6QixZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsZ0RBQWdELENBQ2pGLENBQUM7WUFDTixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUM7S0FBQTtDQWlCSixDQUFBO0FBcklVLHVCQUFVLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztBQUQ1QixZQUFZO0lBRHhCLFVBQVUsRUFBRTtHQUNBLFlBQVksQ0FzSXhCO1NBdElZLFlBQVk7QUF3SXpCLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG5pbXBvcnQgKiBhcyBsb2Rhc2ggZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvZ1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9sb2cuc2VydmljZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVmZXJyZWQ8VD4ge1xuICAgIHByb21pc2U6IFByb21pc2U8VD47XG4gICAgcmVzb2x2ZTogKHZhbHVlPzogVCkgPT4gdm9pZDtcbiAgICByZWplY3Q6ICh2YWx1ZT86IGFueSkgPT4gdm9pZDtcbn1cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lIEBzbWFydHV0aWxzLnNlcnZpY2VzOlByb21pc2VVdGlsc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogdXRpbGl0eSBzZXJ2aWNlIGFyb3VuZCBFUzYgUHJvbWlzZXMuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQcm9taXNlVXRpbHMge1xuICAgIHN0YXRpYyBsb2dTZXJ2aWNlID0gbmV3IExvZ1NlcnZpY2UoKTtcblxuICAgIHByaXZhdGUgV0FJVF9USU1FT1VUID0gNDtcbiAgICBwcml2YXRlIEZBSUxVUkVfVElNRU9VVCA9IDIwMDA7XG5cbiAgICB0b1Byb21pc2U8VD4oXG4gICAgICAgIG1ldGhvZDogKC4uLmFyZ3M6IGFueVtdKSA9PiBULFxuICAgICAgICBjb250ZXh0PzogYW55XG4gICAgKTogKC4uLmlubmVyQXJnczogYW55W10pID0+IFByb21pc2U8VD4ge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZC5hcHBseShjb250ZXh0LCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgUHJvbWlzZVV0aWxzLmxvZ1NlcnZpY2UuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICdleGVjdXRpb24gb2YgYSBtZXRob2QgdGhhdCB3YXMgdHVybmVkIGludG8gYSBwcm9taXNlIGZhaWxlZCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIFByb21pc2VVdGlscy5sb2dTZXJ2aWNlLmVycm9yKGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcm9taXNlPFQ+KFxuICAgICAgICBleGVjdXRvcjogKFxuICAgICAgICAgICAgcmVzb2x2ZTogKHZhbHVlPzogVCB8IFByb21pc2VMaWtlPFQ+KSA9PiB2b2lkLFxuICAgICAgICAgICAgcmVqZWN0OiAocmVhc29uPzogYW55KSA9PiB2b2lkXG4gICAgICAgICkgPT4gdm9pZFxuICAgICk6IFByb21pc2U8VD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVQcm9taXNlUmVqZWN0aW9ucyhuZXcgUHJvbWlzZShleGVjdXRvcikpO1xuICAgIH1cblxuICAgIGRlZmVyPFQ+KCk6IERlZmVycmVkPFQ+IHtcbiAgICAgICAgbGV0IHBSZXNvbHZlOiAodmFsdWU/OiBUIHwgUHJvbWlzZUxpa2U8VD4pID0+IHZvaWQ7XG4gICAgICAgIGxldCBwUmVqZWN0OiAocmVhc29uPzogYW55KSA9PiB2b2lkO1xuXG4gICAgICAgIGNvbnN0IGRlZmVycmVkOiBEZWZlcnJlZDxUPiA9IHtcbiAgICAgICAgICAgIHByb21pc2U6IHRoaXMucHJvbWlzZShcbiAgICAgICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgICAgIF9yZXNvbHZlOiAodmFsdWU/OiBUIHwgUHJvbWlzZUxpa2U8VD4pID0+IHZvaWQsXG4gICAgICAgICAgICAgICAgICAgIF9yZWplY3Q6IChyZWFzb24/OiBhbnkpID0+IHZvaWRcbiAgICAgICAgICAgICAgICApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcFJlc29sdmUgPSBfcmVzb2x2ZTtcbiAgICAgICAgICAgICAgICAgICAgcFJlamVjdCA9IF9yZWplY3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKSxcblxuICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZTogVCB8IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBSZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHJlamVjdChyZWFzb246IGFueSkge1xuICAgICAgICAgICAgICAgIHBSZWplY3QocmVhc29uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZGVmZXJyZWQ7XG4gICAgfVxuXG4gICAgYXN5bmMgc2xlZXAobXM6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbiAgICB9XG5cbiAgICBoYW5kbGVQcm9taXNlUmVqZWN0aW9ucyA9IDxUPihwcm9taXNlOiBQcm9taXNlPFQ+KTogUHJvbWlzZTxUPiA9PiB7XG4gICAgICAgIGNvbnN0IG9sZFRoZW4gPSBwcm9taXNlLnRoZW47XG4gICAgICAgIGNvbnN0IGRlZmF1bHRGYWlsdXJlQ2FsbGJhY2sgPSB0aGlzLmRlZmF1bHRGYWlsdXJlQ2FsbGJhY2s7XG5cbiAgICAgICAgKHByb21pc2UgYXMgYW55KS50aGVuID0gZnVuY3Rpb24oXG4gICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2s6ICh2YWx1ZTogVCkgPT4gVCB8IFByb21pc2VMaWtlPFQ+LFxuICAgICAgICAgICAgX2ZhaWx1cmVDYWxsYmFjazogYW55XG4gICAgICAgICkge1xuICAgICAgICAgICAgY29uc3QgZmFpbHVyZUNhbGxiYWNrID0gX2ZhaWx1cmVDYWxsYmFjayA/IF9mYWlsdXJlQ2FsbGJhY2sgOiBkZWZhdWx0RmFpbHVyZUNhbGxiYWNrO1xuICAgICAgICAgICAgcmV0dXJuIG9sZFRoZW4uY2FsbCh0aGlzLCBzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjayk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBpc0FqYXhFcnJvcihlcnJvcjogYW55KSB7XG4gICAgICAgIHJldHVybiBlcnJvci5oYXNPd25Qcm9wZXJ0eSgnaGVhZGVycycpO1xuICAgIH1cblxuICAgIHdhaXRPbkNvbmRpdGlvbihcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBib29sZWFuLFxuICAgICAgICBjYWxsYmFjazogKCkgPT4gYW55LFxuICAgICAgICBlcnJvck1lc3NhZ2U6IHN0cmluZyxcbiAgICAgICAgZWxhcHNlZFRpbWU6IG51bWJlciA9IDBcbiAgICApIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoY29uZGl0aW9uKCkpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlbGFwc2VkVGltZSA8IHRoaXMuRkFJTFVSRV9USU1FT1VUKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53YWl0T25Db25kaXRpb24oXG4gICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgZWxhcHNlZFRpbWUgKyB0aGlzLldBSVRfVElNRU9VVFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUHJvbWlzZVV0aWxzOiAke2Vycm9yTWVzc2FnZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcy5XQUlUX1RJTUVPVVQpO1xuICAgIH1cblxuICAgIGFzeW5jIHJlc29sdmVUb0NhbGxiYWNrV2hlbkNvbmRpdGlvbjxUPihcbiAgICAgICAgY29uZGl0aW9uOiAoKSA9PiBib29sZWFuLFxuICAgICAgICBjYWxsYmFjazogKCkgPT4gVCxcbiAgICAgICAgZXJyb3JNZXNzYWdlPzogc3RyaW5nXG4gICAgKTogUHJvbWlzZTxUPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxUPigocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy53YWl0T25Db25kaXRpb24oXG4gICAgICAgICAgICAgICAgY29uZGl0aW9uLFxuICAgICAgICAgICAgICAgICgpID0+IHJlc29sdmUoY2FsbGJhY2soKSksXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID8gZXJyb3JNZXNzYWdlIDogJ2NvbmRpdGlvbiBmb3IgcHJvbWlzZSByZXNvbHV0aW9uIHdhcyBuZXZlciBtZXQnXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRlZmF1bHRGYWlsdXJlQ2FsbGJhY2sgPSAoZXJyb3I6IGFueSkgPT4ge1xuICAgICAgICBpZiAodW5kZWZpbmVkICE9PSBlcnJvciAmJiBudWxsICE9PSBlcnJvciAmJiAnY2FuY2VsZWQnICE9PSBlcnJvcikge1xuICAgICAgICAgICAgaWYgKGxvZGFzaC5pc1BsYWluT2JqZWN0KGVycm9yKSkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0FqYXhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgUHJvbWlzZVV0aWxzLmxvZ1NlcnZpY2UuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICBgZXhjZXB0aW9uIGNhdWdodCBpbiBwcm9taXNlOiAke0pTT04uc3RyaW5naWZ5KGVycm9yKX1gXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICghbG9kYXNoLmlzQm9vbGVhbihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICBQcm9taXNlVXRpbHMubG9nU2VydmljZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgUHJvbWlzZVV0aWxzLmxvZ1NlcnZpY2UuZXJyb3IoYGRlZmF1bHRGYWlsdXJlQ2FsbGJhY2s6YCwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH07XG59XG5cbmV4cG9ydCBjb25zdCBwcm9taXNlVXRpbHMgPSBuZXcgUHJvbWlzZVV0aWxzKCk7XG4iXX0=