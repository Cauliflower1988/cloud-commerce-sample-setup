/**
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import * as lodash from 'lodash';
import { HttpErrorResponse, HttpParams, HttpResponse } from '@angular/common/http';
import { from, throwError, Observable } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { stringUtils } from './string-utils';
export class HttpUtils {
    isGET(request) {
        return request.method === 'GET';
    }
    isRequestOfAccept(request, accept) {
        return (!!request.headers &&
            !!request.headers.get('Accept') &&
            (request.headers.get('Accept') || '').includes(accept));
    }
    isResponseOfContentType(response, contentType) {
        return (!!response.headers &&
            !!response.headers.get('Content-type') &&
            (response.headers.get('Content-type') || '').indexOf(contentType) === 0);
    }
    isHTMLRequest(request, response) {
        return (this.isGET(request) &&
            (this.isRequestOfAccept(request, 'text/html') ||
                /.+\.html$/.test(request.url) ||
                /.+\.html\?/.test(request.url)));
    }
    isJSONRequest(request, response) {
        return (this.isGET(request) &&
            ((response && this.isResponseOfContentType(response, 'json')) ||
                /.+\.json$/.test(request.url)));
    }
    isJSRequest(request) {
        return this.isGET(request) && /.+\.js$/.test(request.url);
    }
    isCRUDRequest(request, response) {
        return (!this.isHTMLRequest(request, response) &&
            !this.isJSONRequest(request, response) &&
            !this.isJSRequest(request));
    }
    transformHttpParams(params, substitutionMap) {
        return new HttpParams({
            fromObject: JSON.parse(stringUtils.replaceAll(JSON.stringify(this.copyHttpParamsOrHeaders(params)), substitutionMap))
        });
    }
    copyHttpParamsOrHeaders(params) {
        const copy = {};
        params.keys().forEach((key) => {
            const values = params.getAll(key);
            if (values !== null) {
                copy[key] = values.length > 1 ? values : values[0];
            }
        });
        return copy;
    }
    buildHttpResponse(originalRequest, _statusAndPayload) {
        const statusAndPayloadPromise = Promise.resolve(_statusAndPayload);
        return from(statusAndPayloadPromise).pipe(switchMap((statusAndPayload) => {
            const status = statusAndPayload[0];
            const body = statusAndPayload[1];
            const requestClone = originalRequest.clone({
                body
            });
            lodash.merge(requestClone, { status });
            if (200 <= status && status < 300) {
                return new Observable((ob) => {
                    ob.next(new HttpResponse(requestClone));
                });
            }
            else {
                return throwError(new HttpErrorResponse(lodash.merge(requestClone, { error: body })));
            }
        }));
    }
}
export const httpUtils = new HttpUtils();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzbWFydC91dGlscy8iLCJzb3VyY2VzIjpbInV0aWxzL2h0dHAtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBQ0gsT0FBTyxLQUFLLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDakMsT0FBTyxFQUNILGlCQUFpQixFQUdqQixVQUFVLEVBRVYsWUFBWSxFQUVmLE1BQU0sc0JBQXNCLENBQUM7QUFDOUIsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0MsTUFBTSxPQUFPLFNBQVM7SUFDbEIsS0FBSyxDQUFDLE9BQXlCO1FBQzNCLE9BQU8sT0FBTyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUM7SUFDcEMsQ0FBQztJQUVELGlCQUFpQixDQUFDLE9BQXlCLEVBQUUsTUFBYztRQUN2RCxPQUFPLENBQ0gsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPO1lBQ2pCLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUM7WUFDL0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQ3pELENBQUM7SUFDTixDQUFDO0lBRUQsdUJBQXVCLENBQUMsUUFBMEIsRUFBRSxXQUFtQjtRQUNuRSxPQUFPLENBQ0gsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPO1lBQ2xCLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUM7WUFDdEMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFj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LElBQUk7YUFDUCxDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7WUFFdkMsSUFBSSxHQUFHLElBQUksTUFBTSxJQUFJLE1BQU0sR0FBRyxHQUFHLEVBQUU7Z0JBQy9CLE9BQU8sSUFBSSxVQUFVLENBQWlCLENBQUMsRUFBRSxFQUFFLEVBQUU7b0JBQ3pDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztnQkFDNUMsQ0FBQyxDQUFDLENBQUM7YUFDTjtpQkFBTTtnQkFDSCxPQUFPLFVBQVUsQ0FDYixJQUFJLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FDckUsQ0FBQzthQUNMO1FBQ0wsQ0FBQyxDQUFDLENBQ0wsQ0FBQztJQUNOLENBQUM7Q0FDSjtBQUVELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgU0FQIFNFIG9yIGFuIFNBUCBhZmZpbGlhdGUgY29tcGFueS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBtb2R1bGUgc21hcnR1dGlsc1xuICovXG5pbXBvcnQgKiBhcyBsb2Rhc2ggZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7XG4gICAgSHR0cEVycm9yUmVzcG9uc2UsXG4gICAgSHR0cEV2ZW50LFxuICAgIEh0dHBIZWFkZXJzLFxuICAgIEh0dHBQYXJhbXMsXG4gICAgSHR0cFJlcXVlc3QsXG4gICAgSHR0cFJlc3BvbnNlLFxuICAgIEh0dHBSZXNwb25zZUJhc2Vcbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgZnJvbSwgdGhyb3dFcnJvciwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUGF5bG9hZCwgVHlwZWRNYXAgfSBmcm9tICcuLi9kdG9zJztcbmltcG9ydCB7IHN0cmluZ1V0aWxzIH0gZnJvbSAnLi9zdHJpbmctdXRpbHMnO1xuXG5leHBvcnQgY2xhc3MgSHR0cFV0aWxzIHtcbiAgICBpc0dFVChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0Lm1ldGhvZCA9PT0gJ0dFVCc7XG4gICAgfVxuXG4gICAgaXNSZXF1ZXN0T2ZBY2NlcHQocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgYWNjZXB0OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICEhcmVxdWVzdC5oZWFkZXJzICYmXG4gICAgICAgICAgICAhIXJlcXVlc3QuaGVhZGVycy5nZXQoJ0FjY2VwdCcpICYmXG4gICAgICAgICAgICAocmVxdWVzdC5oZWFkZXJzLmdldCgnQWNjZXB0JykgfHwgJycpLmluY2x1ZGVzKGFjY2VwdClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpc1Jlc3BvbnNlT2ZDb250ZW50VHlwZShyZXNwb25zZTogSHR0cFJlc3BvbnNlQmFzZSwgY29udGVudFR5cGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgISFyZXNwb25zZS5oZWFkZXJzICYmXG4gICAgICAgICAgICAhIXJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdDb250ZW50LXR5cGUnKSAmJlxuICAgICAgICAgICAgKHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdDb250ZW50LXR5cGUnKSB8fCAnJykuaW5kZXhPZihjb250ZW50VHlwZSkgPT09IDBcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpc0hUTUxSZXF1ZXN0KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4sIHJlc3BvbnNlPzogSHR0cFJlc3BvbnNlQmFzZSkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5pc0dFVChyZXF1ZXN0KSAmJlxuICAgICAgICAgICAgKHRoaXMuaXNSZXF1ZXN0T2ZBY2NlcHQocmVxdWVzdCwgJ3RleHQvaHRtbCcpIHx8XG4gICAgICAgICAgICAgICAgLy4rXFwuaHRtbCQvLnRlc3QocmVxdWVzdC51cmwpIHx8XG4gICAgICAgICAgICAgICAgLy4rXFwuaHRtbFxcPy8udGVzdChyZXF1ZXN0LnVybCkpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaXNKU09OUmVxdWVzdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCByZXNwb25zZT86IEh0dHBSZXNwb25zZUJhc2UpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMuaXNHRVQocmVxdWVzdCkgJiZcbiAgICAgICAgICAgICgocmVzcG9uc2UgJiYgdGhpcy5pc1Jlc3BvbnNlT2ZDb250ZW50VHlwZShyZXNwb25zZSwgJ2pzb24nKSkgfHxcbiAgICAgICAgICAgICAgICAvLitcXC5qc29uJC8udGVzdChyZXF1ZXN0LnVybCkpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaXNKU1JlcXVlc3QocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55Pikge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0dFVChyZXF1ZXN0KSAmJiAvLitcXC5qcyQvLnRlc3QocmVxdWVzdC51cmwpO1xuICAgIH1cblxuICAgIGlzQ1JVRFJlcXVlc3QocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgcmVzcG9uc2U/OiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgIXRoaXMuaXNIVE1MUmVxdWVzdChyZXF1ZXN0LCByZXNwb25zZSkgJiZcbiAgICAgICAgICAgICF0aGlzLmlzSlNPTlJlcXVlc3QocmVxdWVzdCwgcmVzcG9uc2UpICYmXG4gICAgICAgICAgICAhdGhpcy5pc0pTUmVxdWVzdChyZXF1ZXN0KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHRyYW5zZm9ybUh0dHBQYXJhbXMocGFyYW1zOiBIdHRwUGFyYW1zLCBzdWJzdGl0dXRpb25NYXA6IFR5cGVkTWFwPHN0cmluZz4pOiBIdHRwUGFyYW1zIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIdHRwUGFyYW1zKHtcbiAgICAgICAgICAgIGZyb21PYmplY3Q6IEpTT04ucGFyc2UoXG4gICAgICAgICAgICAgICAgc3RyaW5nVXRpbHMucmVwbGFjZUFsbChcbiAgICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkodGhpcy5jb3B5SHR0cFBhcmFtc09ySGVhZGVycyhwYXJhbXMpKSxcbiAgICAgICAgICAgICAgICAgICAgc3Vic3RpdHV0aW9uTWFwXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb3B5SHR0cFBhcmFtc09ySGVhZGVycyhwYXJhbXM6IEh0dHBQYXJhbXMgfCBIdHRwSGVhZGVycyk6IFR5cGVkTWFwPHN0cmluZyB8IHN0cmluZ1tdPiB7XG4gICAgICAgIGNvbnN0IGNvcHkgPSB7fSBhcyBUeXBlZE1hcDxzdHJpbmcgfCBzdHJpbmdbXT47XG4gICAgICAgIHBhcmFtcy5rZXlzKCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSBwYXJhbXMuZ2V0QWxsKGtleSk7XG4gICAgICAgICAgICBpZiAodmFsdWVzICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29weVtrZXldID0gdmFsdWVzLmxlbmd0aCA+IDEgPyB2YWx1ZXMgOiB2YWx1ZXNbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29weTtcbiAgICB9XG5cbiAgICBidWlsZEh0dHBSZXNwb25zZTxUID0gYW55PihcbiAgICAgICAgb3JpZ2luYWxSZXF1ZXN0OiBIdHRwUmVxdWVzdDxUPixcbiAgICAgICAgX3N0YXR1c0FuZFBheWxvYWQ6XG4gICAgICAgICAgICB8IFtudW1iZXIsIFBheWxvYWQgfCBQYXlsb2FkW11dXG4gICAgICAgICAgICB8IFByb21pc2VMaWtlPFtudW1iZXIsIFBheWxvYWQgfCBQYXlsb2FkW11dPlxuICAgICk6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4gfCBuZXZlcj4ge1xuICAgICAgICBjb25zdCBzdGF0dXNBbmRQYXlsb2FkUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShfc3RhdHVzQW5kUGF5bG9hZCk7XG5cbiAgICAgICAgcmV0dXJuIGZyb20oc3RhdHVzQW5kUGF5bG9hZFByb21pc2UpLnBpcGUoXG4gICAgICAgICAgICBzd2l0Y2hNYXAoKHN0YXR1c0FuZFBheWxvYWQ6IFtudW1iZXIsIFBheWxvYWQgfCBQYXlsb2FkW11dKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdHVzID0gc3RhdHVzQW5kUGF5bG9hZFswXTtcbiAgICAgICAgICAgICAgICBjb25zdCBib2R5ID0gc3RhdHVzQW5kUGF5bG9hZFsxXTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0Q2xvbmUgPSBvcmlnaW5hbFJlcXVlc3QuY2xvbmUoe1xuICAgICAgICAgICAgICAgICAgICBib2R5XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbG9kYXNoLm1lcmdlKHJlcXVlc3RDbG9uZSwgeyBzdGF0dXMgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoMjAwIDw9IHN0YXR1cyAmJiBzdGF0dXMgPCAzMDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+Pigob2IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iLm5leHQobmV3IEh0dHBSZXNwb25zZShyZXF1ZXN0Q2xvbmUpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgSHR0cEVycm9yUmVzcG9uc2UobG9kYXNoLm1lcmdlKHJlcXVlc3RDbG9uZSwgeyBlcnJvcjogYm9keSB9KSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGh0dHBVdGlscyA9IG5ldyBIdHRwVXRpbHMoKTtcbiJdfQ==